
sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008348  08008348  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008350  08008350  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024fc  20000080  080083d8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000257c  080083d8  0002257c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e63c  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000270f  00000000  00000000  0002e72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00030e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a16  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188c6  00000000  00000000  0003258e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139a7  00000000  00000000  0004ae54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ac85  00000000  00000000  0005e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee0  00000000  00000000  000e9480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ed360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bf4 	.word	0x08007bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007bf4 	.word	0x08007bf4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <SELECT+0x18>)
 80005b6:	f001 ffeb 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f001 fd42 	bl	8002044 <HAL_Delay>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40020000 	.word	0x40020000

080005c8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <DESELECT+0x18>)
 80005d2:	f001 ffdd 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 fd34 	bl	8002044 <HAL_Delay>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020000 	.word	0x40020000

080005e4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ee:	bf00      	nop
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SPI_TxByte+0x30>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d1f8      	bne.n	80005f0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	2201      	movs	r2, #1
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <SPI_TxByte+0x30>)
 8000606:	f002 fcfe 	bl	8003006 <HAL_SPI_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000a4 	.word	0x200000a4

08000618 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000624:	bf00      	nop
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <SPI_TxBuffer+0x30>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f003 0302 	and.w	r3, r3, #2
 8000630:	2b02      	cmp	r3, #2
 8000632:	d1f8      	bne.n	8000626 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <SPI_TxBuffer+0x30>)
 800063c:	f002 fce3 	bl	8003006 <HAL_SPI_Transmit>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000a4 	.word	0x200000a4

0800064c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000656:	bf00      	nop
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <SPI_RxByte+0x34>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b02      	cmp	r3, #2
 8000664:	d1f8      	bne.n	8000658 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000666:	1dba      	adds	r2, r7, #6
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <SPI_RxByte+0x34>)
 8000672:	f002 fe04 	bl	800327e <HAL_SPI_TransmitReceive>

	return data;
 8000676:	79bb      	ldrb	r3, [r7, #6]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000a4 	.word	0x200000a4

08000684 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800068c:	f7ff ffde 	bl	800064c <SPI_RxByte>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	701a      	strb	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <SD_ReadyWait+0x30>)
 80006a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ac:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ae:	f7ff ffcd 	bl	800064c <SPI_RxByte>
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2bff      	cmp	r3, #255	; 0xff
 80006ba:	d003      	beq.n	80006c4 <SD_ReadyWait+0x24>
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <SD_ReadyWait+0x30>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1f4      	bne.n	80006ae <SD_ReadyWait+0xe>

	return res;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000009e 	.word	0x2000009e

080006d4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006da:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006de:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006e0:	f7ff ff72 	bl	80005c8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e005      	b.n	80006f6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006ea:	20ff      	movs	r0, #255	; 0xff
 80006ec:	f7ff ff7a 	bl	80005e4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b09      	cmp	r3, #9
 80006fa:	ddf6      	ble.n	80006ea <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006fc:	f7ff ff56 	bl	80005ac <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000714:	2395      	movs	r3, #149	; 0x95
 8000716:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000718:	463b      	mov	r3, r7
 800071a:	2106      	movs	r1, #6
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff7b 	bl	8000618 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000722:	e002      	b.n	800072a <SD_PowerOn+0x56>
	{
		cnt--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3b01      	subs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800072a:	f7ff ff8f 	bl	800064c <SPI_RxByte>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d002      	beq.n	800073a <SD_PowerOn+0x66>
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f4      	bne.n	8000724 <SD_PowerOn+0x50>
	}

	DESELECT();
 800073a:	f7ff ff45 	bl	80005c8 <DESELECT>
	SPI_TxByte(0XFF);
 800073e:	20ff      	movs	r0, #255	; 0xff
 8000740:	f7ff ff50 	bl	80005e4 <SPI_TxByte>

	PowerFlag = 1;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <SD_PowerOn+0x80>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000a1 	.word	0x200000a1

08000758 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <SD_PowerOff+0x14>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	200000a1 	.word	0x200000a1

08000770 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <SD_CheckPower+0x14>)
 8000776:	781b      	ldrb	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200000a1 	.word	0x200000a1

08000788 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <SD_RxDataBlock+0x58>)
 8000794:	22c8      	movs	r2, #200	; 0xc8
 8000796:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000798:	f7ff ff58 	bl	800064c <SPI_RxByte>
 800079c:	4603      	mov	r3, r0
 800079e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2bff      	cmp	r3, #255	; 0xff
 80007a4:	d103      	bne.n	80007ae <SD_RxDataBlock+0x26>
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <SD_RxDataBlock+0x58>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f4      	bne.n	8000798 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	2bfe      	cmp	r3, #254	; 0xfe
 80007b2:	d001      	beq.n	80007b8 <SD_RxDataBlock+0x30>
 80007b4:	2300      	movs	r3, #0
 80007b6:	e00f      	b.n	80007d8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff60 	bl	8000684 <SPI_RxBytePtr>
	} while(len--);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	603a      	str	r2, [r7, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f4      	bne.n	80007b8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007ce:	f7ff ff3d 	bl	800064c <SPI_RxByte>
	SPI_RxByte();
 80007d2:	f7ff ff3b 	bl	800064c <SPI_RxByte>

	return TRUE;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007f4:	f7ff ff54 	bl	80006a0 <SD_ReadyWait>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2bff      	cmp	r3, #255	; 0xff
 80007fc:	d001      	beq.n	8000802 <SD_TxDataBlock+0x1e>
 80007fe:	2300      	movs	r3, #0
 8000800:	e02f      	b.n	8000862 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff feed 	bl	80005e4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	2bfd      	cmp	r3, #253	; 0xfd
 800080e:	d020      	beq.n	8000852 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff feff 	bl	8000618 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800081a:	f7ff ff17 	bl	800064c <SPI_RxByte>
		SPI_RxByte();
 800081e:	f7ff ff15 	bl	800064c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000822:	e00b      	b.n	800083c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000824:	f7ff ff12 	bl	800064c <SPI_RxByte>
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b05      	cmp	r3, #5
 8000834:	d006      	beq.n	8000844 <SD_TxDataBlock+0x60>
			i++;
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	3301      	adds	r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	2b40      	cmp	r3, #64	; 0x40
 8000840:	d9f0      	bls.n	8000824 <SD_TxDataBlock+0x40>
 8000842:	e000      	b.n	8000846 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000844:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000846:	bf00      	nop
 8000848:	f7ff ff00 	bl	800064c <SPI_RxByte>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0fa      	beq.n	8000848 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	f003 031f 	and.w	r3, r3, #31
 8000858:	2b05      	cmp	r3, #5
 800085a:	d101      	bne.n	8000860 <SD_TxDataBlock+0x7c>
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	6039      	str	r1, [r7, #0]
 8000874:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000876:	f7ff ff13 	bl	80006a0 <SD_ReadyWait>
 800087a:	4603      	mov	r3, r0
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d001      	beq.n	8000884 <SD_SendCmd+0x1a>
 8000880:	23ff      	movs	r3, #255	; 0xff
 8000882:	e042      	b.n	800090a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff feac 	bl	80005e4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	0e1b      	lsrs	r3, r3, #24
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fea6 	bl	80005e4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fea0 	bl	80005e4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe9a 	bl	80005e4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe95 	bl	80005e4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b40      	cmp	r3, #64	; 0x40
 80008be:	d102      	bne.n	80008c6 <SD_SendCmd+0x5c>
 80008c0:	2395      	movs	r3, #149	; 0x95
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e007      	b.n	80008d6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b48      	cmp	r3, #72	; 0x48
 80008ca:	d102      	bne.n	80008d2 <SD_SendCmd+0x68>
 80008cc:	2387      	movs	r3, #135	; 0x87
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e001      	b.n	80008d6 <SD_SendCmd+0x6c>
	else crc = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe83 	bl	80005e4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b4c      	cmp	r3, #76	; 0x4c
 80008e2:	d101      	bne.n	80008e8 <SD_SendCmd+0x7e>
 80008e4:	f7ff feb2 	bl	800064c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008e8:	230a      	movs	r3, #10
 80008ea:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008ec:	f7ff feae 	bl	800064c <SPI_RxByte>
 80008f0:	4603      	mov	r3, r0
 80008f2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	da05      	bge.n	8000908 <SD_SendCmd+0x9e>
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	3b01      	subs	r3, #1
 8000900:	73bb      	strb	r3, [r7, #14]
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f1      	bne.n	80008ec <SD_SendCmd+0x82>

	return res;
 8000908:	7b7b      	ldrb	r3, [r7, #13]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SD_disk_initialize+0x14>
 8000924:	2301      	movs	r3, #1
 8000926:	e0d1      	b.n	8000acc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000928:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <SD_disk_initialize+0x1c0>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <SD_disk_initialize+0x2a>
 8000936:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <SD_disk_initialize+0x1c0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	e0c6      	b.n	8000acc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800093e:	f7ff fec9 	bl	80006d4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000942:	f7ff fe33 	bl	80005ac <SELECT>

	/* check disk type */
	type = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800094a:	2100      	movs	r1, #0
 800094c:	2040      	movs	r0, #64	; 0x40
 800094e:	f7ff ff8c 	bl	800086a <SD_SendCmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	f040 80a1 	bne.w	8000a9c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800095a:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <SD_disk_initialize+0x1c4>)
 800095c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000960:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000962:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000966:	2048      	movs	r0, #72	; 0x48
 8000968:	f7ff ff7f 	bl	800086a <SD_SendCmd>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d155      	bne.n	8000a1e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e00c      	b.n	8000992 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000978:	7bfc      	ldrb	r4, [r7, #15]
 800097a:	f7ff fe67 	bl	800064c <SPI_RxByte>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	f104 0310 	add.w	r3, r4, #16
 8000986:	443b      	add	r3, r7
 8000988:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	3301      	adds	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d9ef      	bls.n	8000978 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000998:	7abb      	ldrb	r3, [r7, #10]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d17e      	bne.n	8000a9c <SD_disk_initialize+0x188>
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	2baa      	cmp	r3, #170	; 0xaa
 80009a2:	d17b      	bne.n	8000a9c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a4:	2100      	movs	r1, #0
 80009a6:	2077      	movs	r0, #119	; 0x77
 80009a8:	f7ff ff5f 	bl	800086a <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d807      	bhi.n	80009c2 <SD_disk_initialize+0xae>
 80009b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009b6:	2069      	movs	r0, #105	; 0x69
 80009b8:	f7ff ff57 	bl	800086a <SD_SendCmd>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <SD_disk_initialize+0x1c4>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1ec      	bne.n	80009a4 <SD_disk_initialize+0x90>
 80009ca:	e000      	b.n	80009ce <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009cc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <SD_disk_initialize+0x1c4>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d062      	beq.n	8000a9c <SD_disk_initialize+0x188>
 80009d6:	2100      	movs	r1, #0
 80009d8:	207a      	movs	r0, #122	; 0x7a
 80009da:	f7ff ff46 	bl	800086a <SD_SendCmd>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d15b      	bne.n	8000a9c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e00c      	b.n	8000a04 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009ea:	7bfc      	ldrb	r4, [r7, #15]
 80009ec:	f7ff fe2e 	bl	800064c <SPI_RxByte>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	f104 0310 	add.w	r3, r4, #16
 80009f8:	443b      	add	r3, r7
 80009fa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3301      	adds	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d9ef      	bls.n	80009ea <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a0a:	7a3b      	ldrb	r3, [r7, #8]
 8000a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SD_disk_initialize+0x104>
 8000a14:	230c      	movs	r3, #12
 8000a16:	e000      	b.n	8000a1a <SD_disk_initialize+0x106>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	73bb      	strb	r3, [r7, #14]
 8000a1c:	e03e      	b.n	8000a9c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2077      	movs	r0, #119	; 0x77
 8000a22:	f7ff ff22 	bl	800086a <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d808      	bhi.n	8000a3e <SD_disk_initialize+0x12a>
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2069      	movs	r0, #105	; 0x69
 8000a30:	f7ff ff1b 	bl	800086a <SD_SendCmd>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d801      	bhi.n	8000a3e <SD_disk_initialize+0x12a>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e000      	b.n	8000a40 <SD_disk_initialize+0x12c>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d10e      	bne.n	8000a66 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2077      	movs	r0, #119	; 0x77
 8000a4c:	f7ff ff0d 	bl	800086a <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d80e      	bhi.n	8000a74 <SD_disk_initialize+0x160>
 8000a56:	2100      	movs	r1, #0
 8000a58:	2069      	movs	r0, #105	; 0x69
 8000a5a:	f7ff ff06 	bl	800086a <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <SD_disk_initialize+0x160>
 8000a64:	e00c      	b.n	8000a80 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a66:	2100      	movs	r1, #0
 8000a68:	2041      	movs	r0, #65	; 0x41
 8000a6a:	f7ff fefe 	bl	800086a <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d004      	beq.n	8000a7e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <SD_disk_initialize+0x1c4>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1e2      	bne.n	8000a42 <SD_disk_initialize+0x12e>
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a7e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <SD_disk_initialize+0x1c4>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <SD_disk_initialize+0x184>
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	2050      	movs	r0, #80	; 0x50
 8000a8e:	f7ff feec 	bl	800086a <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SD_disk_initialize+0x188>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a9c:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <SD_disk_initialize+0x1c8>)
 8000a9e:	7bbb      	ldrb	r3, [r7, #14]
 8000aa0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000aa2:	f7ff fd91 	bl	80005c8 <DESELECT>
	SPI_RxByte();
 8000aa6:	f7ff fdd1 	bl	800064c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <SD_disk_initialize+0x1c0>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f023 0301 	bic.w	r3, r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SD_disk_initialize+0x1c0>)
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e001      	b.n	8000ac6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ac2:	f7ff fe49 	bl	8000758 <SD_PowerOff>
	}

	return Stat;
 8000ac6:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <SD_disk_initialize+0x1c0>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	2000009c 	.word	0x2000009c
 8000adc:	200000a0 	.word	0x200000a0

08000ae0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SD_disk_status+0x14>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e002      	b.n	8000afa <SD_disk_status+0x1a>
	return Stat;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SD_disk_status+0x28>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <SD_disk_read+0x1c>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <SD_disk_read+0x20>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	e051      	b.n	8000bd0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <SD_disk_read+0xcc>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SD_disk_read+0x32>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e048      	b.n	8000bd0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <SD_disk_read+0xd0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <SD_disk_read+0x44>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	025b      	lsls	r3, r3, #9
 8000b4e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b50:	f7ff fd2c 	bl	80005ac <SELECT>

	if (count == 1)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d111      	bne.n	8000b7e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2051      	movs	r0, #81	; 0x51
 8000b5e:	f7ff fe84 	bl	800086a <SD_SendCmd>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d129      	bne.n	8000bbc <SD_disk_read+0xb0>
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fe0b 	bl	8000788 <SD_RxDataBlock>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d021      	beq.n	8000bbc <SD_disk_read+0xb0>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	e01e      	b.n	8000bbc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2052      	movs	r0, #82	; 0x52
 8000b82:	f7ff fe72 	bl	800086a <SD_SendCmd>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d117      	bne.n	8000bbc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f7ff fdf9 	bl	8000788 <SD_RxDataBlock>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00a      	beq.n	8000bb2 <SD_disk_read+0xa6>
				buff += 512;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ba2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1ed      	bne.n	8000b8c <SD_disk_read+0x80>
 8000bb0:	e000      	b.n	8000bb4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bb2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	204c      	movs	r0, #76	; 0x4c
 8000bb8:	f7ff fe57 	bl	800086a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bbc:	f7ff fd04 	bl	80005c8 <DESELECT>
	SPI_RxByte();
 8000bc0:	f7ff fd44 	bl	800064c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	bf14      	ite	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	2300      	moveq	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	200000a0 	.word	0x200000a0

08000be0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	4603      	mov	r3, r0
 8000bee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <SD_disk_write+0x1c>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <SD_disk_write+0x20>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e06b      	b.n	8000cd8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <SD_disk_write+0x100>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SD_disk_write+0x32>
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e062      	b.n	8000cd8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <SD_disk_write+0x100>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SD_disk_write+0x44>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e059      	b.n	8000cd8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <SD_disk_write+0x104>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <SD_disk_write+0x56>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	025b      	lsls	r3, r3, #9
 8000c34:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c36:	f7ff fcb9 	bl	80005ac <SELECT>

	if (count == 1)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d110      	bne.n	8000c62 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	2058      	movs	r0, #88	; 0x58
 8000c44:	f7ff fe11 	bl	800086a <SD_SendCmd>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d13a      	bne.n	8000cc4 <SD_disk_write+0xe4>
 8000c4e:	21fe      	movs	r1, #254	; 0xfe
 8000c50:	68b8      	ldr	r0, [r7, #8]
 8000c52:	f7ff fdc7 	bl	80007e4 <SD_TxDataBlock>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d033      	beq.n	8000cc4 <SD_disk_write+0xe4>
			count = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	e030      	b.n	8000cc4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <SD_disk_write+0x104>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2077      	movs	r0, #119	; 0x77
 8000c72:	f7ff fdfa 	bl	800086a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	2057      	movs	r0, #87	; 0x57
 8000c7a:	f7ff fdf6 	bl	800086a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2059      	movs	r0, #89	; 0x59
 8000c82:	f7ff fdf2 	bl	800086a <SD_SendCmd>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d11b      	bne.n	8000cc4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c8c:	21fc      	movs	r1, #252	; 0xfc
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f7ff fda8 	bl	80007e4 <SD_TxDataBlock>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00a      	beq.n	8000cb0 <SD_disk_write+0xd0>
				buff += 512;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ca0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1ee      	bne.n	8000c8c <SD_disk_write+0xac>
 8000cae:	e000      	b.n	8000cb2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cb0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cb2:	21fd      	movs	r1, #253	; 0xfd
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fd95 	bl	80007e4 <SD_TxDataBlock>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cc4:	f7ff fc80 	bl	80005c8 <DESELECT>
	SPI_RxByte();
 8000cc8:	f7ff fcc0 	bl	800064c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	200000a0 	.word	0x200000a0

08000ce8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	603a      	str	r2, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SD_disk_ioctl+0x1e>
 8000d02:	2304      	movs	r3, #4
 8000d04:	e115      	b.n	8000f32 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	d124      	bne.n	8000d5c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d012      	beq.n	8000d40 <SD_disk_ioctl+0x58>
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	dc1a      	bgt.n	8000d54 <SD_disk_ioctl+0x6c>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <SD_disk_ioctl+0x40>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d006      	beq.n	8000d34 <SD_disk_ioctl+0x4c>
 8000d26:	e015      	b.n	8000d54 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d28:	f7ff fd16 	bl	8000758 <SD_PowerOff>
			res = RES_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d32:	e0fc      	b.n	8000f2e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d34:	f7ff fcce 	bl	80006d4 <SD_PowerOn>
			res = RES_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d3e:	e0f6      	b.n	8000f2e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	1c5c      	adds	r4, r3, #1
 8000d44:	f7ff fd14 	bl	8000770 <SD_CheckPower>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d52:	e0ec      	b.n	8000f2e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d54:	2304      	movs	r3, #4
 8000d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d5a:	e0e8      	b.n	8000f2e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d5c:	4b77      	ldr	r3, [pc, #476]	; (8000f3c <SD_disk_ioctl+0x254>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SD_disk_ioctl+0x86>
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e0e1      	b.n	8000f32 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d6e:	f7ff fc1d 	bl	80005ac <SELECT>

		switch (ctrl)
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	2b0d      	cmp	r3, #13
 8000d76:	f200 80cb 	bhi.w	8000f10 <SD_disk_ioctl+0x228>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <SD_disk_ioctl+0x98>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000e7b 	.word	0x08000e7b
 8000d84:	08000db9 	.word	0x08000db9
 8000d88:	08000e6b 	.word	0x08000e6b
 8000d8c:	08000f11 	.word	0x08000f11
 8000d90:	08000f11 	.word	0x08000f11
 8000d94:	08000f11 	.word	0x08000f11
 8000d98:	08000f11 	.word	0x08000f11
 8000d9c:	08000f11 	.word	0x08000f11
 8000da0:	08000f11 	.word	0x08000f11
 8000da4:	08000f11 	.word	0x08000f11
 8000da8:	08000f11 	.word	0x08000f11
 8000dac:	08000e8d 	.word	0x08000e8d
 8000db0:	08000eb1 	.word	0x08000eb1
 8000db4:	08000ed5 	.word	0x08000ed5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000db8:	2100      	movs	r1, #0
 8000dba:	2049      	movs	r0, #73	; 0x49
 8000dbc:	f7ff fd55 	bl	800086a <SD_SendCmd>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 80a8 	bne.w	8000f18 <SD_disk_ioctl+0x230>
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fcda 	bl	8000788 <SD_RxDataBlock>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 809e 	beq.w	8000f18 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000ddc:	7b3b      	ldrb	r3, [r7, #12]
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d10e      	bne.n	8000e04 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	7d3b      	ldrb	r3, [r7, #20]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dfa:	8bfb      	ldrh	r3, [r7, #30]
 8000dfc:	029a      	lsls	r2, r3, #10
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e02e      	b.n	8000e62 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e04:	7c7b      	ldrb	r3, [r7, #17]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	7dbb      	ldrb	r3, [r7, #22]
 8000e0e:	09db      	lsrs	r3, r3, #7
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	7d7b      	ldrb	r3, [r7, #21]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0306 	and.w	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3302      	adds	r3, #2
 8000e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e2c:	7d3b      	ldrb	r3, [r7, #20]
 8000e2e:	099b      	lsrs	r3, r3, #6
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	7cfb      	ldrb	r3, [r7, #19]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	7cbb      	ldrb	r3, [r7, #18]
 8000e42:	029b      	lsls	r3, r3, #10
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e54:	8bfa      	ldrh	r2, [r7, #30]
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e5a:	3b09      	subs	r3, #9
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e68:	e056      	b.n	8000f18 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e78:	e055      	b.n	8000f26 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e7a:	f7ff fc11 	bl	80006a0 <SD_ReadyWait>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2bff      	cmp	r3, #255	; 0xff
 8000e82:	d14b      	bne.n	8000f1c <SD_disk_ioctl+0x234>
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e8a:	e047      	b.n	8000f1c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2049      	movs	r0, #73	; 0x49
 8000e90:	f7ff fceb 	bl	800086a <SD_SendCmd>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d142      	bne.n	8000f20 <SD_disk_ioctl+0x238>
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	6a38      	ldr	r0, [r7, #32]
 8000e9e:	f7ff fc73 	bl	8000788 <SD_RxDataBlock>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d03b      	beq.n	8000f20 <SD_disk_ioctl+0x238>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eae:	e037      	b.n	8000f20 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	204a      	movs	r0, #74	; 0x4a
 8000eb4:	f7ff fcd9 	bl	800086a <SD_SendCmd>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d132      	bne.n	8000f24 <SD_disk_ioctl+0x23c>
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	6a38      	ldr	r0, [r7, #32]
 8000ec2:	f7ff fc61 	bl	8000788 <SD_RxDataBlock>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02b      	beq.n	8000f24 <SD_disk_ioctl+0x23c>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ed2:	e027      	b.n	8000f24 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	207a      	movs	r0, #122	; 0x7a
 8000ed8:	f7ff fcc7 	bl	800086a <SD_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d116      	bne.n	8000f10 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ee8:	e00b      	b.n	8000f02 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eea:	6a3c      	ldr	r4, [r7, #32]
 8000eec:	1c63      	adds	r3, r4, #1
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	f7ff fbac 	bl	800064c <SPI_RxByte>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efc:	3301      	adds	r3, #1
 8000efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d9ef      	bls.n	8000eea <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f16:	e006      	b.n	8000f26 <SD_disk_ioctl+0x23e>
			break;
 8000f18:	bf00      	nop
 8000f1a:	e004      	b.n	8000f26 <SD_disk_ioctl+0x23e>
			break;
 8000f1c:	bf00      	nop
 8000f1e:	e002      	b.n	8000f26 <SD_disk_ioctl+0x23e>
			break;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <SD_disk_ioctl+0x23e>
			break;
 8000f24:	bf00      	nop
		}

		DESELECT();
 8000f26:	f7ff fb4f 	bl	80005c8 <DESELECT>
		SPI_RxByte();
 8000f2a:	f7ff fb8f 	bl	800064c <SPI_RxByte>
	}

	return res;
 8000f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	372c      	adds	r7, #44	; 0x2c
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000000 	.word	0x20000000

08000f40 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000f4e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000f56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f62:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f80e 	bl	8000f96 <Lcd_init>

	return lcd;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	f107 0410 	add.w	r4, r7, #16
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f8a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}

08000f96 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7d9b      	ldrb	r3, [r3, #22]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000fa6:	2133      	movs	r1, #51	; 0x33
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f857 	bl	800105c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000fae:	2132      	movs	r1, #50	; 0x32
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f853 	bl	800105c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000fb6:	2128      	movs	r1, #40	; 0x28
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f84f 	bl	800105c <lcd_write_command>
 8000fbe:	e003      	b.n	8000fc8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000fc0:	2138      	movs	r1, #56	; 0x38
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f84a 	bl	800105c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000fc8:	2101      	movs	r1, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f846 	bl	800105c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000fd0:	210c      	movs	r1, #12
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f842 	bl	800105c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000fd8:	2106      	movs	r1, #6
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f83e 	bl	800105c <lcd_write_command>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e00a      	b.n	800100e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f858 	bl	80010b8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfc      	ldrb	r4, [r7, #15]
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f7ff f8ef 	bl	80001f4 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	429c      	cmp	r4, r3
 800101a:	d3ed      	bcc.n	8000ff8 <Lcd_string+0x10>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
	...

08001028 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
 8001034:	4613      	mov	r3, r2
 8001036:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <Lcd_cursor+0x30>)
 800103c:	5cd2      	ldrb	r2, [r2, r3]
 800103e:	78bb      	ldrb	r3, [r7, #2]
 8001040:	4413      	add	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3b80      	subs	r3, #128	; 0x80
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f806 	bl	800105c <lcd_write_command>
	#endif
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	08007d08 	.word	0x08007d08

0800105c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6898      	ldr	r0, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	899b      	ldrh	r3, [r3, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	f001 fa8c 	bl	8002590 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7d9b      	ldrb	r3, [r3, #22]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d111      	bne.n	80010a4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f842 	bl	8001114 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2204      	movs	r2, #4
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f839 	bl	8001114 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80010a2:	e005      	b.n	80010b0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2208      	movs	r2, #8
 80010a8:	4619      	mov	r1, r3
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f832 	bl	8001114 <lcd_write>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6898      	ldr	r0, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	899b      	ldrh	r3, [r3, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	f001 fa5e 	bl	8002590 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7d9b      	ldrb	r3, [r3, #22]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2204      	movs	r2, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f814 	bl	8001114 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2204      	movs	r2, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f80b 	bl	8001114 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80010fe:	e005      	b.n	800110c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2208      	movs	r2, #8
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f804 	bl	8001114 <lcd_write>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
 8001120:	4613      	mov	r3, r2
 8001122:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e019      	b.n	800115e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	8819      	ldrh	r1, [r3, #0]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	fa42 f303 	asr.w	r3, r2, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	f001 fa1c 	bl	8002590 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3301      	adds	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	78bb      	ldrb	r3, [r7, #2]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3e1      	bcc.n	800112a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6918      	ldr	r0, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8a9b      	ldrh	r3, [r3, #20]
 800116e:	2201      	movs	r2, #1
 8001170:	4619      	mov	r1, r3
 8001172:	f001 fa0d 	bl	8002590 <HAL_GPIO_WritePin>
	DELAY(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 ff64 	bl	8002044 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6918      	ldr	r0, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8a9b      	ldrh	r3, [r3, #20]
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	f001 fa02 	bl	8002590 <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <_write+0x28>)
 80011ac:	f002 fb21 	bl	80037f2 <HAL_UART_Transmit>
	return len;
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000140 	.word	0x20000140

080011c0 <transmit_uart>:

void transmit_uart(char *string){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  	uint8_t len = strlen(string);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f813 	bl	80001f4 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
  	HAL_UART_Transmit(&huart2, (uint8_t*) string ,len , 200);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	23c8      	movs	r3, #200	; 0xc8
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <transmit_uart+0x28>)
 80011dc:	f002 fb09 	bl	80037f2 <HAL_UART_Transmit>
  }
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000140 	.word	0x20000140

080011ec <removeNonAlphabetChars>:
// function to remove a character from a string
char* removeNonAlphabetChars(const char *str) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    int length = strlen(str);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7fe fffd 	bl	80001f4 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
    char* newString = (char*)malloc(length + 1);  // Allocate memory for the new string
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3301      	adds	r3, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fcd8 	bl	8006bb8 <malloc>
 8001208:	4603      	mov	r3, r0
 800120a:	60bb      	str	r3, [r7, #8]

    if (newString == NULL) {
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <removeNonAlphabetChars+0x2a>
        return NULL;  // Memory allocation failed
 8001212:	2300      	movs	r3, #0
 8001214:	e028      	b.n	8001268 <removeNonAlphabetChars+0x7c>
    }

    int newLength = 0;  // Length of the new string
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < length; i++) {
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	e019      	b.n	8001254 <removeNonAlphabetChars+0x68>
        if (isalpha((uint32_t)str[i])) {
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <removeNonAlphabetChars+0x84>)
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00a      	beq.n	800124e <removeNonAlphabetChars+0x62>
            newString[newLength] = str[i];
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	441a      	add	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	440b      	add	r3, r1
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	701a      	strb	r2, [r3, #0]
            newLength++;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++) {
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	3301      	adds	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbe1      	blt.n	8001220 <removeNonAlphabetChars+0x34>
        }
    }

    newString[newLength] = '\0';  // Null-terminate the new string
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
    return newString;
 8001266:	68bb      	ldr	r3, [r7, #8]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08008164 	.word	0x08008164

08001274 <read_from_keypad>:

char read_from_keypad()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
    char character_defined ;
	HAL_GPIO_WritePin (ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 800127a:	2200      	movs	r2, #0
 800127c:	2140      	movs	r1, #64	; 0x40
 800127e:	48bb      	ldr	r0, [pc, #748]	; (800156c <read_from_keypad+0x2f8>)
 8001280:	f001 f986 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128a:	48b9      	ldr	r0, [pc, #740]	; (8001570 <read_from_keypad+0x2fc>)
 800128c:	f001 f980 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001296:	48b6      	ldr	r0, [pc, #728]	; (8001570 <read_from_keypad+0x2fc>)
 8001298:	f001 f97a 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a2:	48b3      	ldr	r0, [pc, #716]	; (8001570 <read_from_keypad+0x2fc>)
 80012a4:	f001 f974 	bl	8002590 <HAL_GPIO_WritePin>
	if (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)))   // if the Col 1 is low
 80012a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ac:	48b0      	ldr	r0, [pc, #704]	; (8001570 <read_from_keypad+0x2fc>)
 80012ae:	f001 f957 	bl	8002560 <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10a      	bne.n	80012ce <read_from_keypad+0x5a>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)));   // wait till the button is pressed
 80012b8:	bf00      	nop
 80012ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012be:	48ac      	ldr	r0, [pc, #688]	; (8001570 <read_from_keypad+0x2fc>)
 80012c0:	f001 f94e 	bl	8002560 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f7      	beq.n	80012ba <read_from_keypad+0x46>
		character_defined = '1';
 80012ca:	2331      	movs	r3, #49	; 0x31
 80012cc:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)))   // if the Col 2 is low
 80012ce:	2102      	movs	r1, #2
 80012d0:	48a7      	ldr	r0, [pc, #668]	; (8001570 <read_from_keypad+0x2fc>)
 80012d2:	f001 f945 	bl	8002560 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <read_from_keypad+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)));   // wait till the button is pressed
 80012dc:	bf00      	nop
 80012de:	2102      	movs	r1, #2
 80012e0:	48a3      	ldr	r0, [pc, #652]	; (8001570 <read_from_keypad+0x2fc>)
 80012e2:	f001 f93d 	bl	8002560 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f8      	beq.n	80012de <read_from_keypad+0x6a>
		character_defined = '2';
 80012ec:	2332      	movs	r3, #50	; 0x32
 80012ee:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)))   // if the Col 3 is low
 80012f0:	2101      	movs	r1, #1
 80012f2:	489f      	ldr	r0, [pc, #636]	; (8001570 <read_from_keypad+0x2fc>)
 80012f4:	f001 f934 	bl	8002560 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <read_from_keypad+0x9e>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)));   // wait till the button is pressed
 80012fe:	bf00      	nop
 8001300:	2101      	movs	r1, #1
 8001302:	489b      	ldr	r0, [pc, #620]	; (8001570 <read_from_keypad+0x2fc>)
 8001304:	f001 f92c 	bl	8002560 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f8      	beq.n	8001300 <read_from_keypad+0x8c>
		character_defined = '3';
 800130e:	2333      	movs	r3, #51	; 0x33
 8001310:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)))   // if the Col 4 is low
 8001312:	2120      	movs	r1, #32
 8001314:	4895      	ldr	r0, [pc, #596]	; (800156c <read_from_keypad+0x2f8>)
 8001316:	f001 f923 	bl	8002560 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <read_from_keypad+0xc0>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)));   // wait till the button is pressed
 8001320:	bf00      	nop
 8001322:	2120      	movs	r1, #32
 8001324:	4891      	ldr	r0, [pc, #580]	; (800156c <read_from_keypad+0x2f8>)
 8001326:	f001 f91b 	bl	8002560 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f8      	beq.n	8001322 <read_from_keypad+0xae>
		character_defined = 'A';
 8001330:	2341      	movs	r3, #65	; 0x41
 8001332:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin (ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8001334:	2201      	movs	r2, #1
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	488c      	ldr	r0, [pc, #560]	; (800156c <read_from_keypad+0x2f8>)
 800133a:	f001 f929 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001344:	488a      	ldr	r0, [pc, #552]	; (8001570 <read_from_keypad+0x2fc>)
 8001346:	f001 f923 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001350:	4887      	ldr	r0, [pc, #540]	; (8001570 <read_from_keypad+0x2fc>)
 8001352:	f001 f91d 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135c:	4884      	ldr	r0, [pc, #528]	; (8001570 <read_from_keypad+0x2fc>)
 800135e:	f001 f917 	bl	8002590 <HAL_GPIO_WritePin>
	if (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)))   // if the Col 1 is low
 8001362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001366:	4882      	ldr	r0, [pc, #520]	; (8001570 <read_from_keypad+0x2fc>)
 8001368:	f001 f8fa 	bl	8002560 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10a      	bne.n	8001388 <read_from_keypad+0x114>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)));   // wait till the button is pressed
 8001372:	bf00      	nop
 8001374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001378:	487d      	ldr	r0, [pc, #500]	; (8001570 <read_from_keypad+0x2fc>)
 800137a:	f001 f8f1 	bl	8002560 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f7      	beq.n	8001374 <read_from_keypad+0x100>
		character_defined = '4';
 8001384:	2334      	movs	r3, #52	; 0x34
 8001386:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)))   // if the Col 2 is low
 8001388:	2102      	movs	r1, #2
 800138a:	4879      	ldr	r0, [pc, #484]	; (8001570 <read_from_keypad+0x2fc>)
 800138c:	f001 f8e8 	bl	8002560 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <read_from_keypad+0x136>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)));   // wait till the button is pressed
 8001396:	bf00      	nop
 8001398:	2102      	movs	r1, #2
 800139a:	4875      	ldr	r0, [pc, #468]	; (8001570 <read_from_keypad+0x2fc>)
 800139c:	f001 f8e0 	bl	8002560 <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f8      	beq.n	8001398 <read_from_keypad+0x124>
		character_defined = '5';
 80013a6:	2335      	movs	r3, #53	; 0x35
 80013a8:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)))   // if the Col 3 is low
 80013aa:	2101      	movs	r1, #1
 80013ac:	4870      	ldr	r0, [pc, #448]	; (8001570 <read_from_keypad+0x2fc>)
 80013ae:	f001 f8d7 	bl	8002560 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <read_from_keypad+0x158>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)));   // wait till the button is pressed
 80013b8:	bf00      	nop
 80013ba:	2101      	movs	r1, #1
 80013bc:	486c      	ldr	r0, [pc, #432]	; (8001570 <read_from_keypad+0x2fc>)
 80013be:	f001 f8cf 	bl	8002560 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f8      	beq.n	80013ba <read_from_keypad+0x146>
		character_defined = '6';
 80013c8:	2336      	movs	r3, #54	; 0x36
 80013ca:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)))   // if the Col 4 is low
 80013cc:	2120      	movs	r1, #32
 80013ce:	4867      	ldr	r0, [pc, #412]	; (800156c <read_from_keypad+0x2f8>)
 80013d0:	f001 f8c6 	bl	8002560 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <read_from_keypad+0x17a>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)));   // wait till the button is pressed
 80013da:	bf00      	nop
 80013dc:	2120      	movs	r1, #32
 80013de:	4863      	ldr	r0, [pc, #396]	; (800156c <read_from_keypad+0x2f8>)
 80013e0:	f001 f8be 	bl	8002560 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f8      	beq.n	80013dc <read_from_keypad+0x168>
		character_defined = 'B';
 80013ea:	2342      	movs	r3, #66	; 0x42
 80013ec:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin (ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80013ee:	2201      	movs	r2, #1
 80013f0:	2140      	movs	r1, #64	; 0x40
 80013f2:	485e      	ldr	r0, [pc, #376]	; (800156c <read_from_keypad+0x2f8>)
 80013f4:	f001 f8cc 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	485c      	ldr	r0, [pc, #368]	; (8001570 <read_from_keypad+0x2fc>)
 8001400:	f001 f8c6 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140a:	4859      	ldr	r0, [pc, #356]	; (8001570 <read_from_keypad+0x2fc>)
 800140c:	f001 f8c0 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001416:	4856      	ldr	r0, [pc, #344]	; (8001570 <read_from_keypad+0x2fc>)
 8001418:	f001 f8ba 	bl	8002590 <HAL_GPIO_WritePin>
	if (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)))   // if the Col 1 is low
 800141c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001420:	4853      	ldr	r0, [pc, #332]	; (8001570 <read_from_keypad+0x2fc>)
 8001422:	f001 f89d 	bl	8002560 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10a      	bne.n	8001442 <read_from_keypad+0x1ce>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)));   // wait till the button is pressed
 800142c:	bf00      	nop
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	484f      	ldr	r0, [pc, #316]	; (8001570 <read_from_keypad+0x2fc>)
 8001434:	f001 f894 	bl	8002560 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f7      	beq.n	800142e <read_from_keypad+0x1ba>
		character_defined = '7';
 800143e:	2337      	movs	r3, #55	; 0x37
 8001440:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)))   // if the Col 2 is low
 8001442:	2102      	movs	r1, #2
 8001444:	484a      	ldr	r0, [pc, #296]	; (8001570 <read_from_keypad+0x2fc>)
 8001446:	f001 f88b 	bl	8002560 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <read_from_keypad+0x1f0>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)));   // wait till the button is pressed
 8001450:	bf00      	nop
 8001452:	2102      	movs	r1, #2
 8001454:	4846      	ldr	r0, [pc, #280]	; (8001570 <read_from_keypad+0x2fc>)
 8001456:	f001 f883 	bl	8002560 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f8      	beq.n	8001452 <read_from_keypad+0x1de>
		character_defined = '8';
 8001460:	2338      	movs	r3, #56	; 0x38
 8001462:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)))   // if the Col 3 is low
 8001464:	2101      	movs	r1, #1
 8001466:	4842      	ldr	r0, [pc, #264]	; (8001570 <read_from_keypad+0x2fc>)
 8001468:	f001 f87a 	bl	8002560 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <read_from_keypad+0x212>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)));   // wait till the button is pressed
 8001472:	bf00      	nop
 8001474:	2101      	movs	r1, #1
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <read_from_keypad+0x2fc>)
 8001478:	f001 f872 	bl	8002560 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f8      	beq.n	8001474 <read_from_keypad+0x200>
		character_defined = '9';
 8001482:	2339      	movs	r3, #57	; 0x39
 8001484:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)))   // if the Col 4 is low
 8001486:	2120      	movs	r1, #32
 8001488:	4838      	ldr	r0, [pc, #224]	; (800156c <read_from_keypad+0x2f8>)
 800148a:	f001 f869 	bl	8002560 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <read_from_keypad+0x234>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)));   // wait till the button is pressed
 8001494:	bf00      	nop
 8001496:	2120      	movs	r1, #32
 8001498:	4834      	ldr	r0, [pc, #208]	; (800156c <read_from_keypad+0x2f8>)
 800149a:	f001 f861 	bl	8002560 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f8      	beq.n	8001496 <read_from_keypad+0x222>
		character_defined = 'C';
 80014a4:	2343      	movs	r3, #67	; 0x43
 80014a6:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin (ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80014a8:	2201      	movs	r2, #1
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	482f      	ldr	r0, [pc, #188]	; (800156c <read_from_keypad+0x2f8>)
 80014ae:	f001 f86f 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	482d      	ldr	r0, [pc, #180]	; (8001570 <read_from_keypad+0x2fc>)
 80014ba:	f001 f869 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c4:	482a      	ldr	r0, [pc, #168]	; (8001570 <read_from_keypad+0x2fc>)
 80014c6:	f001 f863 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d0:	4827      	ldr	r0, [pc, #156]	; (8001570 <read_from_keypad+0x2fc>)
 80014d2:	f001 f85d 	bl	8002590 <HAL_GPIO_WritePin>
	if (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)))   // if the Col 1 is low
 80014d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <read_from_keypad+0x2fc>)
 80014dc:	f001 f840 	bl	8002560 <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10a      	bne.n	80014fc <read_from_keypad+0x288>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN1_GPIO_Port, COLUMN1_Pin)));   // wait till the button is pressed
 80014e6:	bf00      	nop
 80014e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ec:	4820      	ldr	r0, [pc, #128]	; (8001570 <read_from_keypad+0x2fc>)
 80014ee:	f001 f837 	bl	8002560 <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f7      	beq.n	80014e8 <read_from_keypad+0x274>
		character_defined = '*';
 80014f8:	232a      	movs	r3, #42	; 0x2a
 80014fa:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)))   // if the Col 2 is low
 80014fc:	2102      	movs	r1, #2
 80014fe:	481c      	ldr	r0, [pc, #112]	; (8001570 <read_from_keypad+0x2fc>)
 8001500:	f001 f82e 	bl	8002560 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <read_from_keypad+0x2aa>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN2_GPIO_Port, COLUMN2_Pin)));   // wait till the button is pressed
 800150a:	bf00      	nop
 800150c:	2102      	movs	r1, #2
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <read_from_keypad+0x2fc>)
 8001510:	f001 f826 	bl	8002560 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f8      	beq.n	800150c <read_from_keypad+0x298>
		character_defined = '0';
 800151a:	2330      	movs	r3, #48	; 0x30
 800151c:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)))   // if the Col 3 is low
 800151e:	2101      	movs	r1, #1
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <read_from_keypad+0x2fc>)
 8001522:	f001 f81d 	bl	8002560 <HAL_GPIO_ReadPin>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <read_from_keypad+0x2cc>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN3_GPIO_Port, COLUMN3_Pin)));   // wait till the button is pressed
 800152c:	bf00      	nop
 800152e:	2101      	movs	r1, #1
 8001530:	480f      	ldr	r0, [pc, #60]	; (8001570 <read_from_keypad+0x2fc>)
 8001532:	f001 f815 	bl	8002560 <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f8      	beq.n	800152e <read_from_keypad+0x2ba>
		character_defined = '#';
 800153c:	2323      	movs	r3, #35	; 0x23
 800153e:	71fb      	strb	r3, [r7, #7]
	}

	if (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)))   // if the Col 4 is low
 8001540:	2120      	movs	r1, #32
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <read_from_keypad+0x2f8>)
 8001544:	f001 f80c 	bl	8002560 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <read_from_keypad+0x2ee>
	{
		while (!(HAL_GPIO_ReadPin (COLUMN4_GPIO_Port, COLUMN4_Pin)));   // wait till the button is pressed
 800154e:	bf00      	nop
 8001550:	2120      	movs	r1, #32
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <read_from_keypad+0x2f8>)
 8001554:	f001 f804 	bl	8002560 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f8      	beq.n	8001550 <read_from_keypad+0x2dc>
		character_defined = 'D';
 800155e:	2344      	movs	r3, #68	; 0x44
 8001560:	71fb      	strb	r3, [r7, #7]
	}
	return character_defined;
 8001562:	79fb      	ldrb	r3, [r7, #7]

}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40020800 	.word	0x40020800
 8001570:	40020400 	.word	0x40020400

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b0ba      	sub	sp, #232	; 0xe8
 8001578:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
 	char keypad_character =0;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 	char component_code[8] ="";
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158c:	f000 fce8 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001590:	f000 f906 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001594:	f000 f9f8 	bl	8001988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001598:	f000 f9cc 	bl	8001934 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800159c:	f000 f96a 	bl	8001874 <MX_SPI2_Init>
  MX_FATFS_Init();
 80015a0:	f002 fc9c 	bl	8003edc <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80015a4:	f000 f99c 	bl	80018e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80015a8:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <main+0x1f4>)
 80015aa:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 80015b4:	4a6d      	ldr	r2, [pc, #436]	; (800176c <main+0x1f8>)
 80015b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015be:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80015c2:	4638      	mov	r0, r7
 80015c4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80015c8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80015cc:	2300      	movs	r3, #0
 80015ce:	9303      	str	r3, [sp, #12]
 80015d0:	2310      	movs	r3, #16
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	4b66      	ldr	r3, [pc, #408]	; (8001770 <main+0x1fc>)
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2320      	movs	r3, #32
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4b64      	ldr	r3, [pc, #400]	; (8001770 <main+0x1fc>)
 80015de:	f7ff fcaf 	bl	8000f40 <Lcd_create>
 80015e2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80015e6:	463d      	mov	r5, r7
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015f0:	e884 0003 	stmia.w	r4, {r0, r1}

    keypad_character = read_from_keypad();
 80015f4:	f7ff fe3e 	bl	8001274 <read_from_keypad>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    component_code[strlen(component_code)+1] = keypad_character;
 80015fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fdf6 	bl	80001f4 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	3301      	adds	r3, #1
 800160c:	33d8      	adds	r3, #216	; 0xd8
 800160e:	443b      	add	r3, r7
 8001610:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8001614:	f803 2c10 	strb.w	r2, [r3, #-16]
    Lcd_string(&lcd, keypad_character);
 8001618:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800161c:	461a      	mov	r2, r3
 800161e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fcdf 	bl	8000fe8 <Lcd_string>
    HAL_Delay(500);
 800162a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162e:	f000 fd09 	bl	8002044 <HAL_Delay>

//the end of code to read from a .csv file

    FRESULT result = f_mount(&USERFatFS, (TCHAR const*)USERPath, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	494f      	ldr	r1, [pc, #316]	; (8001774 <main+0x200>)
 8001636:	4850      	ldr	r0, [pc, #320]	; (8001778 <main+0x204>)
 8001638:	f004 fdee 	bl	8006218 <f_mount>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6

        if (result == FR_OK) {
 8001642:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <main+0xde>
          transmit_uart("Mounted successfully\n");
 800164a:	484c      	ldr	r0, [pc, #304]	; (800177c <main+0x208>)
 800164c:	f7ff fdb8 	bl	80011c0 <transmit_uart>
 8001650:	e002      	b.n	8001658 <main+0xe4>
        } else {
          transmit_uart("Mounting error\n");
 8001652:	484b      	ldr	r0, [pc, #300]	; (8001780 <main+0x20c>)
 8001654:	f7ff fdb4 	bl	80011c0 <transmit_uart>
        }

        result = f_open(&USERFile, "data.csv", FA_READ);
 8001658:	2201      	movs	r2, #1
 800165a:	494a      	ldr	r1, [pc, #296]	; (8001784 <main+0x210>)
 800165c:	484a      	ldr	r0, [pc, #296]	; (8001788 <main+0x214>)
 800165e:	f004 fe21 	bl	80062a4 <f_open>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6

            if (result == FR_OK)
 8001668:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800166c:	2b00      	cmp	r3, #0
 800166e:	d173      	bne.n	8001758 <main+0x1e4>
                  while (1)
                  {
                    // ... (previous code)

                    char *token;
                    while (f_gets(buffer, sizeof(buffer), &USERFile)) // Read lines from the CSV file
 8001670:	e067      	b.n	8001742 <main+0x1ce>
                    {
                      token = strtok(buffer, ";"); // Assuming ";" is the delimiter
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	4945      	ldr	r1, [pc, #276]	; (800178c <main+0x218>)
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fc79 	bl	8006f70 <strtok>
 800167e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
                      if (token != NULL)
 8001682:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d05b      	beq.n	8001742 <main+0x1ce>
                      {
                       // Remove escape from the token
                    	  token = removeNonAlphabetChars(token);
 800168a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800168e:	f7ff fdad 	bl	80011ec <removeNonAlphabetChars>
 8001692:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
                      // Remove double quotes from the token (if present)
                        if (token[0] == '"')
 8001696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b22      	cmp	r3, #34	; 0x22
 800169e:	d118      	bne.n	80016d2 <main+0x15e>
                    	  {
                    	   memmove(token, token + 1, strlen(token));
 80016a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016a4:	1c5c      	adds	r4, r3, #1
 80016a6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80016aa:	f7fe fda3 	bl	80001f4 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80016b8:	f005 fc37 	bl	8006f2a <memmove>
                    	   token[strlen(token) - 1] = '\0';
 80016bc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80016c0:	f7fe fd98 	bl	80001f4 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80016cc:	4413      	add	r3, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
                    	  }
                        if (strcmp(token, component_code) == 0) // Compare with "kamel"
 80016d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d6:	4619      	mov	r1, r3
 80016d8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80016dc:	f7fe fd80 	bl	80001e0 <strcmp>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d126      	bne.n	8001734 <main+0x1c0>
                        {
                          token = strtok(NULL, ";"); // Get the value from the second column
 80016e6:	4929      	ldr	r1, [pc, #164]	; (800178c <main+0x218>)
 80016e8:	2000      	movs	r0, #0
 80016ea:	f005 fc41 	bl	8006f70 <strtok>
 80016ee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
                          token[strlen(token) - 1] = '\0';
 80016f2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80016f6:	f7fe fd7d 	bl	80001f4 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	3b01      	subs	r3, #1
 80016fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
                          Lcd_cursor(&lcd, 0,1);
 8001708:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800170c:	2201      	movs	r2, #1
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fc89 	bl	8001028 <Lcd_cursor>
                          Lcd_string(&lcd, token);
 8001716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800171a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc62 	bl	8000fe8 <Lcd_string>
                          transmit_uart(token);
 8001724:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001728:	f7ff fd4a 	bl	80011c0 <transmit_uart>
                          transmit_uart(":string founded successfully \n ");
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <main+0x21c>)
 800172e:	f7ff fd47 	bl	80011c0 <transmit_uart>
 8001732:	e006      	b.n	8001742 <main+0x1ce>
                        }
                        else
                        {
                        	transmit_uart(token);
 8001734:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001738:	f7ff fd42 	bl	80011c0 <transmit_uart>
                        	transmit_uart(":string not founded \n ");
 800173c:	4815      	ldr	r0, [pc, #84]	; (8001794 <main+0x220>)
 800173e:	f7ff fd3f 	bl	80011c0 <transmit_uart>
                    while (f_gets(buffer, sizeof(buffer), &USERFile)) // Read lines from the CSV file
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <main+0x214>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	4618      	mov	r0, r3
 800174c:	f005 f8d5 	bl	80068fa <f_gets>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d18d      	bne.n	8001672 <main+0xfe>
                  {
 8001756:	e78b      	b.n	8001670 <main+0xfc>
                    }
                  }
                    f_close(&USERFile);            }
            else
            {
                transmit_uart("Error opening CSV file. Error code: ");
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <main+0x224>)
 800175a:	f7ff fd31 	bl	80011c0 <transmit_uart>
                transmit_uart("\n");
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <main+0x228>)
 8001760:	f7ff fd2e 	bl	80011c0 <transmit_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001764:	e7fe      	b.n	8001764 <main+0x1f0>
 8001766:	bf00      	nop
 8001768:	08007ca8 	.word	0x08007ca8
 800176c:	08007cb8 	.word	0x08007cb8
 8001770:	40020400 	.word	0x40020400
 8001774:	20000190 	.word	0x20000190
 8001778:	20000194 	.word	0x20000194
 800177c:	08007c0c 	.word	0x08007c0c
 8001780:	08007c24 	.word	0x08007c24
 8001784:	08007c34 	.word	0x08007c34
 8001788:	200011cc 	.word	0x200011cc
 800178c:	08007c40 	.word	0x08007c40
 8001790:	08007c44 	.word	0x08007c44
 8001794:	08007c64 	.word	0x08007c64
 8001798:	08007c7c 	.word	0x08007c7c
 800179c:	08007ca4 	.word	0x08007ca4

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	; 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2230      	movs	r2, #48	; 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f005 fbd5 	bl	8006f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <SystemClock_Config+0xcc>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <SystemClock_Config+0xcc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <SystemClock_Config+0xd0>)
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001808:	2310      	movs	r3, #16
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001814:	2308      	movs	r3, #8
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001818:	2354      	movs	r3, #84	; 0x54
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001820:	2307      	movs	r3, #7
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fecb 	bl	80025c4 <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001834:	f000 f95a 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2102      	movs	r1, #2
 8001854:	4618      	mov	r0, r3
 8001856:	f001 f92d 	bl	8002ab4 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001860:	f000 f944 	bl	8001aec <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3750      	adds	r7, #80	; 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_SPI2_Init+0x64>)
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <MX_SPI2_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_SPI2_Init+0x64>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_SPI2_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_SPI2_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_SPI2_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_SPI2_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018c6:	f001 fb15 	bl	8002ef4 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018d0:	f000 f90c 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000a4 	.word	0x200000a4
 80018dc:	40003800 	.word	0x40003800

080018e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_USART1_UART_Init+0x50>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001918:	f001 ff1e 	bl	8003758 <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001922:	f000 f8e3 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000fc 	.word	0x200000fc
 8001930:	40011000 	.word	0x40011000

08001934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART2_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800196c:	f001 fef4 	bl	8003758 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f000 f8b9 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000140 	.word	0x20000140
 8001984:	40004400 	.word	0x40004400

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <MX_GPIO_Init+0x154>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <MX_GPIO_Init+0x154>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <MX_GPIO_Init+0x154>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <MX_GPIO_Init+0x154>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a46      	ldr	r2, [pc, #280]	; (8001adc <MX_GPIO_Init+0x154>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <MX_GPIO_Init+0x154>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b40      	ldr	r3, [pc, #256]	; (8001adc <MX_GPIO_Init+0x154>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a3f      	ldr	r2, [pc, #252]	; (8001adc <MX_GPIO_Init+0x154>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <MX_GPIO_Init+0x154>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <MX_GPIO_Init+0x154>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a38      	ldr	r2, [pc, #224]	; (8001adc <MX_GPIO_Init+0x154>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <MX_GPIO_Init+0x154>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	21f0      	movs	r1, #240	; 0xf0
 8001a12:	4833      	ldr	r0, [pc, #204]	; (8001ae0 <MX_GPIO_Init+0x158>)
 8001a14:	f000 fdbc 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COLUMN4_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	21a0      	movs	r1, #160	; 0xa0
 8001a1c:	4831      	ldr	r0, [pc, #196]	; (8001ae4 <MX_GPIO_Init+0x15c>)
 8001a1e:	f000 fdb7 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN3_Pin|COLUMN2_Pin|COLUMN1_Pin|GPIO_PIN_4
 8001a22:	2200      	movs	r2, #0
 8001a24:	f241 0173 	movw	r1, #4211	; 0x1073
 8001a28:	482f      	ldr	r0, [pc, #188]	; (8001ae8 <MX_GPIO_Init+0x160>)
 8001a2a:	f000 fdb1 	bl	8002590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4827      	ldr	r0, [pc, #156]	; (8001ae4 <MX_GPIO_Init+0x15c>)
 8001a46:	f000 fc07 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001a4a:	23f0      	movs	r3, #240	; 0xf0
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481f      	ldr	r0, [pc, #124]	; (8001ae0 <MX_GPIO_Init+0x158>)
 8001a62:	f000 fbf9 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN4_Pin PC7 */
  GPIO_InitStruct.Pin = COLUMN4_Pin|GPIO_PIN_7;
 8001a66:	23a0      	movs	r3, #160	; 0xa0
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <MX_GPIO_Init+0x15c>)
 8001a7e:	f000 fbeb 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN3_Pin COLUMN2_Pin COLUMN1_Pin PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = COLUMN3_Pin|COLUMN2_Pin|COLUMN1_Pin|GPIO_PIN_4
 8001a82:	f241 0373 	movw	r3, #4211	; 0x1073
 8001a86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <MX_GPIO_Init+0x160>)
 8001a9c:	f000 fbdc 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW4_Pin ROW3_Pin ROW2_Pin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin;
 8001aa0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_GPIO_Init+0x160>)
 8001ab6:	f000 fbcf 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW1_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 8001aba:	2340      	movs	r3, #64	; 0x40
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_GPIO_Init+0x15c>)
 8001ace:	f000 fbc3 	bl	8002258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020400 	.word	0x40020400

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>
	...

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f000 fb5a 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_SPI_MspInit+0xc0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d14a      	bne.n	8001c00 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <HAL_SPI_MspInit+0xc8>)
 8001bda:	f000 fb3d 	bl	8002258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <HAL_SPI_MspInit+0xcc>)
 8001bfc:	f000 fb2c 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40003800 	.word	0x40003800
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_UART_MspInit+0xe8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12d      	bne.n	8001c96 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a30      	ldr	r2, [pc, #192]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c84:	2307      	movs	r3, #7
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	481e      	ldr	r0, [pc, #120]	; (8001d08 <HAL_UART_MspInit+0xf0>)
 8001c90:	f000 fae2 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c94:	e030      	b.n	8001cf8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_UART_MspInit+0xf4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6313      	str	r3, [r2, #48]	; 0x30
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_UART_MspInit+0xec>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cd8:	230c      	movs	r3, #12
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_UART_MspInit+0xf0>)
 8001cf4:	f000 fab0 	bl	8002258 <HAL_GPIO_Init>
}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	; 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40004400 	.word	0x40004400

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <SysTick_Handler+0x34>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <SysTick_Handler+0x18>
	 Timer1--;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <SysTick_Handler+0x34>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <SysTick_Handler+0x34>)
 8001d6e:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <SysTick_Handler+0x38>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <SysTick_Handler+0x2c>
	 Timer2--;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Handler+0x38>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <SysTick_Handler+0x38>)
 8001d82:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 f93e 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000009c 	.word	0x2000009c
 8001d90:	2000009e 	.word	0x2000009e

08001d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return 1;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_kill>:

int _kill(int pid, int sig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dae:	f005 f991 	bl	80070d4 <__errno>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2216      	movs	r2, #22
 8001db6:	601a      	str	r2, [r3, #0]
  return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_exit>:

void _exit (int status)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ffe7 	bl	8001da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd6:	e7fe      	b.n	8001dd6 <_exit+0x12>

08001dd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00a      	b.n	8001e00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dea:	f3af 8000 	nop.w
 8001dee:	4601      	mov	r1, r0
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	60ba      	str	r2, [r7, #8]
 8001df6:	b2ca      	uxtb	r2, r1
 8001df8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbf0      	blt.n	8001dea <_read+0x12>
  }

  return len;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_isatty>:

int _isatty(int file)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f005 f912 	bl	80070d4 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20018000 	.word	0x20018000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	20000184 	.word	0x20000184
 8001ee4:	20002580 	.word	0x20002580

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f28:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f36:	f7ff ffd7 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f005 f8d1 	bl	80070e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff fb19 	bl	8001574 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f50:	08008358 	.word	0x08008358
  ldr r2, =_sbss
 8001f54:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f58:	2000257c 	.word	0x2000257c

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f931 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fdb0 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f93b 	bl	800223e <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 f911 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000004 	.word	0x20000004
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000000c 	.word	0x2000000c
 8002028:	20000188 	.word	0x20000188

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000188 	.word	0x20000188

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffee 	bl	800202c <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffde 	bl	800202c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000000c 	.word	0x2000000c

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff47 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff5c 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff8e 	bl	8002144 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5d 	bl	80020f0 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffb0 	bl	80021ac <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e159      	b.n	8002528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8148 	bne.w	8002522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a2 	beq.w	8002522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a49      	ldr	r2, [pc, #292]	; (8002548 <HAL_GPIO_Init+0x2f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x202>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a48      	ldr	r2, [pc, #288]	; (800254c <HAL_GPIO_Init+0x2f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x1fe>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_GPIO_Init+0x2f8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x1fa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a46      	ldr	r2, [pc, #280]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x1f6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_GPIO_Init+0x300>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x1f2>
 8002446:	2304      	movs	r3, #4
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244a:	2307      	movs	r3, #7
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x204>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_GPIO_Init+0x304>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a2f      	ldr	r2, [pc, #188]	; (800255c <HAL_GPIO_Init+0x304>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_GPIO_Init+0x304>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <HAL_GPIO_Init+0x304>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_GPIO_Init+0x304>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a1a      	ldr	r2, [pc, #104]	; (800255c <HAL_GPIO_Init+0x304>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_GPIO_Init+0x304>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_GPIO_Init+0x304>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f aea2 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e267      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e242      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a68      	ldr	r2, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fcd6 	bl	800202c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff fcd2 	bl	800202c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e207      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5b      	ldr	r3, [pc, #364]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fcc2 	bl	800202c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff fcbe 	bl	800202c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1f3      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b44      	ldr	r3, [pc, #272]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c7      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4937      	ldr	r1, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_OscConfig+0x244>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff fc77 	bl	800202c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff fc73 	bl	800202c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a8      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4925      	ldr	r1, [pc, #148]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_OscConfig+0x244>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fc56 	bl	800202c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7ff fc52 	bl	800202c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e187      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d036      	beq.n	800281c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x248>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff fc36 	bl	800202c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7ff fc32 	bl	800202c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e167      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e01b      	b.n	800281c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_OscConfig+0x248>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff fc1f 	bl	800202c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e00e      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7ff fc1b 	bl	800202c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d907      	bls.n	8002810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e150      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000
 800280c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ea      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8097 	beq.w	8002958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a7c      	ldr	r2, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7ff fbdb 	bl	800202c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7ff fbd7 	bl	800202c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e10c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x2ea>
 80028a0:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x30c>
 80028b6:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a5e      	ldr	r2, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028d0:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7ff fb9c 	bl	800202c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7ff fb98 	bl	800202c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0cb      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCC_OscConfig+0x334>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7ff fb86 	bl	800202c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7ff fb82 	bl	800202c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0b5      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ee      	bne.n	8002924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a38      	ldr	r2, [pc, #224]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80a1 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002962:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	d05c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d141      	bne.n	80029fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fb56 	bl	800202c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff fb52 	bl	800202c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e087      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	3b01      	subs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	491b      	ldr	r1, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7ff fb2b 	bl	800202c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7ff fb27 	bl	800202c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e05c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x416>
 80029f8:	e054      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7ff fb14 	bl	800202c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7ff fb10 	bl	800202c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e045      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x444>
 8002a26:	e03d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e038      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d028      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d121      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cc      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d90c      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d044      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e067      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4934      	ldr	r1, [pc, #208]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff fa42 	bl	800202c <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff fa3e 	bl	800202c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d20c      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f9a2 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08007d0c 	.word	0x08007d0c
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b094      	sub	sp, #80	; 0x50
 8002c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c90:	2300      	movs	r3, #0
 8002c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	f200 80e1 	bhi.w	8002e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb2:	e0db      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cb8:	e0db      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cbe:	e0d8      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	2200      	movs	r2, #0
 8002cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cea:	2300      	movs	r3, #0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
 8002cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	1a51      	subs	r1, r2, r1
 8002d0e:	6139      	str	r1, [r7, #16]
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb63 0301 	sbc.w	r3, r3, r1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d24:	4659      	mov	r1, fp
 8002d26:	018b      	lsls	r3, r1, #6
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2e:	4651      	mov	r1, sl
 8002d30:	018a      	lsls	r2, r1, #6
 8002d32:	4651      	mov	r1, sl
 8002d34:	ebb2 0801 	subs.w	r8, r2, r1
 8002d38:	4659      	mov	r1, fp
 8002d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d52:	4690      	mov	r8, r2
 8002d54:	4699      	mov	r9, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb18 0303 	adds.w	r3, r8, r3
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	eb49 0303 	adc.w	r3, r9, r3
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d72:	4629      	mov	r1, r5
 8002d74:	024b      	lsls	r3, r1, #9
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	024a      	lsls	r2, r1, #9
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d90:	f7fd fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d9c:	e058      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	4611      	mov	r1, r2
 8002daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002db8:	4642      	mov	r2, r8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0159      	lsls	r1, r3, #5
 8002dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dca:	0150      	lsls	r0, r2, #5
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002df0:	ebb2 040a 	subs.w	r4, r2, sl
 8002df4:	eb63 050b 	sbc.w	r5, r3, fp
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb45 0303 	adc.w	r3, r5, r3
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e26:	4629      	mov	r1, r5
 8002e28:	028b      	lsls	r3, r1, #10
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e30:	4621      	mov	r1, r4
 8002e32:	028a      	lsls	r2, r1, #10
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	61fa      	str	r2, [r7, #28]
 8002e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e44:	f7fd fa34 	bl	80002b0 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3750      	adds	r7, #80	; 0x50
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0a9b      	lsrs	r3, r3, #10
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08007d1c 	.word	0x08007d1c

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffdc 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0b5b      	lsrs	r3, r3, #13
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08007d1c 	.word	0x08007d1c

08002ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07b      	b.n	8002ffe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f16:	d009      	beq.n	8002f2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
 8002f1e:	e005      	b.n	8002f2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fdfe 	bl	8001b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	ea42 0103 	orr.w	r1, r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	f003 0104 	and.w	r1, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f003 0210 	and.w	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b088      	sub	sp, #32
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_SPI_Transmit+0x22>
 8003024:	2302      	movs	r3, #2
 8003026:	e126      	b.n	8003276 <HAL_SPI_Transmit+0x270>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003030:	f7fe fffc 	bl	800202c <HAL_GetTick>
 8003034:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d002      	beq.n	800304c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800304a:	e10b      	b.n	8003264 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0x52>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800305c:	e102      	b.n	8003264 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a4:	d10f      	bne.n	80030c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d007      	beq.n	80030e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ec:	d14b      	bne.n	8003186 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_SPI_Transmit+0xf6>
 80030f6:	8afb      	ldrh	r3, [r7, #22]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d13e      	bne.n	800317a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003120:	e02b      	b.n	800317a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d112      	bne.n	8003156 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	86da      	strh	r2, [r3, #54]	; 0x36
 8003154:	e011      	b.n	800317a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003156:	f7fe ff69 	bl	800202c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d803      	bhi.n	800316e <HAL_SPI_Transmit+0x168>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d102      	bne.n	8003174 <HAL_SPI_Transmit+0x16e>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003178:	e074      	b.n	8003264 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ce      	bne.n	8003122 <HAL_SPI_Transmit+0x11c>
 8003184:	e04c      	b.n	8003220 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Transmit+0x18e>
 800318e:	8afb      	ldrh	r3, [r7, #22]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d140      	bne.n	8003216 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031ba:	e02c      	b.n	8003216 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d113      	bne.n	80031f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80031f0:	e011      	b.n	8003216 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031f2:	f7fe ff1b 	bl	800202c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d803      	bhi.n	800320a <HAL_SPI_Transmit+0x204>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d102      	bne.n	8003210 <HAL_SPI_Transmit+0x20a>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003214:	e026      	b.n	8003264 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1cd      	bne.n	80031bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa55 	bl	80036d4 <SPI_EndRxTxTransaction>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e000      	b.n	8003264 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003274:	7ffb      	ldrb	r3, [r7, #31]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08c      	sub	sp, #48	; 0x30
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800328c:	2301      	movs	r3, #1
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x26>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e18a      	b.n	80035ba <HAL_SPI_TransmitReceive+0x33c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ac:	f7fe febe 	bl	800202c <HAL_GetTick>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00f      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x70>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d4:	d107      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x68>
 80032de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032ec:	e15b      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x82>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x82>
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003306:	e14e      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b04      	cmp	r3, #4
 8003312:	d003      	beq.n	800331c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d007      	beq.n	8003370 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	d178      	bne.n	800346c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x10a>
 8003382:	8b7b      	ldrh	r3, [r7, #26]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d166      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ac:	e053      	b.n	8003456 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x176>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x176>
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d113      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d119      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x1b8>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d014      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	b292      	uxth	r2, r2
 8003418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003432:	2301      	movs	r3, #1
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003436:	f7fe fdf9 	bl	800202c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003442:	429a      	cmp	r2, r3
 8003444:	d807      	bhi.n	8003456 <HAL_SPI_TransmitReceive+0x1d8>
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d003      	beq.n	8003456 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003454:	e0a7      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1a6      	bne.n	80033ae <HAL_SPI_TransmitReceive+0x130>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1a1      	bne.n	80033ae <HAL_SPI_TransmitReceive+0x130>
 800346a:	e07c      	b.n	8003566 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_TransmitReceive+0x1fc>
 8003474:	8b7b      	ldrh	r3, [r7, #26]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d16b      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a0:	e057      	b.n	8003552 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d11c      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x26c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x26c>
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d114      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d119      	bne.n	800352c <HAL_SPI_TransmitReceive+0x2ae>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d014      	beq.n	800352c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003528:	2301      	movs	r3, #1
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800352c:	f7fe fd7e 	bl	800202c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003538:	429a      	cmp	r2, r3
 800353a:	d803      	bhi.n	8003544 <HAL_SPI_TransmitReceive+0x2c6>
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d102      	bne.n	800354a <HAL_SPI_TransmitReceive+0x2cc>
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003550:	e029      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1a2      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x224>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d19d      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f8b2 	bl	80036d4 <SPI_EndRxTxTransaction>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003582:	e010      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	e000      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3730      	adds	r7, #48	; 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035d4:	f7fe fd2a 	bl	800202c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035e4:	f7fe fd22 	bl	800202c <HAL_GetTick>
 80035e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	015b      	lsls	r3, r3, #5
 80035f0:	0d1b      	lsrs	r3, r3, #20
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035fa:	e054      	b.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d050      	beq.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003604:	f7fe fd12 	bl	800202c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	429a      	cmp	r2, r3
 8003612:	d902      	bls.n	800361a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d13d      	bne.n	8003696 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003632:	d111      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	d004      	beq.n	8003648 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d107      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003660:	d10f      	bne.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e017      	b.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d19b      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000004 	.word	0x20000004

080036d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <SPI_EndRxTxTransaction+0x7c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <SPI_EndRxTxTransaction+0x80>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0d5b      	lsrs	r3, r3, #21
 80036ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fe:	d112      	bne.n	8003726 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2200      	movs	r2, #0
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff ff5a 	bl	80035c4 <SPI_WaitFlagStateUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3b01      	subs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d0f2      	beq.n	8003726 <SPI_EndRxTxTransaction+0x52>
 8003740:	e000      	b.n	8003744 <SPI_EndRxTxTransaction+0x70>
        break;
 8003742:	bf00      	nop
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000004 	.word	0x20000004
 8003754:	165e9f81 	.word	0x165e9f81

08003758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e03f      	b.n	80037ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fa4a 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f929 	bl	80039f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08a      	sub	sp, #40	; 0x28
 80037f6:	af02      	add	r7, sp, #8
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	d17c      	bne.n	800390c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_UART_Transmit+0x2c>
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e075      	b.n	800390e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_UART_Transmit+0x3e>
 800382c:	2302      	movs	r3, #2
 800382e:	e06e      	b.n	800390e <HAL_UART_Transmit+0x11c>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2221      	movs	r2, #33	; 0x21
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003846:	f7fe fbf1 	bl	800202c <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d108      	bne.n	8003874 <HAL_UART_Transmit+0x82>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003884:	e02a      	b.n	80038dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f840 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e036      	b.n	800390e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3302      	adds	r3, #2
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e007      	b.n	80038ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1cf      	bne.n	8003886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f810 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e006      	b.n	800390e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b090      	sub	sp, #64	; 0x40
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	e050      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d04c      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
 8003936:	f7fe fb79 	bl	800202c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003942:	429a      	cmp	r2, r3
 8003944:	d241      	bcs.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003966:	637a      	str	r2, [r7, #52]	; 0x34
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800396c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e5      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	613b      	str	r3, [r7, #16]
   return(result);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	63bb      	str	r3, [r7, #56]	; 0x38
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399a:	623a      	str	r2, [r7, #32]
 800399c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e00f      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d09f      	beq.n	8003928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3740      	adds	r7, #64	; 0x40
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f8:	b0c0      	sub	sp, #256	; 0x100
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	68d9      	ldr	r1, [r3, #12]
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	ea40 0301 	orr.w	r3, r0, r1
 8003a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a4c:	f021 010c 	bic.w	r1, r1, #12
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	6999      	ldr	r1, [r3, #24]
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	ea40 0301 	orr.w	r3, r0, r1
 8003a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b8f      	ldr	r3, [pc, #572]	; (8003cc0 <UART_SetConfig+0x2cc>)
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d005      	beq.n	8003a94 <UART_SetConfig+0xa0>
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b8d      	ldr	r3, [pc, #564]	; (8003cc4 <UART_SetConfig+0x2d0>)
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d104      	bne.n	8003a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7ff fa1a 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 8003a98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a9c:	e003      	b.n	8003aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a9e:	f7ff fa01 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8003aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	f040 810c 	bne.w	8003ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003abe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	462b      	mov	r3, r5
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	eb12 0801 	adds.w	r8, r2, r1
 8003adc:	4629      	mov	r1, r5
 8003ade:	eb43 0901 	adc.w	r9, r3, r1
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af6:	4690      	mov	r8, r2
 8003af8:	4699      	mov	r9, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	eb18 0303 	adds.w	r3, r8, r3
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b04:	462b      	mov	r3, r5
 8003b06:	eb49 0303 	adc.w	r3, r9, r3
 8003b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b22:	460b      	mov	r3, r1
 8003b24:	18db      	adds	r3, r3, r3
 8003b26:	653b      	str	r3, [r7, #80]	; 0x50
 8003b28:	4613      	mov	r3, r2
 8003b2a:	eb42 0303 	adc.w	r3, r2, r3
 8003b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b38:	f7fc fbba 	bl	80002b0 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b61      	ldr	r3, [pc, #388]	; (8003cc8 <UART_SetConfig+0x2d4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b64:	415b      	adcs	r3, r3
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b72:	4649      	mov	r1, r9
 8003b74:	eb43 0b01 	adc.w	fp, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8c:	4692      	mov	sl, r2
 8003b8e:	469b      	mov	fp, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	eb1a 0303 	adds.w	r3, sl, r3
 8003b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	18db      	adds	r3, r3, r3
 8003bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bce:	f7fc fb6f 	bl	80002b0 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <UART_SetConfig+0x2d4>)
 8003bda:	fba3 2301 	umull	r2, r3, r3, r1
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2264      	movs	r2, #100	; 0x64
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	1acb      	subs	r3, r1, r3
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <UART_SetConfig+0x2d4>)
 8003bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bfc:	441c      	add	r4, r3
 8003bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6339      	str	r1, [r7, #48]	; 0x30
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c54:	464b      	mov	r3, r9
 8003c56:	460a      	mov	r2, r1
 8003c58:	eb42 0303 	adc.w	r3, r2, r3
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c74:	460b      	mov	r3, r1
 8003c76:	18db      	adds	r3, r3, r3
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	eb42 0303 	adc.w	r3, r2, r3
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c8a:	f7fc fb11 	bl	80002b0 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <UART_SetConfig+0x2d4>)
 8003c94:	fba3 1302 	umull	r1, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	2164      	movs	r1, #100	; 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	3332      	adds	r3, #50	; 0x32
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <UART_SetConfig+0x2d4>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	f003 0207 	and.w	r2, r3, #7
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4422      	add	r2, r4
 8003cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cbc:	e106      	b.n	8003ecc <UART_SetConfig+0x4d8>
 8003cbe:	bf00      	nop
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40011400 	.word	0x40011400
 8003cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cde:	4642      	mov	r2, r8
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	6239      	str	r1, [r7, #32]
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cee:	4641      	mov	r1, r8
 8003cf0:	1854      	adds	r4, r2, r1
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	eb43 0501 	adc.w	r5, r3, r1
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	00eb      	lsls	r3, r5, #3
 8003d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d06:	00e2      	lsls	r2, r4, #3
 8003d08:	4614      	mov	r4, r2
 8003d0a:	461d      	mov	r5, r3
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	18e3      	adds	r3, r4, r3
 8003d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d14:	464b      	mov	r3, r9
 8003d16:	eb45 0303 	adc.w	r3, r5, r3
 8003d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	008b      	lsls	r3, r1, #2
 8003d3e:	4621      	mov	r1, r4
 8003d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d44:	4621      	mov	r1, r4
 8003d46:	008a      	lsls	r2, r1, #2
 8003d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d4c:	f7fc fab0 	bl	80002b0 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4b60      	ldr	r3, [pc, #384]	; (8003ed8 <UART_SetConfig+0x4e4>)
 8003d56:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	011c      	lsls	r4, r3, #4
 8003d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	1891      	adds	r1, r2, r2
 8003d76:	61b9      	str	r1, [r7, #24]
 8003d78:	415b      	adcs	r3, r3
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d80:	4641      	mov	r1, r8
 8003d82:	1851      	adds	r1, r2, r1
 8003d84:	6139      	str	r1, [r7, #16]
 8003d86:	4649      	mov	r1, r9
 8003d88:	414b      	adcs	r3, r1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d98:	4659      	mov	r1, fp
 8003d9a:	00cb      	lsls	r3, r1, #3
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da2:	4651      	mov	r1, sl
 8003da4:	00ca      	lsls	r2, r1, #3
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	4642      	mov	r2, r8
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db4:	464b      	mov	r3, r9
 8003db6:	460a      	mov	r2, r1
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003dd8:	4649      	mov	r1, r9
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de2:	4641      	mov	r1, r8
 8003de4:	008a      	lsls	r2, r1, #2
 8003de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dea:	f7fc fa61 	bl	80002b0 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <UART_SetConfig+0x4e4>)
 8003df6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2264      	movs	r2, #100	; 0x64
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	1acb      	subs	r3, r1, r3
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	3332      	adds	r3, #50	; 0x32
 8003e08:	4a33      	ldr	r2, [pc, #204]	; (8003ed8 <UART_SetConfig+0x4e4>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e14:	441c      	add	r4, r3
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e1e:	677a      	str	r2, [r7, #116]	; 0x74
 8003e20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e34:	4641      	mov	r1, r8
 8003e36:	1851      	adds	r1, r2, r1
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	00cb      	lsls	r3, r1, #3
 8003e50:	4651      	mov	r1, sl
 8003e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e56:	4651      	mov	r1, sl
 8003e58:	00ca      	lsls	r2, r1, #3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4642      	mov	r2, r8
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e66:	464b      	mov	r3, r9
 8003e68:	460a      	mov	r2, r1
 8003e6a:	eb42 0303 	adc.w	r3, r2, r3
 8003e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7a:	667a      	str	r2, [r7, #100]	; 0x64
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e88:	4649      	mov	r1, r9
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e92:	4641      	mov	r1, r8
 8003e94:	008a      	lsls	r2, r1, #2
 8003e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e9a:	f7fc fa09 	bl	80002b0 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <UART_SetConfig+0x4e4>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <UART_SetConfig+0x4e4>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4422      	add	r2, r4
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed8:	51eb851f 	.word	0x51eb851f

08003edc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003ee0:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <MX_FATFS_Init+0x18>)
 8003ee2:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <MX_FATFS_Init+0x1c>)
 8003ee4:	f002 fd92 	bl	8006a0c <FATFS_LinkDriver>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <MX_FATFS_Init+0x20>)
 8003eee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000190 	.word	0x20000190
 8003ef8:	20000010 	.word	0x20000010
 8003efc:	2000018c 	.word	0x2000018c

08003f00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fc fcf9 	bl	8000914 <SD_disk_initialize>
 8003f22:	4603      	mov	r3, r0
 8003f24:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc fdd0 	bl	8000ae0 <SD_disk_status>
 8003f40:	4603      	mov	r3, r0
 8003f42:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8003f5c:	7bf8      	ldrb	r0, [r7, #15]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	f7fc fdd2 	bl	8000b0c <SD_disk_read>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 8003f84:	7bf8      	ldrb	r0, [r7, #15]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	f7fc fe28 	bl	8000be0 <SD_disk_write>
 8003f90:	4603      	mov	r3, r0
 8003f92:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	603a      	str	r2, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	79b9      	ldrb	r1, [r7, #6]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fe98 	bl	8000ce8 <SD_disk_ioctl>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <disk_status+0x30>)
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	79fa      	ldrb	r2, [r7, #7]
 8003fdc:	4905      	ldr	r1, [pc, #20]	; (8003ff4 <disk_status+0x30>)
 8003fde:	440a      	add	r2, r1
 8003fe0:	7a12      	ldrb	r2, [r2, #8]
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4798      	blx	r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20002424 	.word	0x20002424

08003ff8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <disk_initialize+0x48>)
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <disk_initialize+0x48>)
 8004014:	2101      	movs	r1, #1
 8004016:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <disk_initialize+0x48>)
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	79fa      	ldrb	r2, [r7, #7]
 8004026:	4906      	ldr	r1, [pc, #24]	; (8004040 <disk_initialize+0x48>)
 8004028:	440a      	add	r2, r1
 800402a:	7a12      	ldrb	r2, [r2, #8]
 800402c:	4610      	mov	r0, r2
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20002424 	.word	0x20002424

08004044 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <disk_read+0x3c>)
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	689c      	ldr	r4, [r3, #8]
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <disk_read+0x3c>)
 8004064:	4413      	add	r3, r2
 8004066:	7a18      	ldrb	r0, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	47a0      	blx	r4
 8004070:	4603      	mov	r3, r0
 8004072:	75fb      	strb	r3, [r7, #23]
  return res;
 8004074:	7dfb      	ldrb	r3, [r7, #23]
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bd90      	pop	{r4, r7, pc}
 800407e:	bf00      	nop
 8004080:	20002424 	.word	0x20002424

08004084 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <disk_write+0x3c>)
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68dc      	ldr	r4, [r3, #12]
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <disk_write+0x3c>)
 80040a4:	4413      	add	r3, r2
 80040a6:	7a18      	ldrb	r0, [r3, #8]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	47a0      	blx	r4
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd90      	pop	{r4, r7, pc}
 80040be:	bf00      	nop
 80040c0:	20002424 	.word	0x20002424

080040c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	603a      	str	r2, [r7, #0]
 80040ce:	71fb      	strb	r3, [r7, #7]
 80040d0:	460b      	mov	r3, r1
 80040d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <disk_ioctl+0x38>)
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	79fa      	ldrb	r2, [r7, #7]
 80040e2:	4906      	ldr	r1, [pc, #24]	; (80040fc <disk_ioctl+0x38>)
 80040e4:	440a      	add	r2, r1
 80040e6:	7a10      	ldrb	r0, [r2, #8]
 80040e8:	79b9      	ldrb	r1, [r7, #6]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4798      	blx	r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20002424 	.word	0x20002424

08004100 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004110:	89fb      	ldrh	r3, [r7, #14]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	b21a      	sxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b21b      	sxth	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b21b      	sxth	r3, r3
 8004120:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004122:	89fb      	ldrh	r3, [r7, #14]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3303      	adds	r3, #3
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	3202      	adds	r2, #2
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	3201      	adds	r2, #1
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
	return rv;
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	887b      	ldrh	r3, [r7, #2]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	1c53      	adds	r3, r2, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1c59      	adds	r1, r3, #1
 8004228:	6179      	str	r1, [r7, #20]
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3b01      	subs	r3, #1
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f1      	bne.n	800421e <mem_cpy+0x1a>
	}
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	617a      	str	r2, [r7, #20]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3b01      	subs	r3, #1
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f3      	bne.n	8004256 <mem_set+0x10>
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	61fa      	str	r2, [r7, #28]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	61ba      	str	r2, [r7, #24]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	1acb      	subs	r3, r1, r3
 80042a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <mem_cmp+0x40>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0eb      	beq.n	8004294 <mem_cmp+0x18>

	return r;
 80042bc:	697b      	ldr	r3, [r7, #20]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3724      	adds	r7, #36	; 0x24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80042d4:	e002      	b.n	80042dc <chk_chr+0x12>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3301      	adds	r3, #1
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <chk_chr+0x26>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d1f2      	bne.n	80042d6 <chk_chr+0xc>
	return *str;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e029      	b.n	8004368 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <chk_lock+0xb4>)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01d      	beq.n	800435e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <chk_lock+0xb4>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d116      	bne.n	8004362 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <chk_lock+0xb4>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	3304      	adds	r3, #4
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004344:	429a      	cmp	r2, r3
 8004346:	d10c      	bne.n	8004362 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004348:	4a1a      	ldr	r2, [pc, #104]	; (80043b4 <chk_lock+0xb4>)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4413      	add	r3, r2
 8004350:	3308      	adds	r3, #8
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004358:	429a      	cmp	r2, r3
 800435a:	d102      	bne.n	8004362 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800435c:	e007      	b.n	800436e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3301      	adds	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d9d2      	bls.n	8004314 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d109      	bne.n	8004388 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <chk_lock+0x80>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d101      	bne.n	8004384 <chk_lock+0x84>
 8004380:	2300      	movs	r3, #0
 8004382:	e010      	b.n	80043a6 <chk_lock+0xa6>
 8004384:	2312      	movs	r3, #18
 8004386:	e00e      	b.n	80043a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <chk_lock+0xa0>
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <chk_lock+0xb4>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	4413      	add	r3, r2
 8004396:	330c      	adds	r3, #12
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439e:	d101      	bne.n	80043a4 <chk_lock+0xa4>
 80043a0:	2310      	movs	r3, #16
 80043a2:	e000      	b.n	80043a6 <chk_lock+0xa6>
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20002204 	.word	0x20002204

080043b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	e002      	b.n	80043ca <enq_lock+0x12>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3301      	adds	r3, #1
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d806      	bhi.n	80043de <enq_lock+0x26>
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <enq_lock+0x40>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	4413      	add	r3, r2
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f2      	bne.n	80043c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20002204 	.word	0x20002204

080043fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e01f      	b.n	800444c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800440c:	4a41      	ldr	r2, [pc, #260]	; (8004514 <inc_lock+0x118>)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4413      	add	r3, r2
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d113      	bne.n	8004446 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800441e:	4a3d      	ldr	r2, [pc, #244]	; (8004514 <inc_lock+0x118>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	3304      	adds	r3, #4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800442e:	429a      	cmp	r2, r3
 8004430:	d109      	bne.n	8004446 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004432:	4a38      	ldr	r2, [pc, #224]	; (8004514 <inc_lock+0x118>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	4413      	add	r3, r2
 800443a:	3308      	adds	r3, #8
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004442:	429a      	cmp	r2, r3
 8004444:	d006      	beq.n	8004454 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d9dc      	bls.n	800440c <inc_lock+0x10>
 8004452:	e000      	b.n	8004456 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004454:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d132      	bne.n	80044c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e002      	b.n	8004468 <inc_lock+0x6c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d806      	bhi.n	800447c <inc_lock+0x80>
 800446e:	4a29      	ldr	r2, [pc, #164]	; (8004514 <inc_lock+0x118>)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	4413      	add	r3, r2
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f2      	bne.n	8004462 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d101      	bne.n	8004486 <inc_lock+0x8a>
 8004482:	2300      	movs	r3, #0
 8004484:	e040      	b.n	8004508 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4922      	ldr	r1, [pc, #136]	; (8004514 <inc_lock+0x118>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	440b      	add	r3, r1
 8004492:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	491e      	ldr	r1, [pc, #120]	; (8004514 <inc_lock+0x118>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	440b      	add	r3, r1
 80044a0:	3304      	adds	r3, #4
 80044a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	491a      	ldr	r1, [pc, #104]	; (8004514 <inc_lock+0x118>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	440b      	add	r3, r1
 80044b0:	3308      	adds	r3, #8
 80044b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <inc_lock+0x118>)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4413      	add	r3, r2
 80044bc:	330c      	adds	r3, #12
 80044be:	2200      	movs	r2, #0
 80044c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <inc_lock+0xe0>
 80044c8:	4a12      	ldr	r2, [pc, #72]	; (8004514 <inc_lock+0x118>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	4413      	add	r3, r2
 80044d0:	330c      	adds	r3, #12
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <inc_lock+0xe0>
 80044d8:	2300      	movs	r3, #0
 80044da:	e015      	b.n	8004508 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <inc_lock+0xf8>
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <inc_lock+0x118>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	330c      	adds	r3, #12
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	e001      	b.n	80044f8 <inc_lock+0xfc>
 80044f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f8:	4906      	ldr	r1, [pc, #24]	; (8004514 <inc_lock+0x118>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	440b      	add	r3, r1
 8004500:	330c      	adds	r3, #12
 8004502:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	20002204 	.word	0x20002204

08004518 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e010      	b.n	8004548 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004526:	4a0d      	ldr	r2, [pc, #52]	; (800455c <clear_lock+0x44>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	4413      	add	r3, r2
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d105      	bne.n	8004542 <clear_lock+0x2a>
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <clear_lock+0x44>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	4413      	add	r3, r2
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d9eb      	bls.n	8004526 <clear_lock+0xe>
	}
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	20002204 	.word	0x20002204

08004560 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	78db      	ldrb	r3, [r3, #3]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d034      	beq.n	80045de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7858      	ldrb	r0, [r3, #1]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004584:	2301      	movs	r3, #1
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	f7ff fd7c 	bl	8004084 <disk_write>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e022      	b.n	80045de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d217      	bcs.n	80045de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	789b      	ldrb	r3, [r3, #2]
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e010      	b.n	80045d8 <sync_window+0x78>
					wsect += fs->fsize;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4413      	add	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7858      	ldrb	r0, [r3, #1]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045ca:	2301      	movs	r3, #1
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	f7ff fd59 	bl	8004084 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d8eb      	bhi.n	80045b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d01b      	beq.n	8004638 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ffad 	bl	8004560 <sync_window>
 8004606:	4603      	mov	r3, r0
 8004608:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	7858      	ldrb	r0, [r3, #1]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800461a:	2301      	movs	r3, #1
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	f7ff fd11 	bl	8004044 <disk_read>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3b02      	subs	r3, #2
 8004650:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	3b02      	subs	r3, #2
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d301      	bcc.n	8004662 <clust2sect+0x20>
 800465e:	2300      	movs	r3, #0
 8004660:	e008      	b.n	8004674 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	895b      	ldrh	r3, [r3, #10]
 8004666:	461a      	mov	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	fb03 f202 	mul.w	r2, r3, r2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4413      	add	r3, r2
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d904      	bls.n	80046a0 <get_fat+0x20>
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e0bb      	b.n	800481e <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295
 80046aa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	f000 8083 	beq.w	80047bc <get_fat+0x13c>
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	f300 80a7 	bgt.w	800480a <get_fat+0x18a>
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d002      	beq.n	80046c6 <get_fat+0x46>
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d056      	beq.n	8004772 <get_fat+0xf2>
 80046c4:	e0a1      	b.n	800480a <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	899b      	ldrh	r3, [r3, #12]
 80046dc:	4619      	mov	r1, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e4:	4413      	add	r3, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	6938      	ldr	r0, [r7, #16]
 80046ea:	f7ff ff7d 	bl	80045e8 <move_window>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 808d 	bne.w	8004810 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	60fa      	str	r2, [r7, #12]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	8992      	ldrh	r2, [r2, #12]
 8004700:	fbb3 f1f2 	udiv	r1, r3, r2
 8004704:	fb01 f202 	mul.w	r2, r1, r2
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004712:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	899b      	ldrh	r3, [r3, #12]
 800471c:	4619      	mov	r1, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	fbb3 f3f1 	udiv	r3, r3, r1
 8004724:	4413      	add	r3, r2
 8004726:	4619      	mov	r1, r3
 8004728:	6938      	ldr	r0, [r7, #16]
 800472a:	f7ff ff5d 	bl	80045e8 <move_window>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d16f      	bne.n	8004814 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	899b      	ldrh	r3, [r3, #12]
 8004738:	461a      	mov	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004740:	fb01 f202 	mul.w	r2, r1, r2
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4313      	orrs	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <get_fat+0xe8>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	e002      	b.n	800476e <get_fat+0xee>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	617b      	str	r3, [r7, #20]
			break;
 8004770:	e055      	b.n	800481e <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	899b      	ldrh	r3, [r3, #12]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	4619      	mov	r1, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	fbb3 f3f1 	udiv	r3, r3, r1
 8004786:	4413      	add	r3, r2
 8004788:	4619      	mov	r1, r3
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f7ff ff2c 	bl	80045e8 <move_window>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d140      	bne.n	8004818 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	8992      	ldrh	r2, [r2, #12]
 80047a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80047a8:	fb00 f202 	mul.w	r2, r0, r2
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fca5 	bl	8004100 <ld_word>
 80047b6:	4603      	mov	r3, r0
 80047b8:	617b      	str	r3, [r7, #20]
			break;
 80047ba:	e030      	b.n	800481e <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	899b      	ldrh	r3, [r3, #12]
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4619      	mov	r1, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d0:	4413      	add	r3, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	6938      	ldr	r0, [r7, #16]
 80047d6:	f7ff ff07 	bl	80045e8 <move_window>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11d      	bne.n	800481c <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	8992      	ldrh	r2, [r2, #12]
 80047ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80047f2:	fb00 f202 	mul.w	r2, r0, r2
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fc98 	bl	8004130 <ld_dword>
 8004800:	4603      	mov	r3, r0
 8004802:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004806:	617b      	str	r3, [r7, #20]
			break;
 8004808:	e009      	b.n	800481e <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e006      	b.n	800481e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004810:	bf00      	nop
 8004812:	e004      	b.n	800481e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800481c:	bf00      	nop
		}
	}

	return val;
 800481e:	697b      	ldr	r3, [r7, #20]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b089      	sub	sp, #36	; 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004834:	2302      	movs	r3, #2
 8004836:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b01      	cmp	r3, #1
 800483c:	f240 8109 	bls.w	8004a52 <put_fat+0x22a>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	f080 8103 	bcs.w	8004a52 <put_fat+0x22a>
		switch (fs->fs_type) {
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b03      	cmp	r3, #3
 8004852:	f000 80b6 	beq.w	80049c2 <put_fat+0x19a>
 8004856:	2b03      	cmp	r3, #3
 8004858:	f300 80fb 	bgt.w	8004a52 <put_fat+0x22a>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d003      	beq.n	8004868 <put_fat+0x40>
 8004860:	2b02      	cmp	r3, #2
 8004862:	f000 8083 	beq.w	800496c <put_fat+0x144>
 8004866:	e0f4      	b.n	8004a52 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4413      	add	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	899b      	ldrh	r3, [r3, #12]
 800487e:	4619      	mov	r1, r3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	fbb3 f3f1 	udiv	r3, r3, r1
 8004886:	4413      	add	r3, r2
 8004888:	4619      	mov	r1, r3
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff feac 	bl	80045e8 <move_window>
 8004890:	4603      	mov	r3, r0
 8004892:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004894:	7ffb      	ldrb	r3, [r7, #31]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 80d4 	bne.w	8004a44 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	61ba      	str	r2, [r7, #24]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	8992      	ldrh	r2, [r2, #12]
 80048ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80048b0:	fb00 f202 	mul.w	r2, r0, r2
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <put_fat+0xb8>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	b25a      	sxtb	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	4313      	orrs	r3, r2
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e001      	b.n	80048e4 <put_fat+0xbc>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	899b      	ldrh	r3, [r3, #12]
 80048f6:	4619      	mov	r1, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	4413      	add	r3, r2
 8004900:	4619      	mov	r1, r3
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff fe70 	bl	80045e8 <move_window>
 8004908:	4603      	mov	r3, r0
 800490a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 809a 	bne.w	8004a48 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	899b      	ldrh	r3, [r3, #12]
 800491e:	461a      	mov	r2, r3
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fbb3 f0f2 	udiv	r0, r3, r2
 8004926:	fb00 f202 	mul.w	r2, r0, r2
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	440b      	add	r3, r1
 800492e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <put_fat+0x11a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e00e      	b.n	8004960 <put_fat+0x138>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b25b      	sxtb	r3, r3
 8004948:	f023 030f 	bic.w	r3, r3, #15
 800494c:	b25a      	sxtb	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	b25b      	sxtb	r3, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	b25b      	sxtb	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	70da      	strb	r2, [r3, #3]
			break;
 800496a:	e072      	b.n	8004a52 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	899b      	ldrh	r3, [r3, #12]
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	b29b      	uxth	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004980:	4413      	add	r3, r2
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fe2f 	bl	80045e8 <move_window>
 800498a:	4603      	mov	r3, r0
 800498c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d15b      	bne.n	8004a4c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	8992      	ldrh	r2, [r2, #12]
 80049a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80049a6:	fb00 f202 	mul.w	r2, r0, r2
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	440b      	add	r3, r1
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	b292      	uxth	r2, r2
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fbde 	bl	8004176 <st_word>
			fs->wflag = 1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	70da      	strb	r2, [r3, #3]
			break;
 80049c0:	e047      	b.n	8004a52 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	899b      	ldrh	r3, [r3, #12]
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4619      	mov	r1, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049d6:	4413      	add	r3, r2
 80049d8:	4619      	mov	r1, r3
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fe04 	bl	80045e8 <move_window>
 80049e0:	4603      	mov	r3, r0
 80049e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049e4:	7ffb      	ldrb	r3, [r7, #31]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d132      	bne.n	8004a50 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	8992      	ldrh	r2, [r2, #12]
 80049fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a02:	fb00 f202 	mul.w	r2, r0, r2
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	440b      	add	r3, r1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fb90 	bl	8004130 <ld_dword>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a16:	4323      	orrs	r3, r4
 8004a18:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	8992      	ldrh	r2, [r2, #12]
 8004a28:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a2c:	fb00 f202 	mul.w	r2, r0, r2
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fbb8 	bl	80041ac <st_dword>
			fs->wflag = 1;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	70da      	strb	r2, [r3, #3]
			break;
 8004a42:	e006      	b.n	8004a52 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a44:	bf00      	nop
 8004a46:	e004      	b.n	8004a52 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a48:	bf00      	nop
 8004a4a:	e002      	b.n	8004a52 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a50:	bf00      	nop
		}
	}
	return res;
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3724      	adds	r7, #36	; 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd90      	pop	{r4, r7, pc}

08004a5c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d904      	bls.n	8004a82 <remove_chain+0x26>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d301      	bcc.n	8004a86 <remove_chain+0x2a>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e04b      	b.n	8004b1e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	69b8      	ldr	r0, [r7, #24]
 8004a94:	f7ff fec8 	bl	8004828 <put_fat>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a9c:	7ffb      	ldrb	r3, [r7, #31]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <remove_chain+0x4a>
 8004aa2:	7ffb      	ldrb	r3, [r7, #31]
 8004aa4:	e03b      	b.n	8004b1e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff fde9 	bl	8004680 <get_fat>
 8004aae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d031      	beq.n	8004b1a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <remove_chain+0x64>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e02e      	b.n	8004b1e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d101      	bne.n	8004acc <remove_chain+0x70>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e028      	b.n	8004b1e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004acc:	2200      	movs	r2, #0
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	69b8      	ldr	r0, [r7, #24]
 8004ad2:	f7ff fea9 	bl	8004828 <put_fat>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <remove_chain+0x88>
 8004ae0:	7ffb      	ldrb	r3, [r7, #31]
 8004ae2:	e01c      	b.n	8004b1e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	3b02      	subs	r3, #2
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d20b      	bcs.n	8004b0a <remove_chain+0xae>
			fs->free_clst++;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	791b      	ldrb	r3, [r3, #4]
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d3c6      	bcc.n	8004aa6 <remove_chain+0x4a>
 8004b18:	e000      	b.n	8004b1c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004b1a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <create_chain+0x2c>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d31b      	bcc.n	8004b8a <create_chain+0x64>
 8004b52:	2301      	movs	r3, #1
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e018      	b.n	8004b8a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fd90 	bl	8004680 <get_fat>
 8004b60:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d801      	bhi.n	8004b6c <create_chain+0x46>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e070      	b.n	8004c4e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d101      	bne.n	8004b78 <create_chain+0x52>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	e06a      	b.n	8004c4e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d201      	bcs.n	8004b86 <create_chain+0x60>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	e063      	b.n	8004c4e <create_chain+0x128>
		scl = clst;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d307      	bcc.n	8004bae <create_chain+0x88>
				ncl = 2;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d901      	bls.n	8004bae <create_chain+0x88>
 8004baa:	2300      	movs	r3, #0
 8004bac:	e04f      	b.n	8004c4e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004bae:	69f9      	ldr	r1, [r7, #28]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fd65 	bl	8004680 <get_fat>
 8004bb6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d003      	beq.n	8004bcc <create_chain+0xa6>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d101      	bne.n	8004bd0 <create_chain+0xaa>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	e03e      	b.n	8004c4e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1da      	bne.n	8004b8e <create_chain+0x68>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e038      	b.n	8004c4e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004bdc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	69f9      	ldr	r1, [r7, #28]
 8004be4:	6938      	ldr	r0, [r7, #16]
 8004be6:	f7ff fe1f 	bl	8004828 <put_fat>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <create_chain+0xe2>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	6938      	ldr	r0, [r7, #16]
 8004c00:	f7ff fe12 	bl	8004828 <put_fat>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <create_chain+0x116>
		fs->last_clst = ncl;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	3b02      	subs	r3, #2
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d804      	bhi.n	8004c2c <create_chain+0x106>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	1e5a      	subs	r2, r3, #1
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	791b      	ldrb	r3, [r3, #4]
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	711a      	strb	r2, [r3, #4]
 8004c3a:	e007      	b.n	8004c4c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d102      	bne.n	8004c48 <create_chain+0x122>
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	e000      	b.n	8004c4a <create_chain+0x124>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c4c:	69fb      	ldr	r3, [r7, #28]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	899b      	ldrh	r3, [r3, #12]
 8004c72:	461a      	mov	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	8952      	ldrh	r2, [r2, #10]
 8004c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1d1a      	adds	r2, r3, #4
 8004c88:	613a      	str	r2, [r7, #16]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <clmt_clust+0x42>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e010      	b.n	8004cba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d307      	bcc.n	8004cb0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3304      	adds	r3, #4
 8004cac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cae:	e7e9      	b.n	8004c84 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004cb0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4413      	add	r3, r2
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cdc:	d204      	bcs.n	8004ce8 <dir_sdi+0x22>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e071      	b.n	8004dd0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <dir_sdi+0x46>
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d902      	bls.n	8004d0c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	8912      	ldrh	r2, [r2, #8]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d301      	bcc.n	8004d22 <dir_sdi+0x5c>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e056      	b.n	8004dd0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	61da      	str	r2, [r3, #28]
 8004d2a:	e02d      	b.n	8004d88 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	895b      	ldrh	r3, [r3, #10]
 8004d30:	461a      	mov	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	899b      	ldrh	r3, [r3, #12]
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d3c:	e019      	b.n	8004d72 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6979      	ldr	r1, [r7, #20]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fc9c 	bl	8004680 <get_fat>
 8004d48:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d101      	bne.n	8004d56 <dir_sdi+0x90>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e03c      	b.n	8004dd0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d904      	bls.n	8004d66 <dir_sdi+0xa0>
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d301      	bcc.n	8004d6a <dir_sdi+0xa4>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e032      	b.n	8004dd0 <dir_sdi+0x10a>
			ofs -= csz;
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d2e1      	bcs.n	8004d3e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d7a:	6979      	ldr	r1, [r7, #20]
 8004d7c:	6938      	ldr	r0, [r7, #16]
 8004d7e:	f7ff fc60 	bl	8004642 <clust2sect>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <dir_sdi+0xd4>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e01a      	b.n	8004dd0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	899b      	ldrh	r3, [r3, #12]
 8004da2:	4619      	mov	r1, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004daa:	441a      	add	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	899b      	ldrh	r3, [r3, #12]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dc2:	fb00 f202 	mul.w	r2, r0, r2
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	18ca      	adds	r2, r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	3320      	adds	r3, #32
 8004dee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <dir_next+0x28>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfe:	d301      	bcc.n	8004e04 <dir_next+0x2c>
 8004e00:	2304      	movs	r3, #4
 8004e02:	e0bb      	b.n	8004f7c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	899b      	ldrh	r3, [r3, #12]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e10:	fb01 f202 	mul.w	r2, r1, r2
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 809d 	bne.w	8004f56 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	8912      	ldrh	r2, [r2, #8]
 8004e36:	4293      	cmp	r3, r2
 8004e38:	f0c0 808d 	bcc.w	8004f56 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	61da      	str	r2, [r3, #28]
 8004e42:	2304      	movs	r3, #4
 8004e44:	e09a      	b.n	8004f7c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	899b      	ldrh	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	8952      	ldrh	r2, [r2, #10]
 8004e56:	3a01      	subs	r2, #1
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d17b      	bne.n	8004f56 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7ff fc0a 	bl	8004680 <get_fat>
 8004e6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d801      	bhi.n	8004e78 <dir_next+0xa0>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e081      	b.n	8004f7c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d101      	bne.n	8004e84 <dir_next+0xac>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e07b      	b.n	8004f7c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d359      	bcc.n	8004f42 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	61da      	str	r2, [r3, #28]
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	e06e      	b.n	8004f7c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f7ff fe3d 	bl	8004b26 <create_chain>
 8004eac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <dir_next+0xe0>
 8004eb4:	2307      	movs	r3, #7
 8004eb6:	e061      	b.n	8004f7c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <dir_next+0xea>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e05c      	b.n	8004f7c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d101      	bne.n	8004ece <dir_next+0xf6>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e056      	b.n	8004f7c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fb46 	bl	8004560 <sync_window>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <dir_next+0x106>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e04e      	b.n	8004f7c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	899b      	ldrh	r3, [r3, #12]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2100      	movs	r1, #0
 8004eec:	f7ff f9ab 	bl	8004246 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	6979      	ldr	r1, [r7, #20]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff fba3 	bl	8004642 <clust2sect>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
 8004f02:	e012      	b.n	8004f2a <dir_next+0x152>
						fs->wflag = 1;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff fb28 	bl	8004560 <sync_window>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <dir_next+0x142>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e030      	b.n	8004f7c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	895b      	ldrh	r3, [r3, #10]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d3e6      	bcc.n	8004f04 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad2      	subs	r2, r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff fb79 	bl	8004642 <clust2sect>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	899b      	ldrh	r3, [r3, #12]
 8004f66:	461a      	mov	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f6e:	fb00 f202 	mul.w	r2, r0, r2
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	18ca      	adds	r2, r1, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f94:	2100      	movs	r1, #0
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fe95 	bl	8004cc6 <dir_sdi>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d12b      	bne.n	8004ffe <dir_alloc+0x7a>
		n = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff fb19 	bl	80045e8 <move_window>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11d      	bne.n	8004ffc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2be5      	cmp	r3, #229	; 0xe5
 8004fc8:	d004      	beq.n	8004fd4 <dir_alloc+0x50>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d102      	bne.n	8004fe8 <dir_alloc+0x64>
 8004fe2:	e00c      	b.n	8004ffe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004fe8:	2101      	movs	r1, #1
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fef4 	bl	8004dd8 <dir_next>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0d7      	beq.n	8004faa <dir_alloc+0x26>
 8004ffa:	e000      	b.n	8004ffe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004ffc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d101      	bne.n	8005008 <dir_alloc+0x84>
 8005004:	2307      	movs	r3, #7
 8005006:	75fb      	strb	r3, [r7, #23]
	return res;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	331a      	adds	r3, #26
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff f86d 	bl	8004100 <ld_word>
 8005026:	4603      	mov	r3, r0
 8005028:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d109      	bne.n	8005046 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3314      	adds	r3, #20
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff f862 	bl	8004100 <ld_word>
 800503c:	4603      	mov	r3, r0
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	331a      	adds	r3, #26
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	b292      	uxth	r2, r2
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f885 	bl	8004176 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d109      	bne.n	8005088 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f103 0214 	add.w	r2, r3, #20
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	b29b      	uxth	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f7ff f877 	bl	8004176 <st_word>
	}
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	331a      	adds	r3, #26
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f82e 	bl	8004100 <ld_word>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <cmp_lfn+0x1e>
 80050aa:	2300      	movs	r3, #0
 80050ac:	e059      	b.n	8005162 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050c4:	2301      	movs	r3, #1
 80050c6:	81fb      	strh	r3, [r7, #14]
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e033      	b.n	8005136 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80050ce:	4a27      	ldr	r2, [pc, #156]	; (800516c <cmp_lfn+0xdc>)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4413      	add	r3, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff f80f 	bl	8004100 <ld_word>
 80050e2:	4603      	mov	r3, r0
 80050e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01a      	beq.n	8005122 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2bfe      	cmp	r3, #254	; 0xfe
 80050f0:	d812      	bhi.n	8005118 <cmp_lfn+0x88>
 80050f2:	89bb      	ldrh	r3, [r7, #12]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fcd5 	bl	8006aa4 <ff_wtoupper>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461c      	mov	r4, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	617a      	str	r2, [r7, #20]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f001 fcc9 	bl	8006aa4 <ff_wtoupper>
 8005112:	4603      	mov	r3, r0
 8005114:	429c      	cmp	r4, r3
 8005116:	d001      	beq.n	800511c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005118:	2300      	movs	r3, #0
 800511a:	e022      	b.n	8005162 <cmp_lfn+0xd2>
			}
			wc = uc;
 800511c:	89bb      	ldrh	r3, [r7, #12]
 800511e:	81fb      	strh	r3, [r7, #14]
 8005120:	e006      	b.n	8005130 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005122:	89bb      	ldrh	r3, [r7, #12]
 8005124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005128:	4293      	cmp	r3, r2
 800512a:	d001      	beq.n	8005130 <cmp_lfn+0xa0>
 800512c:	2300      	movs	r3, #0
 800512e:	e018      	b.n	8005162 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3301      	adds	r3, #1
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b0c      	cmp	r3, #12
 800513a:	d9c8      	bls.n	80050ce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <cmp_lfn+0xd0>
 8005148:	89fb      	ldrh	r3, [r7, #14]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <cmp_lfn+0xd0>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <cmp_lfn+0xd0>
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005160:	2301      	movs	r3, #1
}
 8005162:	4618      	mov	r0, r3
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd90      	pop	{r4, r7, pc}
 800516a:	bf00      	nop
 800516c:	08007da4 	.word	0x08007da4

08005170 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	460b      	mov	r3, r1
 8005180:	71fb      	strb	r3, [r7, #7]
 8005182:	4613      	mov	r3, r2
 8005184:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	330d      	adds	r3, #13
 800518a:	79ba      	ldrb	r2, [r7, #6]
 800518c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	330b      	adds	r3, #11
 8005192:	220f      	movs	r2, #15
 8005194:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	330c      	adds	r3, #12
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	331a      	adds	r3, #26
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe ffe6 	bl	8004176 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	1e5a      	subs	r2, r3, #1
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	82fb      	strh	r3, [r7, #22]
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80051c2:	8afb      	ldrh	r3, [r7, #22]
 80051c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <put_lfn+0x6c>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	61fa      	str	r2, [r7, #28]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <put_lfn+0xcc>)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	8afa      	ldrh	r2, [r7, #22]
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe ffc1 	bl	8004176 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <put_lfn+0x90>
 80051fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	3301      	adds	r3, #1
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d9da      	bls.n	80051c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800520c:	8afb      	ldrh	r3, [r7, #22]
 800520e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005212:	4293      	cmp	r3, r2
 8005214:	d006      	beq.n	8005224 <put_lfn+0xb4>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <put_lfn+0xbc>
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800522a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	79fa      	ldrb	r2, [r7, #7]
 8005230:	701a      	strb	r2, [r3, #0]
}
 8005232:	bf00      	nop
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	08007da4 	.word	0x08007da4

08005240 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800524e:	220b      	movs	r2, #11
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7fe ffd6 	bl	8004204 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d92b      	bls.n	80052b6 <gen_numname+0x76>
		sr = seq;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005262:	e022      	b.n	80052aa <gen_numname+0x6a>
			wc = *lfn++;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1c9a      	adds	r2, r3, #2
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800526e:	2300      	movs	r3, #0
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	e017      	b.n	80052a4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005a      	lsls	r2, r3, #1
 8005278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <gen_numname+0x5e>
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005298:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800529c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	3301      	adds	r3, #1
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d9e4      	bls.n	8005274 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1d8      	bne.n	8005264 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80052b6:	2307      	movs	r3, #7
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	3330      	adds	r3, #48	; 0x30
 80052c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80052ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052ce:	2b39      	cmp	r3, #57	; 0x39
 80052d0:	d904      	bls.n	80052dc <gen_numname+0x9c>
 80052d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052d6:	3307      	adds	r3, #7
 80052d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80052e2:	3330      	adds	r3, #48	; 0x30
 80052e4:	443b      	add	r3, r7
 80052e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80052ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1df      	bne.n	80052ba <gen_numname+0x7a>
	ns[i] = '~';
 80052fa:	f107 0214 	add.w	r2, r7, #20
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	4413      	add	r3, r2
 8005302:	227e      	movs	r2, #126	; 0x7e
 8005304:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
 800530a:	e002      	b.n	8005312 <gen_numname+0xd2>
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	3301      	adds	r3, #1
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	429a      	cmp	r2, r3
 8005318:	d205      	bcs.n	8005326 <gen_numname+0xe6>
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b20      	cmp	r3, #32
 8005324:	d1f2      	bne.n	800530c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2b07      	cmp	r3, #7
 800532a:	d807      	bhi.n	800533c <gen_numname+0xfc>
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	62ba      	str	r2, [r7, #40]	; 0x28
 8005332:	3330      	adds	r3, #48	; 0x30
 8005334:	443b      	add	r3, r7
 8005336:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800533a:	e000      	b.n	800533e <gen_numname+0xfe>
 800533c:	2120      	movs	r1, #32
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	627a      	str	r2, [r7, #36]	; 0x24
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	460a      	mov	r2, r1
 800534a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	2b07      	cmp	r3, #7
 8005350:	d9e9      	bls.n	8005326 <gen_numname+0xe6>
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	3730      	adds	r7, #48	; 0x30
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005368:	230b      	movs	r3, #11
 800536a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	0852      	lsrs	r2, r2, #1
 8005372:	01db      	lsls	r3, r3, #7
 8005374:	4313      	orrs	r3, r2
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	6079      	str	r1, [r7, #4]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4413      	add	r3, r2
 8005382:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ed      	bne.n	800536c <sum_sfn+0x10>
	return sum;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053ac:	2100      	movs	r1, #0
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fc89 	bl	8004cc6 <dir_sdi>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <dir_find+0x24>
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	e0a9      	b.n	8005516 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80053c2:	23ff      	movs	r3, #255	; 0xff
 80053c4:	753b      	strb	r3, [r7, #20]
 80053c6:	7d3b      	ldrb	r3, [r7, #20]
 80053c8:	757b      	strb	r3, [r7, #21]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4619      	mov	r1, r3
 80053d8:	6938      	ldr	r0, [r7, #16]
 80053da:	f7ff f905 	bl	80045e8 <move_window>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8090 	bne.w	800550a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053f2:	7dbb      	ldrb	r3, [r7, #22]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <dir_find+0x60>
 80053f8:	2304      	movs	r3, #4
 80053fa:	75fb      	strb	r3, [r7, #23]
 80053fc:	e08a      	b.n	8005514 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	330b      	adds	r3, #11
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7bfa      	ldrb	r2, [r7, #15]
 8005410:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005412:	7dbb      	ldrb	r3, [r7, #22]
 8005414:	2be5      	cmp	r3, #229	; 0xe5
 8005416:	d007      	beq.n	8005428 <dir_find+0x8a>
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <dir_find+0x98>
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b0f      	cmp	r3, #15
 8005426:	d006      	beq.n	8005436 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005428:	23ff      	movs	r3, #255	; 0xff
 800542a:	757b      	strb	r3, [r7, #21]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f04f 32ff 	mov.w	r2, #4294967295
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
 8005434:	e05e      	b.n	80054f4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	2b0f      	cmp	r3, #15
 800543a:	d136      	bne.n	80054aa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d154      	bne.n	80054f4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800544a:	7dbb      	ldrb	r3, [r7, #22]
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	7b5b      	ldrb	r3, [r3, #13]
 800545a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800545c:	7dbb      	ldrb	r3, [r7, #22]
 800545e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005462:	75bb      	strb	r3, [r7, #22]
 8005464:	7dbb      	ldrb	r3, [r7, #22]
 8005466:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005470:	7dba      	ldrb	r2, [r7, #22]
 8005472:	7d7b      	ldrb	r3, [r7, #21]
 8005474:	429a      	cmp	r2, r3
 8005476:	d115      	bne.n	80054a4 <dir_find+0x106>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	330d      	adds	r3, #13
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	7d3a      	ldrb	r2, [r7, #20]
 8005482:	429a      	cmp	r2, r3
 8005484:	d10e      	bne.n	80054a4 <dir_find+0x106>
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7ff fdfd 	bl	8005090 <cmp_lfn>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <dir_find+0x106>
 800549c:	7d7b      	ldrb	r3, [r7, #21]
 800549e:	3b01      	subs	r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e000      	b.n	80054a6 <dir_find+0x108>
 80054a4:	23ff      	movs	r3, #255	; 0xff
 80054a6:	757b      	strb	r3, [r7, #21]
 80054a8:	e024      	b.n	80054f4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80054aa:	7d7b      	ldrb	r3, [r7, #21]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <dir_find+0x126>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ff51 	bl	800535c <sum_sfn>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	7d3b      	ldrb	r3, [r7, #20]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d024      	beq.n	800550e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <dir_find+0x14a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a18      	ldr	r0, [r3, #32]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3324      	adds	r3, #36	; 0x24
 80054da:	220b      	movs	r2, #11
 80054dc:	4619      	mov	r1, r3
 80054de:	f7fe fecd 	bl	800427c <mem_cmp>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d014      	beq.n	8005512 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80054e8:	23ff      	movs	r3, #255	; 0xff
 80054ea:	757b      	strb	r3, [r7, #21]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054f4:	2100      	movs	r1, #0
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fc6e 	bl	8004dd8 <dir_next>
 80054fc:	4603      	mov	r3, r0
 80054fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f43f af65 	beq.w	80053d2 <dir_find+0x34>
 8005508:	e004      	b.n	8005514 <dir_find+0x176>
		if (res != FR_OK) break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005512:	bf00      	nop

	return res;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005534:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <dir_register+0x20>
 800553c:	2306      	movs	r3, #6
 800553e:	e0e0      	b.n	8005702 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
 8005544:	e002      	b.n	800554c <dir_register+0x2c>
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	3301      	adds	r3, #1
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f4      	bne.n	8005546 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005562:	f107 030c 	add.w	r3, r7, #12
 8005566:	220c      	movs	r2, #12
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fe4b 	bl	8004204 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d032      	beq.n	80055de <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005580:	2301      	movs	r3, #1
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
 8005584:	e016      	b.n	80055b4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	f107 010c 	add.w	r1, r7, #12
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f7ff fe53 	bl	8005240 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff feff 	bl	800539e <dir_find>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80055a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	3301      	adds	r3, #1
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	2b63      	cmp	r3, #99	; 0x63
 80055b8:	d9e5      	bls.n	8005586 <dir_register+0x66>
 80055ba:	e000      	b.n	80055be <dir_register+0x9e>
			if (res != FR_OK) break;
 80055bc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2b64      	cmp	r3, #100	; 0x64
 80055c2:	d101      	bne.n	80055c8 <dir_register+0xa8>
 80055c4:	2307      	movs	r3, #7
 80055c6:	e09c      	b.n	8005702 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80055c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d002      	beq.n	80055d6 <dir_register+0xb6>
 80055d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055d4:	e095      	b.n	8005702 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80055d6:	7dfa      	ldrb	r2, [r7, #23]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <dir_register+0xd8>
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	330c      	adds	r3, #12
 80055ec:	4a47      	ldr	r2, [pc, #284]	; (800570c <dir_register+0x1ec>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	3301      	adds	r3, #1
 80055f6:	e000      	b.n	80055fa <dir_register+0xda>
 80055f8:	2301      	movs	r3, #1
 80055fa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80055fc:	6a39      	ldr	r1, [r7, #32]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fcc0 	bl	8004f84 <dir_alloc>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800560a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800560e:	2b00      	cmp	r3, #0
 8005610:	d148      	bne.n	80056a4 <dir_register+0x184>
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	3b01      	subs	r3, #1
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d042      	beq.n	80056a4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	015b      	lsls	r3, r3, #5
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fb4b 	bl	8004cc6 <dir_sdi>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800563a:	2b00      	cmp	r3, #0
 800563c:	d132      	bne.n	80056a4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3324      	adds	r3, #36	; 0x24
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fe8a 	bl	800535c <sum_sfn>
 8005648:	4603      	mov	r3, r0
 800564a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	4619      	mov	r1, r3
 8005652:	69f8      	ldr	r0, [r7, #28]
 8005654:	f7fe ffc8 	bl	80045e8 <move_window>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800565e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11d      	bne.n	80056a2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	6918      	ldr	r0, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a19      	ldr	r1, [r3, #32]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	7efb      	ldrb	r3, [r7, #27]
 8005674:	f7ff fd7c 	bl	8005170 <put_lfn>
				fs->wflag = 1;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2201      	movs	r2, #1
 800567c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800567e:	2100      	movs	r1, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fba9 	bl	8004dd8 <dir_next>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800568c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005690:	2b00      	cmp	r3, #0
 8005692:	d107      	bne.n	80056a4 <dir_register+0x184>
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	3b01      	subs	r3, #1
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1d5      	bne.n	800564c <dir_register+0x12c>
 80056a0:	e000      	b.n	80056a4 <dir_register+0x184>
				if (res != FR_OK) break;
 80056a2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80056a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d128      	bne.n	80056fe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4619      	mov	r1, r3
 80056b2:	69f8      	ldr	r0, [r7, #28]
 80056b4:	f7fe ff98 	bl	80045e8 <move_window>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80056be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11b      	bne.n	80056fe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	2220      	movs	r2, #32
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fdb9 	bl	8004246 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a18      	ldr	r0, [r3, #32]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3324      	adds	r3, #36	; 0x24
 80056dc:	220b      	movs	r2, #11
 80056de:	4619      	mov	r1, r3
 80056e0:	f7fe fd90 	bl	8004204 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	330c      	adds	r3, #12
 80056f0:	f002 0218 	and.w	r2, r2, #24
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2201      	movs	r2, #1
 80056fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80056fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005702:	4618      	mov	r0, r3
 8005704:	3730      	adds	r7, #48	; 0x30
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	4ec4ec4f 	.word	0x4ec4ec4f

08005710 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	61ba      	str	r2, [r7, #24]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800573e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005740:	2b1f      	cmp	r3, #31
 8005742:	d940      	bls.n	80057c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005746:	2b2f      	cmp	r3, #47	; 0x2f
 8005748:	d006      	beq.n	8005758 <create_name+0x48>
 800574a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800574c:	2b5c      	cmp	r3, #92	; 0x5c
 800574e:	d110      	bne.n	8005772 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005750:	e002      	b.n	8005758 <create_name+0x48>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3301      	adds	r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	4413      	add	r3, r2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b2f      	cmp	r3, #47	; 0x2f
 8005762:	d0f6      	beq.n	8005752 <create_name+0x42>
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	4413      	add	r3, r2
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b5c      	cmp	r3, #92	; 0x5c
 800576e:	d0f0      	beq.n	8005752 <create_name+0x42>
			break;
 8005770:	e02a      	b.n	80057c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2bfe      	cmp	r3, #254	; 0xfe
 8005776:	d901      	bls.n	800577c <create_name+0x6c>
 8005778:	2306      	movs	r3, #6
 800577a:	e17d      	b.n	8005a78 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800577c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800577e:	b2db      	uxtb	r3, r3
 8005780:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005784:	2101      	movs	r1, #1
 8005786:	4618      	mov	r0, r3
 8005788:	f001 f950 	bl	8006a2c <ff_convert>
 800578c:	4603      	mov	r3, r0
 800578e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <create_name+0x8a>
 8005796:	2306      	movs	r3, #6
 8005798:	e16e      	b.n	8005a78 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800579a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800579c:	2b7f      	cmp	r3, #127	; 0x7f
 800579e:	d809      	bhi.n	80057b4 <create_name+0xa4>
 80057a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057a2:	4619      	mov	r1, r3
 80057a4:	488d      	ldr	r0, [pc, #564]	; (80059dc <create_name+0x2cc>)
 80057a6:	f7fe fd90 	bl	80042ca <chk_chr>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <create_name+0xa4>
 80057b0:	2306      	movs	r3, #6
 80057b2:	e161      	b.n	8005a78 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	617a      	str	r2, [r7, #20]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80057c4:	e7b4      	b.n	8005730 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80057c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	441a      	add	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80057d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d4:	2b1f      	cmp	r3, #31
 80057d6:	d801      	bhi.n	80057dc <create_name+0xcc>
 80057d8:	2304      	movs	r3, #4
 80057da:	e000      	b.n	80057de <create_name+0xce>
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80057e2:	e011      	b.n	8005808 <create_name+0xf8>
		w = lfn[di - 1];
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	3b01      	subs	r3, #1
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80057f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d002      	beq.n	8005802 <create_name+0xf2>
 80057fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005800:	d106      	bne.n	8005810 <create_name+0x100>
		di--;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	3b01      	subs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ea      	bne.n	80057e4 <create_name+0xd4>
 800580e:	e000      	b.n	8005812 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005810:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	2200      	movs	r2, #0
 800581c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <create_name+0x118>
 8005824:	2306      	movs	r3, #6
 8005826:	e127      	b.n	8005a78 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	220b      	movs	r2, #11
 800582e:	2120      	movs	r1, #32
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fd08 	bl	8004246 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e002      	b.n	8005842 <create_name+0x132>
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	3301      	adds	r3, #1
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	2b20      	cmp	r3, #32
 800584e:	d0f5      	beq.n	800583c <create_name+0x12c>
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	2b2e      	cmp	r3, #46	; 0x2e
 800585c:	d0ee      	beq.n	800583c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <create_name+0x168>
 8005864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005868:	f043 0303 	orr.w	r3, r3, #3
 800586c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005870:	e002      	b.n	8005878 <create_name+0x168>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3b01      	subs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <create_name+0x182>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005884:	3b01      	subs	r3, #1
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	2b2e      	cmp	r3, #46	; 0x2e
 8005890:	d1ef      	bne.n	8005872 <create_name+0x162>

	i = b = 0; ni = 8;
 8005892:	2300      	movs	r3, #0
 8005894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005898:	2300      	movs	r3, #0
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	2308      	movs	r3, #8
 800589e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	61ba      	str	r2, [r7, #24]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80058b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 8090 	beq.w	80059d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80058b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d006      	beq.n	80058cc <create_name+0x1bc>
 80058be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c0:	2b2e      	cmp	r3, #46	; 0x2e
 80058c2:	d10a      	bne.n	80058da <create_name+0x1ca>
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d006      	beq.n	80058da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80058cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d0:	f043 0303 	orr.w	r3, r3, #3
 80058d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058d8:	e07d      	b.n	80059d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80058da:	6a3a      	ldr	r2, [r7, #32]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d203      	bcs.n	80058ea <create_name+0x1da>
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d123      	bne.n	8005932 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b0b      	cmp	r3, #11
 80058ee:	d106      	bne.n	80058fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80058f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058f4:	f043 0303 	orr.w	r3, r3, #3
 80058f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058fc:	e075      	b.n	80059ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	429a      	cmp	r2, r3
 8005904:	d005      	beq.n	8005912 <create_name+0x202>
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800590a:	f043 0303 	orr.w	r3, r3, #3
 800590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	429a      	cmp	r2, r3
 8005918:	d866      	bhi.n	80059e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	2308      	movs	r3, #8
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	230b      	movs	r3, #11
 8005924:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005930:	e051      	b.n	80059d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005934:	2b7f      	cmp	r3, #127	; 0x7f
 8005936:	d914      	bls.n	8005962 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f875 	bl	8006a2c <ff_convert>
 8005942:	4603      	mov	r3, r0
 8005944:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <create_name+0x246>
 800594c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800594e:	3b80      	subs	r3, #128	; 0x80
 8005950:	4a23      	ldr	r2, [pc, #140]	; (80059e0 <create_name+0x2d0>)
 8005952:	5cd3      	ldrb	r3, [r2, r3]
 8005954:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800595a:	f043 0302 	orr.w	r3, r3, #2
 800595e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <create_name+0x268>
 8005968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596a:	4619      	mov	r1, r3
 800596c:	481d      	ldr	r0, [pc, #116]	; (80059e4 <create_name+0x2d4>)
 800596e:	f7fe fcac 	bl	80042ca <chk_chr>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005978:	235f      	movs	r3, #95	; 0x5f
 800597a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800597c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005980:	f043 0303 	orr.w	r3, r3, #3
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005988:	e01b      	b.n	80059c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800598a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d909      	bls.n	80059a4 <create_name+0x294>
 8005990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005992:	2b5a      	cmp	r3, #90	; 0x5a
 8005994:	d806      	bhi.n	80059a4 <create_name+0x294>
					b |= 2;
 8005996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800599a:	f043 0302 	orr.w	r3, r3, #2
 800599e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059a2:	e00e      	b.n	80059c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80059a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a6:	2b60      	cmp	r3, #96	; 0x60
 80059a8:	d90b      	bls.n	80059c2 <create_name+0x2b2>
 80059aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ac:	2b7a      	cmp	r3, #122	; 0x7a
 80059ae:	d808      	bhi.n	80059c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80059b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059be:	3b20      	subs	r3, #32
 80059c0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	623a      	str	r2, [r7, #32]
 80059c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059ca:	b2d1      	uxtb	r1, r2
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4413      	add	r3, r2
 80059d0:	460a      	mov	r2, r1
 80059d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80059d6:	e763      	b.n	80058a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80059d8:	bf00      	nop
 80059da:	e006      	b.n	80059ea <create_name+0x2da>
 80059dc:	08007cc0 	.word	0x08007cc0
 80059e0:	08007d24 	.word	0x08007d24
 80059e4:	08007ccc 	.word	0x08007ccc
			if (si > di) break;			/* No extension */
 80059e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059f0:	2be5      	cmp	r3, #229	; 0xe5
 80059f2:	d103      	bne.n	80059fc <create_name+0x2ec>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2205      	movs	r2, #5
 80059f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d104      	bne.n	8005a0c <create_name+0x2fc>
 8005a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d005      	beq.n	8005a24 <create_name+0x314>
 8005a18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d105      	bne.n	8005a30 <create_name+0x320>
 8005a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d117      	bne.n	8005a6c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <create_name+0x344>
 8005a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4c:	f043 0310 	orr.w	r3, r3, #16
 8005a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d105      	bne.n	8005a6c <create_name+0x35c>
 8005a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005a76:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3728      	adds	r7, #40	; 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a94:	e002      	b.n	8005a9c <follow_path+0x1c>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8005aa2:	d0f8      	beq.n	8005a96 <follow_path+0x16>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b5c      	cmp	r3, #92	; 0x5c
 8005aaa:	d0f4      	beq.n	8005a96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b1f      	cmp	r3, #31
 8005ab8:	d80a      	bhi.n	8005ad0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2280      	movs	r2, #128	; 0x80
 8005abe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff f8fe 	bl	8004cc6 <dir_sdi>
 8005aca:	4603      	mov	r3, r0
 8005acc:	75fb      	strb	r3, [r7, #23]
 8005ace:	e048      	b.n	8005b62 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fe1b 	bl	8005710 <create_name>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d139      	bne.n	8005b58 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fc5a 	bl	800539e <dir_find>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005af4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d12c      	bne.n	8005b5c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d127      	bne.n	8005b5c <follow_path+0xdc>
 8005b0c:	2305      	movs	r3, #5
 8005b0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b10:	e024      	b.n	8005b5c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d121      	bne.n	8005b60 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	799b      	ldrb	r3, [r3, #6]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005b28:	2305      	movs	r3, #5
 8005b2a:	75fb      	strb	r3, [r7, #23]
 8005b2c:	e019      	b.n	8005b62 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	8992      	ldrh	r2, [r2, #12]
 8005b3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b40:	fb00 f202 	mul.w	r2, r0, r2
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	440b      	add	r3, r1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fa61 	bl	8005012 <ld_clust>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b56:	e7bb      	b.n	8005ad0 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b58:	bf00      	nop
 8005b5a:	e002      	b.n	8005b62 <follow_path+0xe2>
				break;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b60:	bf00      	nop
			}
		}
	}

	return res;
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
 8005b78:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d031      	beq.n	8005be6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e002      	b.n	8005b90 <get_ldnumber+0x24>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b1f      	cmp	r3, #31
 8005b96:	d903      	bls.n	8005ba0 <get_ldnumber+0x34>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b3a      	cmp	r3, #58	; 0x3a
 8005b9e:	d1f4      	bne.n	8005b8a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b3a      	cmp	r3, #58	; 0x3a
 8005ba6:	d11c      	bne.n	8005be2 <get_ldnumber+0x76>
			tp = *path;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	60fa      	str	r2, [r7, #12]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	3b30      	subs	r3, #48	; 0x30
 8005bb8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	d80e      	bhi.n	8005bde <get_ldnumber+0x72>
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d10a      	bne.n	8005bde <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <get_ldnumber+0x72>
					vol = (int)i;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	e002      	b.n	8005be8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005be6:	693b      	ldr	r3, [r7, #16]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	70da      	strb	r2, [r3, #3]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fe fcea 	bl	80045e8 <move_window>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <check_fs+0x2a>
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	e038      	b.n	8005c90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3338      	adds	r3, #56	; 0x38
 8005c22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fa6a 	bl	8004100 <ld_word>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <check_fs+0x48>
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e029      	b.n	8005c90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c42:	2be9      	cmp	r3, #233	; 0xe9
 8005c44:	d009      	beq.n	8005c5a <check_fs+0x66>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c4c:	2beb      	cmp	r3, #235	; 0xeb
 8005c4e:	d11e      	bne.n	8005c8e <check_fs+0x9a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c56:	2b90      	cmp	r3, #144	; 0x90
 8005c58:	d119      	bne.n	8005c8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3338      	adds	r3, #56	; 0x38
 8005c5e:	3336      	adds	r3, #54	; 0x36
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fa65 	bl	8004130 <ld_dword>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <check_fs+0xa4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <check_fs+0x82>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e00c      	b.n	8005c90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3338      	adds	r3, #56	; 0x38
 8005c7a:	3352      	adds	r3, #82	; 0x52
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe fa57 	bl	8004130 <ld_dword>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <check_fs+0xa8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <check_fs+0x9a>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e000      	b.n	8005c90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c8e:	2302      	movs	r3, #2
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	00544146 	.word	0x00544146
 8005c9c:	33544146 	.word	0x33544146

08005ca0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b096      	sub	sp, #88	; 0x58
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff ff59 	bl	8005b6c <get_ldnumber>
 8005cba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da01      	bge.n	8005cc6 <find_volume+0x26>
 8005cc2:	230b      	movs	r3, #11
 8005cc4:	e265      	b.n	8006192 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005cc6:	4a9f      	ldr	r2, [pc, #636]	; (8005f44 <find_volume+0x2a4>)
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <find_volume+0x3a>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	e25b      	b.n	8006192 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01a      	beq.n	8005d26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe f965 	bl	8003fc4 <disk_status>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10c      	bne.n	8005d26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <find_volume+0x82>
 8005d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005d1e:	230a      	movs	r3, #10
 8005d20:	e237      	b.n	8006192 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005d22:	2300      	movs	r3, #0
 8005d24:	e235      	b.n	8006192 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe f95d 	bl	8003ff8 <disk_initialize>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d50:	2303      	movs	r3, #3
 8005d52:	e21e      	b.n	8006192 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <find_volume+0xca>
 8005d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d66:	230a      	movs	r3, #10
 8005d68:	e213      	b.n	8006192 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	7858      	ldrb	r0, [r3, #1]
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	330c      	adds	r3, #12
 8005d72:	461a      	mov	r2, r3
 8005d74:	2102      	movs	r1, #2
 8005d76:	f7fe f9a5 	bl	80040c4 <disk_ioctl>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <find_volume+0xe4>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e206      	b.n	8006192 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	899b      	ldrh	r3, [r3, #12]
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8c:	d80d      	bhi.n	8005daa <find_volume+0x10a>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	899b      	ldrh	r3, [r3, #12]
 8005d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d96:	d308      	bcc.n	8005daa <find_volume+0x10a>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	899b      	ldrh	r3, [r3, #12]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	899b      	ldrh	r3, [r3, #12]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <find_volume+0x10e>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e1f1      	b.n	8006192 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005db2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005db4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005db6:	f7ff ff1d 	bl	8005bf4 <check_fs>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d149      	bne.n	8005e5c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
 8005dcc:	e01e      	b.n	8005e0c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ddc:	4413      	add	r3, r2
 8005dde:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	3304      	adds	r3, #4
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <find_volume+0x158>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	3308      	adds	r3, #8
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe f99e 	bl	8004130 <ld_dword>
 8005df4:	4602      	mov	r2, r0
 8005df6:	e000      	b.n	8005dfa <find_volume+0x15a>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	3358      	adds	r3, #88	; 0x58
 8005e00:	443b      	add	r3, r7
 8005e02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	3301      	adds	r3, #1
 8005e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d9dd      	bls.n	8005dce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005e12:	2300      	movs	r3, #0
 8005e14:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <find_volume+0x182>
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	3358      	adds	r3, #88	; 0x58
 8005e28:	443b      	add	r3, r7
 8005e2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005e2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <find_volume+0x1a2>
 8005e36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e3a:	f7ff fedb 	bl	8005bf4 <check_fs>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	e000      	b.n	8005e44 <find_volume+0x1a4>
 8005e42:	2303      	movs	r3, #3
 8005e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d905      	bls.n	8005e5c <find_volume+0x1bc>
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	3301      	adds	r3, #1
 8005e54:	643b      	str	r3, [r7, #64]	; 0x40
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d9e2      	bls.n	8005e22 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d101      	bne.n	8005e68 <find_volume+0x1c8>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e194      	b.n	8006192 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d901      	bls.n	8005e74 <find_volume+0x1d4>
 8005e70:	230d      	movs	r3, #13
 8005e72:	e18e      	b.n	8006192 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	3338      	adds	r3, #56	; 0x38
 8005e78:	330b      	adds	r3, #11
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe f940 	bl	8004100 <ld_word>
 8005e80:	4603      	mov	r3, r0
 8005e82:	461a      	mov	r2, r3
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	899b      	ldrh	r3, [r3, #12]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <find_volume+0x1f0>
 8005e8c:	230d      	movs	r3, #13
 8005e8e:	e180      	b.n	8006192 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	3338      	adds	r3, #56	; 0x38
 8005e94:	3316      	adds	r3, #22
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe f932 	bl	8004100 <ld_word>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <find_volume+0x214>
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	3338      	adds	r3, #56	; 0x38
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe f93f 	bl	8004130 <ld_dword>
 8005eb2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eb8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	789b      	ldrb	r3, [r3, #2]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d005      	beq.n	8005ed8 <find_volume+0x238>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	789b      	ldrb	r3, [r3, #2]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d001      	beq.n	8005ed8 <find_volume+0x238>
 8005ed4:	230d      	movs	r3, #13
 8005ed6:	e15c      	b.n	8006192 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	789b      	ldrb	r3, [r3, #2]
 8005edc:	461a      	mov	r2, r3
 8005ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	895b      	ldrh	r3, [r3, #10]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <find_volume+0x26c>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	895b      	ldrh	r3, [r3, #10]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	895b      	ldrh	r3, [r3, #10]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <find_volume+0x270>
 8005f0c:	230d      	movs	r3, #13
 8005f0e:	e140      	b.n	8006192 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	3338      	adds	r3, #56	; 0x38
 8005f14:	3311      	adds	r3, #17
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe f8f2 	bl	8004100 <ld_word>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	891b      	ldrh	r3, [r3, #8]
 8005f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2a:	8992      	ldrh	r2, [r2, #12]
 8005f2c:	0952      	lsrs	r2, r2, #5
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f34:	fb01 f202 	mul.w	r2, r1, r2
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <find_volume+0x2a8>
 8005f40:	230d      	movs	r3, #13
 8005f42:	e126      	b.n	8006192 <find_volume+0x4f2>
 8005f44:	200021fc 	.word	0x200021fc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	3338      	adds	r3, #56	; 0x38
 8005f4c:	3313      	adds	r3, #19
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe f8d6 	bl	8004100 <ld_word>
 8005f54:	4603      	mov	r3, r0
 8005f56:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <find_volume+0x2cc>
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	3338      	adds	r3, #56	; 0x38
 8005f62:	3320      	adds	r3, #32
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe f8e3 	bl	8004130 <ld_dword>
 8005f6a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	3338      	adds	r3, #56	; 0x38
 8005f70:	330e      	adds	r3, #14
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe f8c4 	bl	8004100 <ld_word>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <find_volume+0x2e6>
 8005f82:	230d      	movs	r3, #13
 8005f84:	e105      	b.n	8006192 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8a:	4413      	add	r3, r2
 8005f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8e:	8911      	ldrh	r1, [r2, #8]
 8005f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f92:	8992      	ldrh	r2, [r2, #12]
 8005f94:	0952      	lsrs	r2, r2, #5
 8005f96:	b292      	uxth	r2, r2
 8005f98:	fbb1 f2f2 	udiv	r2, r1, r2
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d201      	bcs.n	8005fae <find_volume+0x30e>
 8005faa:	230d      	movs	r3, #13
 8005fac:	e0f1      	b.n	8006192 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb6:	8952      	ldrh	r2, [r2, #10]
 8005fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <find_volume+0x328>
 8005fc4:	230d      	movs	r3, #13
 8005fc6:	e0e4      	b.n	8006192 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d802      	bhi.n	8005fde <find_volume+0x33e>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d802      	bhi.n	8005fee <find_volume+0x34e>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005ffc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006000:	441a      	add	r2, r3
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	441a      	add	r2, r3
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006014:	2b03      	cmp	r3, #3
 8006016:	d11e      	bne.n	8006056 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	3338      	adds	r3, #56	; 0x38
 800601c:	332a      	adds	r3, #42	; 0x2a
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe f86e 	bl	8004100 <ld_word>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <find_volume+0x38e>
 800602a:	230d      	movs	r3, #13
 800602c:	e0b1      	b.n	8006192 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	891b      	ldrh	r3, [r3, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <find_volume+0x39a>
 8006036:	230d      	movs	r3, #13
 8006038:	e0ab      	b.n	8006192 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	3338      	adds	r3, #56	; 0x38
 800603e:	332c      	adds	r3, #44	; 0x2c
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe f875 	bl	8004130 <ld_dword>
 8006046:	4602      	mov	r2, r0
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	647b      	str	r3, [r7, #68]	; 0x44
 8006054:	e01f      	b.n	8006096 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	891b      	ldrh	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <find_volume+0x3c2>
 800605e:	230d      	movs	r3, #13
 8006060:	e097      	b.n	8006192 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006068:	441a      	add	r2, r3
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800606e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006072:	2b02      	cmp	r3, #2
 8006074:	d103      	bne.n	800607e <find_volume+0x3de>
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	e00a      	b.n	8006094 <find_volume+0x3f4>
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	4613      	mov	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	4413      	add	r3, r2
 8006088:	085a      	lsrs	r2, r3, #1
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	899b      	ldrh	r3, [r3, #12]
 800609e:	4619      	mov	r1, r3
 80060a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a2:	440b      	add	r3, r1
 80060a4:	3b01      	subs	r3, #1
 80060a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060a8:	8989      	ldrh	r1, [r1, #12]
 80060aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d201      	bcs.n	80060b6 <find_volume+0x416>
 80060b2:	230d      	movs	r3, #13
 80060b4:	e06d      	b.n	8006192 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80060cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d149      	bne.n	8006168 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	3338      	adds	r3, #56	; 0x38
 80060d8:	3330      	adds	r3, #48	; 0x30
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe f810 	bl	8004100 <ld_word>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d140      	bne.n	8006168 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	3301      	adds	r3, #1
 80060ea:	4619      	mov	r1, r3
 80060ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060ee:	f7fe fa7b 	bl	80045e8 <move_window>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d137      	bne.n	8006168 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	2200      	movs	r2, #0
 80060fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	3338      	adds	r3, #56	; 0x38
 8006102:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006106:	4618      	mov	r0, r3
 8006108:	f7fd fffa 	bl	8004100 <ld_word>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006114:	429a      	cmp	r2, r3
 8006116:	d127      	bne.n	8006168 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	3338      	adds	r3, #56	; 0x38
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe f807 	bl	8004130 <ld_dword>
 8006122:	4603      	mov	r3, r0
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <find_volume+0x4fc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d11e      	bne.n	8006168 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	3338      	adds	r3, #56	; 0x38
 800612e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd fffc 	bl	8004130 <ld_dword>
 8006138:	4603      	mov	r3, r0
 800613a:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <find_volume+0x500>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d113      	bne.n	8006168 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	3338      	adds	r3, #56	; 0x38
 8006144:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006148:	4618      	mov	r0, r3
 800614a:	f7fd fff1 	bl	8004130 <ld_dword>
 800614e:	4602      	mov	r2, r0
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	3338      	adds	r3, #56	; 0x38
 8006158:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800615c:	4618      	mov	r0, r3
 800615e:	f7fd ffe7 	bl	8004130 <ld_dword>
 8006162:	4602      	mov	r2, r0
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800616e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006170:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <find_volume+0x504>)
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <find_volume+0x504>)
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <find_volume+0x504>)
 800617e:	881a      	ldrh	r2, [r3, #0]
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <find_volume+0x508>)
 8006188:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800618a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800618c:	f7fe f9c4 	bl	8004518 <clear_lock>
#endif
	return FR_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3758      	adds	r7, #88	; 0x58
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	41615252 	.word	0x41615252
 80061a0:	61417272 	.word	0x61417272
 80061a4:	20002200 	.word	0x20002200
 80061a8:	20002224 	.word	0x20002224

080061ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80061b6:	2309      	movs	r3, #9
 80061b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01c      	beq.n	80061fa <validate+0x4e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d018      	beq.n	80061fa <validate+0x4e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d013      	beq.n	80061fa <validate+0x4e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	889a      	ldrh	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	88db      	ldrh	r3, [r3, #6]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d10c      	bne.n	80061fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fd feec 	bl	8003fc4 <disk_status>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <validate+0x4e>
			res = FR_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <validate+0x5a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	e000      	b.n	8006208 <validate+0x5c>
 8006206:	2300      	movs	r3, #0
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	6013      	str	r3, [r2, #0]
	return res;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800622a:	f107 0310 	add.w	r3, r7, #16
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fc9c 	bl	8005b6c <get_ldnumber>
 8006234:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	2b00      	cmp	r3, #0
 800623a:	da01      	bge.n	8006240 <f_mount+0x28>
 800623c:	230b      	movs	r3, #11
 800623e:	e02b      	b.n	8006298 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006240:	4a17      	ldr	r2, [pc, #92]	; (80062a0 <f_mount+0x88>)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006248:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006250:	69b8      	ldr	r0, [r7, #24]
 8006252:	f7fe f961 	bl	8004518 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	490d      	ldr	r1, [pc, #52]	; (80062a0 <f_mount+0x88>)
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <f_mount+0x66>
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d001      	beq.n	8006282 <f_mount+0x6a>
 800627e:	2300      	movs	r3, #0
 8006280:	e00a      	b.n	8006298 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006282:	f107 010c 	add.w	r1, r7, #12
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	2200      	movs	r2, #0
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fd07 	bl	8005ca0 <find_volume>
 8006292:	4603      	mov	r3, r0
 8006294:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006296:	7dfb      	ldrb	r3, [r7, #23]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200021fc 	.word	0x200021fc

080062a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b09a      	sub	sp, #104	; 0x68
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <f_open+0x18>
 80062b8:	2309      	movs	r3, #9
 80062ba:	e1bb      	b.n	8006634 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80062c4:	79fa      	ldrb	r2, [r7, #7]
 80062c6:	f107 0114 	add.w	r1, r7, #20
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fce6 	bl	8005ca0 <find_volume>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80062da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 819f 	bne.w	8006622 <f_open+0x37e>
		dj.obj.fs = fs;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	f107 0318 	add.w	r3, r7, #24
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff fbc5 	bl	8005a80 <follow_path>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80062fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006300:	2b00      	cmp	r3, #0
 8006302:	d11a      	bne.n	800633a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006304:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006308:	b25b      	sxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	da03      	bge.n	8006316 <f_open+0x72>
				res = FR_INVALID_NAME;
 800630e:	2306      	movs	r3, #6
 8006310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006314:	e011      	b.n	800633a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	f107 0318 	add.w	r3, r7, #24
 800632c:	4611      	mov	r1, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd ffe6 	bl	8004300 <chk_lock>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	f003 031c 	and.w	r3, r3, #28
 8006340:	2b00      	cmp	r3, #0
 8006342:	d07f      	beq.n	8006444 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800634c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006350:	2b04      	cmp	r3, #4
 8006352:	d10e      	bne.n	8006372 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006354:	f7fe f830 	bl	80043b8 <enq_lock>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <f_open+0xc8>
 800635e:	f107 0318 	add.w	r3, r7, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f8dc 	bl	8005520 <dir_register>
 8006368:	4603      	mov	r3, r0
 800636a:	e000      	b.n	800636e <f_open+0xca>
 800636c:	2312      	movs	r3, #18
 800636e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	f043 0308 	orr.w	r3, r3, #8
 8006378:	71fb      	strb	r3, [r7, #7]
 800637a:	e010      	b.n	800639e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800637c:	7fbb      	ldrb	r3, [r7, #30]
 800637e:	f003 0311 	and.w	r3, r3, #17
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <f_open+0xea>
					res = FR_DENIED;
 8006386:	2307      	movs	r3, #7
 8006388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800638c:	e007      	b.n	800639e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <f_open+0xfa>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800639e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d168      	bne.n	8006478 <f_open+0x1d4>
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d063      	beq.n	8006478 <f_open+0x1d4>
				dw = GET_FATTIME();
 80063b0:	f7fd fda6 	bl	8003f00 <get_fattime>
 80063b4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	330e      	adds	r3, #14
 80063ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fd fef5 	bl	80041ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	3316      	adds	r3, #22
 80063c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fd feef 	bl	80041ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	330b      	adds	r3, #11
 80063d2:	2220      	movs	r2, #32
 80063d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe fe18 	bl	8005012 <ld_clust>
 80063e2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e8:	2200      	movs	r2, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fe30 	bl	8005050 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	331c      	adds	r3, #28
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd fed8 	bl	80041ac <st_dword>
					fs->wflag = 1;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2201      	movs	r2, #1
 8006400:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006404:	2b00      	cmp	r3, #0
 8006406:	d037      	beq.n	8006478 <f_open+0x1d4>
						dw = fs->winsect;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800640e:	f107 0318 	add.w	r3, r7, #24
 8006412:	2200      	movs	r2, #0
 8006414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fb20 	bl	8004a5c <remove_chain>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006426:	2b00      	cmp	r3, #0
 8006428:	d126      	bne.n	8006478 <f_open+0x1d4>
							res = move_window(fs, dw);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe f8da 	bl	80045e8 <move_window>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800643e:	3a01      	subs	r2, #1
 8006440:	615a      	str	r2, [r3, #20]
 8006442:	e019      	b.n	8006478 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006448:	2b00      	cmp	r3, #0
 800644a:	d115      	bne.n	8006478 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800644c:	7fbb      	ldrb	r3, [r7, #30]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006456:	2304      	movs	r3, #4
 8006458:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800645c:	e00c      	b.n	8006478 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <f_open+0x1d4>
 8006468:	7fbb      	ldrb	r3, [r7, #30]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <f_open+0x1d4>
						res = FR_DENIED;
 8006472:	2307      	movs	r3, #7
 8006474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800647c:	2b00      	cmp	r3, #0
 800647e:	d128      	bne.n	80064d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006490:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800649a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bf14      	ite	ne
 80064aa:	2301      	movne	r3, #1
 80064ac:	2300      	moveq	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	f107 0318 	add.w	r3, r7, #24
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fd ff9f 	bl	80043fc <inc_lock>
 80064be:	4602      	mov	r2, r0
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <f_open+0x22e>
 80064cc:	2302      	movs	r3, #2
 80064ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80064d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 80a3 	bne.w	8006622 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fd95 	bl	8005012 <ld_clust>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	331c      	adds	r3, #28
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fd fe1c 	bl	8004130 <ld_dword>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	88da      	ldrh	r2, [r3, #6]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3330      	adds	r3, #48	; 0x30
 800652e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f7fd fe86 	bl	8004246 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d06e      	beq.n	8006622 <f_open+0x37e>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d06a      	beq.n	8006622 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	895b      	ldrh	r3, [r3, #10]
 8006558:	461a      	mov	r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	899b      	ldrh	r3, [r3, #12]
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006570:	e016      	b.n	80065a0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f882 	bl	8004680 <get_fat>
 800657c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800657e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006580:	2b01      	cmp	r3, #1
 8006582:	d802      	bhi.n	800658a <f_open+0x2e6>
 8006584:	2302      	movs	r3, #2
 8006586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800658a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <f_open+0x2f4>
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800659a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <f_open+0x30c>
 80065a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d8e0      	bhi.n	8006572 <f_open+0x2ce>
				}
				fp->clust = clst;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80065b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d131      	bne.n	8006622 <f_open+0x37e>
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	899b      	ldrh	r3, [r3, #12]
 80065c2:	461a      	mov	r2, r3
 80065c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ca:	fb01 f202 	mul.w	r2, r1, r2
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d026      	beq.n	8006622 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe f832 	bl	8004642 <clust2sect>
 80065de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80065e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <f_open+0x34a>
						res = FR_INT_ERR;
 80065e6:	2302      	movs	r3, #2
 80065e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80065ec:	e019      	b.n	8006622 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	899b      	ldrh	r3, [r3, #12]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	441a      	add	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	7858      	ldrb	r0, [r3, #1]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	2301      	movs	r3, #1
 8006612:	f7fd fd17 	bl	8004044 <disk_read>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <f_open+0x37e>
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006622:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <f_open+0x38c>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006634:	4618      	mov	r0, r3
 8006636:	3768      	adds	r7, #104	; 0x68
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08e      	sub	sp, #56	; 0x38
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f107 0214 	add.w	r2, r7, #20
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fda5 	bl	80061ac <validate>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800666c:	2b00      	cmp	r3, #0
 800666e:	d107      	bne.n	8006680 <f_read+0x44>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	7d5b      	ldrb	r3, [r3, #21]
 8006674:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <f_read+0x4a>
 8006680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006684:	e135      	b.n	80068f2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	7d1b      	ldrb	r3, [r3, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <f_read+0x5a>
 8006692:	2307      	movs	r3, #7
 8006694:	e12d      	b.n	80068f2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f240 811e 	bls.w	80068e8 <f_read+0x2ac>
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80066b0:	e11a      	b.n	80068e8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	8992      	ldrh	r2, [r2, #12]
 80066ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80066be:	fb01 f202 	mul.w	r2, r1, r2
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 80d5 	bne.w	8006874 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	8992      	ldrh	r2, [r2, #12]
 80066d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	8952      	ldrh	r2, [r2, #10]
 80066da:	3a01      	subs	r2, #1
 80066dc:	4013      	ands	r3, r2
 80066de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d12f      	bne.n	8006746 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30
 80066f4:	e013      	b.n	800671e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	4619      	mov	r1, r3
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7fe faa6 	bl	8004c56 <clmt_clust>
 800670a:	6338      	str	r0, [r7, #48]	; 0x30
 800670c:	e007      	b.n	800671e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7fd ffb2 	bl	8004680 <get_fat>
 800671c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	2b01      	cmp	r3, #1
 8006722:	d804      	bhi.n	800672e <f_read+0xf2>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2202      	movs	r2, #2
 8006728:	755a      	strb	r2, [r3, #21]
 800672a:	2302      	movs	r3, #2
 800672c:	e0e1      	b.n	80068f2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d104      	bne.n	8006740 <f_read+0x104>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	755a      	strb	r2, [r3, #21]
 800673c:	2301      	movs	r3, #1
 800673e:	e0d8      	b.n	80068f2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006744:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fd ff77 	bl	8004642 <clust2sect>
 8006754:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d104      	bne.n	8006766 <f_read+0x12a>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2202      	movs	r2, #2
 8006760:	755a      	strb	r2, [r3, #21]
 8006762:	2302      	movs	r3, #2
 8006764:	e0c5      	b.n	80068f2 <f_read+0x2b6>
			sect += csect;
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	899b      	ldrh	r3, [r3, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	fbb3 f3f2 	udiv	r3, r3, r2
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2b00      	cmp	r3, #0
 8006780:	d041      	beq.n	8006806 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	4413      	add	r3, r2
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	8952      	ldrh	r2, [r2, #10]
 800678c:	4293      	cmp	r3, r2
 800678e:	d905      	bls.n	800679c <f_read+0x160>
					cc = fs->csize - csect;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	895b      	ldrh	r3, [r3, #10]
 8006794:	461a      	mov	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	7858      	ldrb	r0, [r3, #1]
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067a6:	f7fd fc4d 	bl	8004044 <disk_read>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d004      	beq.n	80067ba <f_read+0x17e>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	755a      	strb	r2, [r3, #21]
 80067b6:	2301      	movs	r3, #1
 80067b8:	e09b      	b.n	80068f2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	7d1b      	ldrb	r3, [r3, #20]
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	da18      	bge.n	80067f6 <f_read+0x1ba>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1a      	ldr	r2, [r3, #32]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d911      	bls.n	80067f6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	8992      	ldrh	r2, [r2, #12]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e4:	18d0      	adds	r0, r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	899b      	ldrh	r3, [r3, #12]
 80067f0:	461a      	mov	r2, r3
 80067f2:	f7fd fd07 	bl	8004204 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	899b      	ldrh	r3, [r3, #12]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006804:	e05c      	b.n	80068c0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	429a      	cmp	r2, r3
 800680e:	d02e      	beq.n	800686e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	7d1b      	ldrb	r3, [r3, #20]
 8006814:	b25b      	sxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	da18      	bge.n	800684c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	7858      	ldrb	r0, [r3, #1]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1a      	ldr	r2, [r3, #32]
 8006828:	2301      	movs	r3, #1
 800682a:	f7fd fc2b 	bl	8004084 <disk_write>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <f_read+0x202>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	755a      	strb	r2, [r3, #21]
 800683a:	2301      	movs	r3, #1
 800683c:	e059      	b.n	80068f2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	7d1b      	ldrb	r3, [r3, #20]
 8006842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	7858      	ldrb	r0, [r3, #1]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006856:	2301      	movs	r3, #1
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	f7fd fbf3 	bl	8004044 <disk_read>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <f_read+0x232>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	755a      	strb	r2, [r3, #21]
 800686a:	2301      	movs	r3, #1
 800686c:	e041      	b.n	80068f2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	899b      	ldrh	r3, [r3, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	8992      	ldrh	r2, [r2, #12]
 8006882:	fbb3 f1f2 	udiv	r1, r3, r2
 8006886:	fb01 f202 	mul.w	r2, r1, r2
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	1ac3      	subs	r3, r0, r3
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d901      	bls.n	800689c <f_read+0x260>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	8992      	ldrh	r2, [r2, #12]
 80068aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80068ae:	fb00 f202 	mul.w	r2, r0, r2
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	440b      	add	r3, r1
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	4619      	mov	r1, r3
 80068ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068bc:	f7fd fca2 	bl	8004204 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	4413      	add	r3, r2
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	441a      	add	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	619a      	str	r2, [r3, #24]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	441a      	add	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f47f aee1 	bne.w	80066b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3738      	adds	r7, #56	; 0x38
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b088      	sub	sp, #32
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800690e:	e01b      	b.n	8006948 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006910:	f107 0310 	add.w	r3, r7, #16
 8006914:	f107 0114 	add.w	r1, r7, #20
 8006918:	2201      	movs	r2, #1
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fe8e 	bl	800663c <f_read>
		if (rc != 1) break;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d116      	bne.n	8006954 <f_gets+0x5a>
		c = s[0];
 8006926:	7d3b      	ldrb	r3, [r7, #20]
 8006928:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	2b0d      	cmp	r3, #13
 800692e:	d100      	bne.n	8006932 <f_gets+0x38>
 8006930:	e00a      	b.n	8006948 <f_gets+0x4e>
		*p++ = c;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	61ba      	str	r2, [r7, #24]
 8006938:	7dfa      	ldrb	r2, [r7, #23]
 800693a:	701a      	strb	r2, [r3, #0]
		n++;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	3301      	adds	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b0a      	cmp	r3, #10
 8006946:	d007      	beq.n	8006958 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	3b01      	subs	r3, #1
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	429a      	cmp	r2, r3
 8006950:	dbde      	blt.n	8006910 <f_gets+0x16>
 8006952:	e002      	b.n	800695a <f_gets+0x60>
		if (rc != 1) break;
 8006954:	bf00      	nop
 8006956:	e000      	b.n	800695a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006958:	bf00      	nop
	}
	*p = 0;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <f_gets+0x70>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	e000      	b.n	800696c <f_gets+0x72>
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006982:	2301      	movs	r3, #1
 8006984:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800698a:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 800698c:	7a5b      	ldrb	r3, [r3, #9]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d131      	bne.n	80069f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006994:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 8006996:	7a5b      	ldrb	r3, [r3, #9]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 800699e:	2100      	movs	r1, #0
 80069a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80069a2:	4b19      	ldr	r3, [pc, #100]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 80069a4:	7a5b      	ldrb	r3, [r3, #9]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80069b2:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 80069b4:	7a5b      	ldrb	r3, [r3, #9]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 80069bc:	4413      	add	r3, r2
 80069be:	79fa      	ldrb	r2, [r7, #7]
 80069c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 80069c4:	7a5b      	ldrb	r3, [r3, #9]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	b2d1      	uxtb	r1, r2
 80069cc:	4a0e      	ldr	r2, [pc, #56]	; (8006a08 <FATFS_LinkDriverEx+0x94>)
 80069ce:	7251      	strb	r1, [r2, #9]
 80069d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80069d2:	7dbb      	ldrb	r3, [r7, #22]
 80069d4:	3330      	adds	r3, #48	; 0x30
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	3301      	adds	r3, #1
 80069e0:	223a      	movs	r2, #58	; 0x3a
 80069e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	3302      	adds	r3, #2
 80069e8:	222f      	movs	r2, #47	; 0x2f
 80069ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3303      	adds	r3, #3
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20002424 	.word	0x20002424

08006a0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a16:	2200      	movs	r2, #0
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ffaa 	bl	8006974 <FATFS_LinkDriverEx>
 8006a20:	4603      	mov	r3, r0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	6039      	str	r1, [r7, #0]
 8006a36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3c:	d802      	bhi.n	8006a44 <ff_convert+0x18>
		c = chr;
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	81fb      	strh	r3, [r7, #14]
 8006a42:	e025      	b.n	8006a90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2bff      	cmp	r3, #255	; 0xff
 8006a4e:	d805      	bhi.n	8006a5c <ff_convert+0x30>
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	3b80      	subs	r3, #128	; 0x80
 8006a54:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <ff_convert+0x74>)
 8006a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a5a:	e000      	b.n	8006a5e <ff_convert+0x32>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	81fb      	strh	r3, [r7, #14]
 8006a60:	e016      	b.n	8006a90 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006a62:	2300      	movs	r3, #0
 8006a64:	81fb      	strh	r3, [r7, #14]
 8006a66:	e009      	b.n	8006a7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <ff_convert+0x74>)
 8006a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a70:	88fa      	ldrh	r2, [r7, #6]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d006      	beq.n	8006a84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	81fb      	strh	r3, [r7, #14]
 8006a7c:	89fb      	ldrh	r3, [r7, #14]
 8006a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a80:	d9f2      	bls.n	8006a68 <ff_convert+0x3c>
 8006a82:	e000      	b.n	8006a86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006a84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006a86:	89fb      	ldrh	r3, [r7, #14]
 8006a88:	3380      	adds	r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006a90:	89fb      	ldrh	r3, [r7, #14]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	08007db4 	.word	0x08007db4

08006aa4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab4:	d201      	bcs.n	8006aba <ff_wtoupper+0x16>
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <ff_wtoupper+0x10c>)
 8006ab8:	e000      	b.n	8006abc <ff_wtoupper+0x18>
 8006aba:	4b3e      	ldr	r3, [pc, #248]	; (8006bb4 <ff_wtoupper+0x110>)
 8006abc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1c9a      	adds	r2, r3, #2
 8006ac2:	617a      	str	r2, [r7, #20]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006ac8:	8a7b      	ldrh	r3, [r7, #18]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d068      	beq.n	8006ba0 <ff_wtoupper+0xfc>
 8006ace:	88fa      	ldrh	r2, [r7, #6]
 8006ad0:	8a7b      	ldrh	r3, [r7, #18]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d364      	bcc.n	8006ba0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	1c9a      	adds	r2, r3, #2
 8006ada:	617a      	str	r2, [r7, #20]
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	823b      	strh	r3, [r7, #16]
 8006ae0:	8a3b      	ldrh	r3, [r7, #16]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	81fb      	strh	r3, [r7, #14]
 8006ae6:	8a3b      	ldrh	r3, [r7, #16]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006aec:	88fa      	ldrh	r2, [r7, #6]
 8006aee:	8a79      	ldrh	r1, [r7, #18]
 8006af0:	8a3b      	ldrh	r3, [r7, #16]
 8006af2:	440b      	add	r3, r1
 8006af4:	429a      	cmp	r2, r3
 8006af6:	da49      	bge.n	8006b8c <ff_wtoupper+0xe8>
			switch (cmd) {
 8006af8:	89fb      	ldrh	r3, [r7, #14]
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d84f      	bhi.n	8006b9e <ff_wtoupper+0xfa>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <ff_wtoupper+0x60>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b3b 	.word	0x08006b3b
 8006b0c:	08006b51 	.word	0x08006b51
 8006b10:	08006b59 	.word	0x08006b59
 8006b14:	08006b61 	.word	0x08006b61
 8006b18:	08006b69 	.word	0x08006b69
 8006b1c:	08006b71 	.word	0x08006b71
 8006b20:	08006b79 	.word	0x08006b79
 8006b24:	08006b81 	.word	0x08006b81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	8a7b      	ldrh	r3, [r7, #18]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	80fb      	strh	r3, [r7, #6]
 8006b38:	e027      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	8a7b      	ldrh	r3, [r7, #18]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	80fb      	strh	r3, [r7, #6]
 8006b4e:	e01c      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	3b10      	subs	r3, #16
 8006b54:	80fb      	strh	r3, [r7, #6]
 8006b56:	e018      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	3b20      	subs	r3, #32
 8006b5c:	80fb      	strh	r3, [r7, #6]
 8006b5e:	e014      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	3b30      	subs	r3, #48	; 0x30
 8006b64:	80fb      	strh	r3, [r7, #6]
 8006b66:	e010      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	3b1a      	subs	r3, #26
 8006b6c:	80fb      	strh	r3, [r7, #6]
 8006b6e:	e00c      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	3308      	adds	r3, #8
 8006b74:	80fb      	strh	r3, [r7, #6]
 8006b76:	e008      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	3b50      	subs	r3, #80	; 0x50
 8006b7c:	80fb      	strh	r3, [r7, #6]
 8006b7e:	e004      	b.n	8006b8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006b86:	80fb      	strh	r3, [r7, #6]
 8006b88:	bf00      	nop
			}
			break;
 8006b8a:	e008      	b.n	8006b9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d195      	bne.n	8006abe <ff_wtoupper+0x1a>
 8006b92:	8a3b      	ldrh	r3, [r7, #16]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006b9c:	e78f      	b.n	8006abe <ff_wtoupper+0x1a>
			break;
 8006b9e:	bf00      	nop
	}

	return chr;
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	08007eb4 	.word	0x08007eb4
 8006bb4:	080080a8 	.word	0x080080a8

08006bb8 <malloc>:
 8006bb8:	4b02      	ldr	r3, [pc, #8]	; (8006bc4 <malloc+0xc>)
 8006bba:	4601      	mov	r1, r0
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	f000 b823 	b.w	8006c08 <_malloc_r>
 8006bc2:	bf00      	nop
 8006bc4:	2000007c 	.word	0x2000007c

08006bc8 <sbrk_aligned>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4e0e      	ldr	r6, [pc, #56]	; (8006c04 <sbrk_aligned+0x3c>)
 8006bcc:	460c      	mov	r4, r1
 8006bce:	6831      	ldr	r1, [r6, #0]
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	b911      	cbnz	r1, 8006bda <sbrk_aligned+0x12>
 8006bd4:	f000 fa5c 	bl	8007090 <_sbrk_r>
 8006bd8:	6030      	str	r0, [r6, #0]
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 fa57 	bl	8007090 <_sbrk_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d00a      	beq.n	8006bfc <sbrk_aligned+0x34>
 8006be6:	1cc4      	adds	r4, r0, #3
 8006be8:	f024 0403 	bic.w	r4, r4, #3
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d007      	beq.n	8006c00 <sbrk_aligned+0x38>
 8006bf0:	1a21      	subs	r1, r4, r0
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f000 fa4c 	bl	8007090 <_sbrk_r>
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d101      	bne.n	8006c00 <sbrk_aligned+0x38>
 8006bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8006c00:	4620      	mov	r0, r4
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	20002434 	.word	0x20002434

08006c08 <_malloc_r>:
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	1ccd      	adds	r5, r1, #3
 8006c0e:	f025 0503 	bic.w	r5, r5, #3
 8006c12:	3508      	adds	r5, #8
 8006c14:	2d0c      	cmp	r5, #12
 8006c16:	bf38      	it	cc
 8006c18:	250c      	movcc	r5, #12
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	db01      	blt.n	8006c24 <_malloc_r+0x1c>
 8006c20:	42a9      	cmp	r1, r5
 8006c22:	d905      	bls.n	8006c30 <_malloc_r+0x28>
 8006c24:	230c      	movs	r3, #12
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	2600      	movs	r6, #0
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d04 <_malloc_r+0xfc>
 8006c34:	f000 f868 	bl	8006d08 <__malloc_lock>
 8006c38:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	bb5c      	cbnz	r4, 8006c98 <_malloc_r+0x90>
 8006c40:	4629      	mov	r1, r5
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ffc0 	bl	8006bc8 <sbrk_aligned>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	d155      	bne.n	8006cfa <_malloc_r+0xf2>
 8006c4e:	f8d8 4000 	ldr.w	r4, [r8]
 8006c52:	4626      	mov	r6, r4
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	d145      	bne.n	8006ce4 <_malloc_r+0xdc>
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	d048      	beq.n	8006cee <_malloc_r+0xe6>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4638      	mov	r0, r7
 8006c62:	eb04 0903 	add.w	r9, r4, r3
 8006c66:	f000 fa13 	bl	8007090 <_sbrk_r>
 8006c6a:	4581      	cmp	r9, r0
 8006c6c:	d13f      	bne.n	8006cee <_malloc_r+0xe6>
 8006c6e:	6821      	ldr	r1, [r4, #0]
 8006c70:	1a6d      	subs	r5, r5, r1
 8006c72:	4629      	mov	r1, r5
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ffa7 	bl	8006bc8 <sbrk_aligned>
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d037      	beq.n	8006cee <_malloc_r+0xe6>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	442b      	add	r3, r5
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	f8d8 3000 	ldr.w	r3, [r8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d038      	beq.n	8006cfe <_malloc_r+0xf6>
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	42a2      	cmp	r2, r4
 8006c90:	d12b      	bne.n	8006cea <_malloc_r+0xe2>
 8006c92:	2200      	movs	r2, #0
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	e00f      	b.n	8006cb8 <_malloc_r+0xb0>
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	1b52      	subs	r2, r2, r5
 8006c9c:	d41f      	bmi.n	8006cde <_malloc_r+0xd6>
 8006c9e:	2a0b      	cmp	r2, #11
 8006ca0:	d917      	bls.n	8006cd2 <_malloc_r+0xca>
 8006ca2:	1961      	adds	r1, r4, r5
 8006ca4:	42a3      	cmp	r3, r4
 8006ca6:	6025      	str	r5, [r4, #0]
 8006ca8:	bf18      	it	ne
 8006caa:	6059      	strne	r1, [r3, #4]
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	bf08      	it	eq
 8006cb0:	f8c8 1000 	streq.w	r1, [r8]
 8006cb4:	5162      	str	r2, [r4, r5]
 8006cb6:	604b      	str	r3, [r1, #4]
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f104 060b 	add.w	r6, r4, #11
 8006cbe:	f000 f829 	bl	8006d14 <__malloc_unlock>
 8006cc2:	f026 0607 	bic.w	r6, r6, #7
 8006cc6:	1d23      	adds	r3, r4, #4
 8006cc8:	1af2      	subs	r2, r6, r3
 8006cca:	d0ae      	beq.n	8006c2a <_malloc_r+0x22>
 8006ccc:	1b9b      	subs	r3, r3, r6
 8006cce:	50a3      	str	r3, [r4, r2]
 8006cd0:	e7ab      	b.n	8006c2a <_malloc_r+0x22>
 8006cd2:	42a3      	cmp	r3, r4
 8006cd4:	6862      	ldr	r2, [r4, #4]
 8006cd6:	d1dd      	bne.n	8006c94 <_malloc_r+0x8c>
 8006cd8:	f8c8 2000 	str.w	r2, [r8]
 8006cdc:	e7ec      	b.n	8006cb8 <_malloc_r+0xb0>
 8006cde:	4623      	mov	r3, r4
 8006ce0:	6864      	ldr	r4, [r4, #4]
 8006ce2:	e7ac      	b.n	8006c3e <_malloc_r+0x36>
 8006ce4:	4634      	mov	r4, r6
 8006ce6:	6876      	ldr	r6, [r6, #4]
 8006ce8:	e7b4      	b.n	8006c54 <_malloc_r+0x4c>
 8006cea:	4613      	mov	r3, r2
 8006cec:	e7cc      	b.n	8006c88 <_malloc_r+0x80>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f000 f80e 	bl	8006d14 <__malloc_unlock>
 8006cf8:	e797      	b.n	8006c2a <_malloc_r+0x22>
 8006cfa:	6025      	str	r5, [r4, #0]
 8006cfc:	e7dc      	b.n	8006cb8 <_malloc_r+0xb0>
 8006cfe:	605b      	str	r3, [r3, #4]
 8006d00:	deff      	udf	#255	; 0xff
 8006d02:	bf00      	nop
 8006d04:	20002430 	.word	0x20002430

08006d08 <__malloc_lock>:
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__malloc_lock+0x8>)
 8006d0a:	f000 ba0e 	b.w	800712a <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	20002578 	.word	0x20002578

08006d14 <__malloc_unlock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__malloc_unlock+0x8>)
 8006d16:	f000 ba09 	b.w	800712c <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20002578 	.word	0x20002578

08006d20 <std>:
 8006d20:	2300      	movs	r3, #0
 8006d22:	b510      	push	{r4, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	e9c0 3300 	strd	r3, r3, [r0]
 8006d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2e:	6083      	str	r3, [r0, #8]
 8006d30:	8181      	strh	r1, [r0, #12]
 8006d32:	6643      	str	r3, [r0, #100]	; 0x64
 8006d34:	81c2      	strh	r2, [r0, #14]
 8006d36:	6183      	str	r3, [r0, #24]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	305c      	adds	r0, #92	; 0x5c
 8006d3e:	f000 f90e 	bl	8006f5e <memset>
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <std+0x58>)
 8006d44:	6263      	str	r3, [r4, #36]	; 0x24
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <std+0x5c>)
 8006d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <std+0x60>)
 8006d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <std+0x64>)
 8006d50:	6323      	str	r3, [r4, #48]	; 0x30
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <std+0x68>)
 8006d54:	6224      	str	r4, [r4, #32]
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d006      	beq.n	8006d68 <std+0x48>
 8006d5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d5e:	4294      	cmp	r4, r2
 8006d60:	d002      	beq.n	8006d68 <std+0x48>
 8006d62:	33d0      	adds	r3, #208	; 0xd0
 8006d64:	429c      	cmp	r4, r3
 8006d66:	d105      	bne.n	8006d74 <std+0x54>
 8006d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d70:	f000 b9da 	b.w	8007128 <__retarget_lock_init_recursive>
 8006d74:	bd10      	pop	{r4, pc}
 8006d76:	bf00      	nop
 8006d78:	08006ea5 	.word	0x08006ea5
 8006d7c:	08006ec7 	.word	0x08006ec7
 8006d80:	08006eff 	.word	0x08006eff
 8006d84:	08006f23 	.word	0x08006f23
 8006d88:	20002438 	.word	0x20002438

08006d8c <stdio_exit_handler>:
 8006d8c:	4a02      	ldr	r2, [pc, #8]	; (8006d98 <stdio_exit_handler+0xc>)
 8006d8e:	4903      	ldr	r1, [pc, #12]	; (8006d9c <stdio_exit_handler+0x10>)
 8006d90:	4803      	ldr	r0, [pc, #12]	; (8006da0 <stdio_exit_handler+0x14>)
 8006d92:	f000 b869 	b.w	8006e68 <_fwalk_sglue>
 8006d96:	bf00      	nop
 8006d98:	20000024 	.word	0x20000024
 8006d9c:	08007631 	.word	0x08007631
 8006da0:	20000030 	.word	0x20000030

08006da4 <cleanup_stdio>:
 8006da4:	6841      	ldr	r1, [r0, #4]
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <cleanup_stdio+0x34>)
 8006da8:	4299      	cmp	r1, r3
 8006daa:	b510      	push	{r4, lr}
 8006dac:	4604      	mov	r4, r0
 8006dae:	d001      	beq.n	8006db4 <cleanup_stdio+0x10>
 8006db0:	f000 fc3e 	bl	8007630 <_fflush_r>
 8006db4:	68a1      	ldr	r1, [r4, #8]
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <cleanup_stdio+0x38>)
 8006db8:	4299      	cmp	r1, r3
 8006dba:	d002      	beq.n	8006dc2 <cleanup_stdio+0x1e>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 fc37 	bl	8007630 <_fflush_r>
 8006dc2:	68e1      	ldr	r1, [r4, #12]
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <cleanup_stdio+0x3c>)
 8006dc6:	4299      	cmp	r1, r3
 8006dc8:	d004      	beq.n	8006dd4 <cleanup_stdio+0x30>
 8006dca:	4620      	mov	r0, r4
 8006dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd0:	f000 bc2e 	b.w	8007630 <_fflush_r>
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20002438 	.word	0x20002438
 8006ddc:	200024a0 	.word	0x200024a0
 8006de0:	20002508 	.word	0x20002508

08006de4 <global_stdio_init.part.0>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <global_stdio_init.part.0+0x30>)
 8006de8:	4c0b      	ldr	r4, [pc, #44]	; (8006e18 <global_stdio_init.part.0+0x34>)
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <global_stdio_init.part.0+0x38>)
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	4620      	mov	r0, r4
 8006df0:	2200      	movs	r2, #0
 8006df2:	2104      	movs	r1, #4
 8006df4:	f7ff ff94 	bl	8006d20 <std>
 8006df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2109      	movs	r1, #9
 8006e00:	f7ff ff8e 	bl	8006d20 <std>
 8006e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e08:	2202      	movs	r2, #2
 8006e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0e:	2112      	movs	r1, #18
 8006e10:	f7ff bf86 	b.w	8006d20 <std>
 8006e14:	20002570 	.word	0x20002570
 8006e18:	20002438 	.word	0x20002438
 8006e1c:	08006d8d 	.word	0x08006d8d

08006e20 <__sfp_lock_acquire>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__sfp_lock_acquire+0x8>)
 8006e22:	f000 b982 	b.w	800712a <__retarget_lock_acquire_recursive>
 8006e26:	bf00      	nop
 8006e28:	20002579 	.word	0x20002579

08006e2c <__sfp_lock_release>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <__sfp_lock_release+0x8>)
 8006e2e:	f000 b97d 	b.w	800712c <__retarget_lock_release_recursive>
 8006e32:	bf00      	nop
 8006e34:	20002579 	.word	0x20002579

08006e38 <__sinit>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f7ff fff0 	bl	8006e20 <__sfp_lock_acquire>
 8006e40:	6a23      	ldr	r3, [r4, #32]
 8006e42:	b11b      	cbz	r3, 8006e4c <__sinit+0x14>
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f7ff bff0 	b.w	8006e2c <__sfp_lock_release>
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <__sinit+0x28>)
 8006e4e:	6223      	str	r3, [r4, #32]
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <__sinit+0x2c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f5      	bne.n	8006e44 <__sinit+0xc>
 8006e58:	f7ff ffc4 	bl	8006de4 <global_stdio_init.part.0>
 8006e5c:	e7f2      	b.n	8006e44 <__sinit+0xc>
 8006e5e:	bf00      	nop
 8006e60:	08006da5 	.word	0x08006da5
 8006e64:	20002570 	.word	0x20002570

08006e68 <_fwalk_sglue>:
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	4688      	mov	r8, r1
 8006e70:	4614      	mov	r4, r2
 8006e72:	2600      	movs	r6, #0
 8006e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e78:	f1b9 0901 	subs.w	r9, r9, #1
 8006e7c:	d505      	bpl.n	8006e8a <_fwalk_sglue+0x22>
 8006e7e:	6824      	ldr	r4, [r4, #0]
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	d1f7      	bne.n	8006e74 <_fwalk_sglue+0xc>
 8006e84:	4630      	mov	r0, r6
 8006e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	89ab      	ldrh	r3, [r5, #12]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d907      	bls.n	8006ea0 <_fwalk_sglue+0x38>
 8006e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e94:	3301      	adds	r3, #1
 8006e96:	d003      	beq.n	8006ea0 <_fwalk_sglue+0x38>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c0      	blx	r8
 8006e9e:	4306      	orrs	r6, r0
 8006ea0:	3568      	adds	r5, #104	; 0x68
 8006ea2:	e7e9      	b.n	8006e78 <_fwalk_sglue+0x10>

08006ea4 <__sread>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	f000 f8de 	bl	800706c <_read_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	bfab      	itete	ge
 8006eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006eb8:	181b      	addge	r3, r3, r0
 8006eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ebe:	bfac      	ite	ge
 8006ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ec2:	81a3      	strhlt	r3, [r4, #12]
 8006ec4:	bd10      	pop	{r4, pc}

08006ec6 <__swrite>:
 8006ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	461f      	mov	r7, r3
 8006ecc:	898b      	ldrh	r3, [r1, #12]
 8006ece:	05db      	lsls	r3, r3, #23
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	d505      	bpl.n	8006ee4 <__swrite+0x1e>
 8006ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006edc:	2302      	movs	r3, #2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f000 f8b2 	bl	8007048 <_lseek_r>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efa:	f000 b8d9 	b.w	80070b0 <_write_r>

08006efe <__sseek>:
 8006efe:	b510      	push	{r4, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f06:	f000 f89f 	bl	8007048 <_lseek_r>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	bf15      	itete	ne
 8006f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f1a:	81a3      	strheq	r3, [r4, #12]
 8006f1c:	bf18      	it	ne
 8006f1e:	81a3      	strhne	r3, [r4, #12]
 8006f20:	bd10      	pop	{r4, pc}

08006f22 <__sclose>:
 8006f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f26:	f000 b87f 	b.w	8007028 <_close_r>

08006f2a <memmove>:
 8006f2a:	4288      	cmp	r0, r1
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	eb01 0402 	add.w	r4, r1, r2
 8006f32:	d902      	bls.n	8006f3a <memmove+0x10>
 8006f34:	4284      	cmp	r4, r0
 8006f36:	4623      	mov	r3, r4
 8006f38:	d807      	bhi.n	8006f4a <memmove+0x20>
 8006f3a:	1e43      	subs	r3, r0, #1
 8006f3c:	42a1      	cmp	r1, r4
 8006f3e:	d008      	beq.n	8006f52 <memmove+0x28>
 8006f40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f48:	e7f8      	b.n	8006f3c <memmove+0x12>
 8006f4a:	4402      	add	r2, r0
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	428a      	cmp	r2, r1
 8006f50:	d100      	bne.n	8006f54 <memmove+0x2a>
 8006f52:	bd10      	pop	{r4, pc}
 8006f54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f5c:	e7f7      	b.n	8006f4e <memmove+0x24>

08006f5e <memset>:
 8006f5e:	4402      	add	r2, r0
 8006f60:	4603      	mov	r3, r0
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d100      	bne.n	8006f68 <memset+0xa>
 8006f66:	4770      	bx	lr
 8006f68:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6c:	e7f9      	b.n	8006f62 <memset+0x4>
	...

08006f70 <strtok>:
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <strtok+0x5c>)
 8006f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f74:	681e      	ldr	r6, [r3, #0]
 8006f76:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006f78:	4605      	mov	r5, r0
 8006f7a:	b9fc      	cbnz	r4, 8006fbc <strtok+0x4c>
 8006f7c:	2050      	movs	r0, #80	; 0x50
 8006f7e:	9101      	str	r1, [sp, #4]
 8006f80:	f7ff fe1a 	bl	8006bb8 <malloc>
 8006f84:	9901      	ldr	r1, [sp, #4]
 8006f86:	6470      	str	r0, [r6, #68]	; 0x44
 8006f88:	4602      	mov	r2, r0
 8006f8a:	b920      	cbnz	r0, 8006f96 <strtok+0x26>
 8006f8c:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <strtok+0x60>)
 8006f8e:	4811      	ldr	r0, [pc, #68]	; (8006fd4 <strtok+0x64>)
 8006f90:	215b      	movs	r1, #91	; 0x5b
 8006f92:	f000 f8cd 	bl	8007130 <__assert_func>
 8006f96:	e9c0 4400 	strd	r4, r4, [r0]
 8006f9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006f9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006fa2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006fa6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006faa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006fae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006fb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006fb6:	6184      	str	r4, [r0, #24]
 8006fb8:	7704      	strb	r4, [r0, #28]
 8006fba:	6244      	str	r4, [r0, #36]	; 0x24
 8006fbc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	b002      	add	sp, #8
 8006fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fc8:	f000 b806 	b.w	8006fd8 <__strtok_r>
 8006fcc:	2000007c 	.word	0x2000007c
 8006fd0:	08008265 	.word	0x08008265
 8006fd4:	0800827c 	.word	0x0800827c

08006fd8 <__strtok_r>:
 8006fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fda:	b908      	cbnz	r0, 8006fe0 <__strtok_r+0x8>
 8006fdc:	6810      	ldr	r0, [r2, #0]
 8006fde:	b188      	cbz	r0, 8007004 <__strtok_r+0x2c>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006fe8:	460f      	mov	r7, r1
 8006fea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006fee:	b91e      	cbnz	r6, 8006ff8 <__strtok_r+0x20>
 8006ff0:	b965      	cbnz	r5, 800700c <__strtok_r+0x34>
 8006ff2:	6015      	str	r5, [r2, #0]
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	e005      	b.n	8007004 <__strtok_r+0x2c>
 8006ff8:	42b5      	cmp	r5, r6
 8006ffa:	d1f6      	bne.n	8006fea <__strtok_r+0x12>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <__strtok_r+0xa>
 8007000:	6014      	str	r4, [r2, #0]
 8007002:	7003      	strb	r3, [r0, #0]
 8007004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007006:	461c      	mov	r4, r3
 8007008:	e00c      	b.n	8007024 <__strtok_r+0x4c>
 800700a:	b915      	cbnz	r5, 8007012 <__strtok_r+0x3a>
 800700c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007010:	460e      	mov	r6, r1
 8007012:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007016:	42ab      	cmp	r3, r5
 8007018:	d1f7      	bne.n	800700a <__strtok_r+0x32>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f3      	beq.n	8007006 <__strtok_r+0x2e>
 800701e:	2300      	movs	r3, #0
 8007020:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007024:	6014      	str	r4, [r2, #0]
 8007026:	e7ed      	b.n	8007004 <__strtok_r+0x2c>

08007028 <_close_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_close_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7fa feed 	bl	8001e12 <_close>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_close_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_close_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20002574 	.word	0x20002574

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d07      	ldr	r5, [pc, #28]	; (8007068 <_lseek_r+0x20>)
 800704c:	4604      	mov	r4, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fa ff02 	bl	8001e60 <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20002574 	.word	0x20002574

0800706c <_read_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	; (800708c <_read_r+0x20>)
 8007070:	4604      	mov	r4, r0
 8007072:	4608      	mov	r0, r1
 8007074:	4611      	mov	r1, r2
 8007076:	2200      	movs	r2, #0
 8007078:	602a      	str	r2, [r5, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa feac 	bl	8001dd8 <_read>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_read_r+0x1e>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_read_r+0x1e>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20002574 	.word	0x20002574

08007090 <_sbrk_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_sbrk_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fa feee 	bl	8001e7c <_sbrk>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_sbrk_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_sbrk_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20002574 	.word	0x20002574

080070b0 <_write_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d07      	ldr	r5, [pc, #28]	; (80070d0 <_write_r+0x20>)
 80070b4:	4604      	mov	r4, r0
 80070b6:	4608      	mov	r0, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	2200      	movs	r2, #0
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fa f868 	bl	8001194 <_write>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_write_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_write_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20002574 	.word	0x20002574

080070d4 <__errno>:
 80070d4:	4b01      	ldr	r3, [pc, #4]	; (80070dc <__errno+0x8>)
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	2000007c 	.word	0x2000007c

080070e0 <__libc_init_array>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4d0d      	ldr	r5, [pc, #52]	; (8007118 <__libc_init_array+0x38>)
 80070e4:	4c0d      	ldr	r4, [pc, #52]	; (800711c <__libc_init_array+0x3c>)
 80070e6:	1b64      	subs	r4, r4, r5
 80070e8:	10a4      	asrs	r4, r4, #2
 80070ea:	2600      	movs	r6, #0
 80070ec:	42a6      	cmp	r6, r4
 80070ee:	d109      	bne.n	8007104 <__libc_init_array+0x24>
 80070f0:	4d0b      	ldr	r5, [pc, #44]	; (8007120 <__libc_init_array+0x40>)
 80070f2:	4c0c      	ldr	r4, [pc, #48]	; (8007124 <__libc_init_array+0x44>)
 80070f4:	f000 fd7e 	bl	8007bf4 <_init>
 80070f8:	1b64      	subs	r4, r4, r5
 80070fa:	10a4      	asrs	r4, r4, #2
 80070fc:	2600      	movs	r6, #0
 80070fe:	42a6      	cmp	r6, r4
 8007100:	d105      	bne.n	800710e <__libc_init_array+0x2e>
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f855 3b04 	ldr.w	r3, [r5], #4
 8007108:	4798      	blx	r3
 800710a:	3601      	adds	r6, #1
 800710c:	e7ee      	b.n	80070ec <__libc_init_array+0xc>
 800710e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007112:	4798      	blx	r3
 8007114:	3601      	adds	r6, #1
 8007116:	e7f2      	b.n	80070fe <__libc_init_array+0x1e>
 8007118:	08008350 	.word	0x08008350
 800711c:	08008350 	.word	0x08008350
 8007120:	08008350 	.word	0x08008350
 8007124:	08008354 	.word	0x08008354

08007128 <__retarget_lock_init_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_acquire_recursive>:
 800712a:	4770      	bx	lr

0800712c <__retarget_lock_release_recursive>:
 800712c:	4770      	bx	lr
	...

08007130 <__assert_func>:
 8007130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007132:	4614      	mov	r4, r2
 8007134:	461a      	mov	r2, r3
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <__assert_func+0x2c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4605      	mov	r5, r0
 800713c:	68d8      	ldr	r0, [r3, #12]
 800713e:	b14c      	cbz	r4, 8007154 <__assert_func+0x24>
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <__assert_func+0x30>)
 8007142:	9100      	str	r1, [sp, #0]
 8007144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007148:	4906      	ldr	r1, [pc, #24]	; (8007164 <__assert_func+0x34>)
 800714a:	462b      	mov	r3, r5
 800714c:	f000 fa98 	bl	8007680 <fiprintf>
 8007150:	f000 faa8 	bl	80076a4 <abort>
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <__assert_func+0x38>)
 8007156:	461c      	mov	r4, r3
 8007158:	e7f3      	b.n	8007142 <__assert_func+0x12>
 800715a:	bf00      	nop
 800715c:	2000007c 	.word	0x2000007c
 8007160:	080082d6 	.word	0x080082d6
 8007164:	080082e3 	.word	0x080082e3
 8007168:	08008311 	.word	0x08008311

0800716c <_free_r>:
 800716c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800716e:	2900      	cmp	r1, #0
 8007170:	d044      	beq.n	80071fc <_free_r+0x90>
 8007172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007176:	9001      	str	r0, [sp, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f1a1 0404 	sub.w	r4, r1, #4
 800717e:	bfb8      	it	lt
 8007180:	18e4      	addlt	r4, r4, r3
 8007182:	f7ff fdc1 	bl	8006d08 <__malloc_lock>
 8007186:	4a1e      	ldr	r2, [pc, #120]	; (8007200 <_free_r+0x94>)
 8007188:	9801      	ldr	r0, [sp, #4]
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	b933      	cbnz	r3, 800719c <_free_r+0x30>
 800718e:	6063      	str	r3, [r4, #4]
 8007190:	6014      	str	r4, [r2, #0]
 8007192:	b003      	add	sp, #12
 8007194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007198:	f7ff bdbc 	b.w	8006d14 <__malloc_unlock>
 800719c:	42a3      	cmp	r3, r4
 800719e:	d908      	bls.n	80071b2 <_free_r+0x46>
 80071a0:	6825      	ldr	r5, [r4, #0]
 80071a2:	1961      	adds	r1, r4, r5
 80071a4:	428b      	cmp	r3, r1
 80071a6:	bf01      	itttt	eq
 80071a8:	6819      	ldreq	r1, [r3, #0]
 80071aa:	685b      	ldreq	r3, [r3, #4]
 80071ac:	1949      	addeq	r1, r1, r5
 80071ae:	6021      	streq	r1, [r4, #0]
 80071b0:	e7ed      	b.n	800718e <_free_r+0x22>
 80071b2:	461a      	mov	r2, r3
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	b10b      	cbz	r3, 80071bc <_free_r+0x50>
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d9fa      	bls.n	80071b2 <_free_r+0x46>
 80071bc:	6811      	ldr	r1, [r2, #0]
 80071be:	1855      	adds	r5, r2, r1
 80071c0:	42a5      	cmp	r5, r4
 80071c2:	d10b      	bne.n	80071dc <_free_r+0x70>
 80071c4:	6824      	ldr	r4, [r4, #0]
 80071c6:	4421      	add	r1, r4
 80071c8:	1854      	adds	r4, r2, r1
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	6011      	str	r1, [r2, #0]
 80071ce:	d1e0      	bne.n	8007192 <_free_r+0x26>
 80071d0:	681c      	ldr	r4, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	6053      	str	r3, [r2, #4]
 80071d6:	440c      	add	r4, r1
 80071d8:	6014      	str	r4, [r2, #0]
 80071da:	e7da      	b.n	8007192 <_free_r+0x26>
 80071dc:	d902      	bls.n	80071e4 <_free_r+0x78>
 80071de:	230c      	movs	r3, #12
 80071e0:	6003      	str	r3, [r0, #0]
 80071e2:	e7d6      	b.n	8007192 <_free_r+0x26>
 80071e4:	6825      	ldr	r5, [r4, #0]
 80071e6:	1961      	adds	r1, r4, r5
 80071e8:	428b      	cmp	r3, r1
 80071ea:	bf04      	itt	eq
 80071ec:	6819      	ldreq	r1, [r3, #0]
 80071ee:	685b      	ldreq	r3, [r3, #4]
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	bf04      	itt	eq
 80071f4:	1949      	addeq	r1, r1, r5
 80071f6:	6021      	streq	r1, [r4, #0]
 80071f8:	6054      	str	r4, [r2, #4]
 80071fa:	e7ca      	b.n	8007192 <_free_r+0x26>
 80071fc:	b003      	add	sp, #12
 80071fe:	bd30      	pop	{r4, r5, pc}
 8007200:	20002430 	.word	0x20002430

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4699      	mov	r9, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007214:	4293      	cmp	r3, r2
 8007216:	bfb8      	it	lt
 8007218:	4613      	movlt	r3, r2
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007220:	4607      	mov	r7, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc26      	bgt.n	800729a <_printf_common+0x96>
 800724c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007250:	1e13      	subs	r3, r2, #0
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42b      	bmi.n	80072b4 <_printf_common+0xb0>
 800725c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d01e      	beq.n	80072a8 <_printf_common+0xa4>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	f003 0306 	and.w	r3, r3, #6
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf02      	ittt	eq
 8007276:	68e5      	ldreq	r5, [r4, #12]
 8007278:	6833      	ldreq	r3, [r6, #0]
 800727a:	1aed      	subeq	r5, r5, r3
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	bf0c      	ite	eq
 8007280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007284:	2500      	movne	r5, #0
 8007286:	4293      	cmp	r3, r2
 8007288:	bfc4      	itt	gt
 800728a:	1a9b      	subgt	r3, r3, r2
 800728c:	18ed      	addgt	r5, r5, r3
 800728e:	2600      	movs	r6, #0
 8007290:	341a      	adds	r4, #26
 8007292:	42b5      	cmp	r5, r6
 8007294:	d11a      	bne.n	80072cc <_printf_common+0xc8>
 8007296:	2000      	movs	r0, #0
 8007298:	e008      	b.n	80072ac <_printf_common+0xa8>
 800729a:	2301      	movs	r3, #1
 800729c:	4652      	mov	r2, sl
 800729e:	4649      	mov	r1, r9
 80072a0:	4638      	mov	r0, r7
 80072a2:	47c0      	blx	r8
 80072a4:	3001      	adds	r0, #1
 80072a6:	d103      	bne.n	80072b0 <_printf_common+0xac>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	3501      	adds	r5, #1
 80072b2:	e7c6      	b.n	8007242 <_printf_common+0x3e>
 80072b4:	18e1      	adds	r1, r4, r3
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	2030      	movs	r0, #48	; 0x30
 80072ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072be:	4422      	add	r2, r4
 80072c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c8:	3302      	adds	r3, #2
 80072ca:	e7c7      	b.n	800725c <_printf_common+0x58>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4622      	mov	r2, r4
 80072d0:	4649      	mov	r1, r9
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c0      	blx	r8
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0e6      	beq.n	80072a8 <_printf_common+0xa4>
 80072da:	3601      	adds	r6, #1
 80072dc:	e7d9      	b.n	8007292 <_printf_common+0x8e>
	...

080072e0 <_printf_i>:
 80072e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	7e0f      	ldrb	r7, [r1, #24]
 80072e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072e8:	2f78      	cmp	r7, #120	; 0x78
 80072ea:	4691      	mov	r9, r2
 80072ec:	4680      	mov	r8, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	469a      	mov	sl, r3
 80072f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072f6:	d807      	bhi.n	8007308 <_printf_i+0x28>
 80072f8:	2f62      	cmp	r7, #98	; 0x62
 80072fa:	d80a      	bhi.n	8007312 <_printf_i+0x32>
 80072fc:	2f00      	cmp	r7, #0
 80072fe:	f000 80d4 	beq.w	80074aa <_printf_i+0x1ca>
 8007302:	2f58      	cmp	r7, #88	; 0x58
 8007304:	f000 80c0 	beq.w	8007488 <_printf_i+0x1a8>
 8007308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800730c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007310:	e03a      	b.n	8007388 <_printf_i+0xa8>
 8007312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007316:	2b15      	cmp	r3, #21
 8007318:	d8f6      	bhi.n	8007308 <_printf_i+0x28>
 800731a:	a101      	add	r1, pc, #4	; (adr r1, 8007320 <_printf_i+0x40>)
 800731c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007320:	08007379 	.word	0x08007379
 8007324:	0800738d 	.word	0x0800738d
 8007328:	08007309 	.word	0x08007309
 800732c:	08007309 	.word	0x08007309
 8007330:	08007309 	.word	0x08007309
 8007334:	08007309 	.word	0x08007309
 8007338:	0800738d 	.word	0x0800738d
 800733c:	08007309 	.word	0x08007309
 8007340:	08007309 	.word	0x08007309
 8007344:	08007309 	.word	0x08007309
 8007348:	08007309 	.word	0x08007309
 800734c:	08007491 	.word	0x08007491
 8007350:	080073b9 	.word	0x080073b9
 8007354:	0800744b 	.word	0x0800744b
 8007358:	08007309 	.word	0x08007309
 800735c:	08007309 	.word	0x08007309
 8007360:	080074b3 	.word	0x080074b3
 8007364:	08007309 	.word	0x08007309
 8007368:	080073b9 	.word	0x080073b9
 800736c:	08007309 	.word	0x08007309
 8007370:	08007309 	.word	0x08007309
 8007374:	08007453 	.word	0x08007453
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	602a      	str	r2, [r5, #0]
 8007380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007388:	2301      	movs	r3, #1
 800738a:	e09f      	b.n	80074cc <_printf_i+0x1ec>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	0607      	lsls	r7, r0, #24
 8007392:	f103 0104 	add.w	r1, r3, #4
 8007396:	6029      	str	r1, [r5, #0]
 8007398:	d501      	bpl.n	800739e <_printf_i+0xbe>
 800739a:	681e      	ldr	r6, [r3, #0]
 800739c:	e003      	b.n	80073a6 <_printf_i+0xc6>
 800739e:	0646      	lsls	r6, r0, #25
 80073a0:	d5fb      	bpl.n	800739a <_printf_i+0xba>
 80073a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	da03      	bge.n	80073b2 <_printf_i+0xd2>
 80073aa:	232d      	movs	r3, #45	; 0x2d
 80073ac:	4276      	negs	r6, r6
 80073ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b2:	485a      	ldr	r0, [pc, #360]	; (800751c <_printf_i+0x23c>)
 80073b4:	230a      	movs	r3, #10
 80073b6:	e012      	b.n	80073de <_printf_i+0xfe>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	1d19      	adds	r1, r3, #4
 80073be:	6029      	str	r1, [r5, #0]
 80073c0:	0605      	lsls	r5, r0, #24
 80073c2:	d501      	bpl.n	80073c8 <_printf_i+0xe8>
 80073c4:	681e      	ldr	r6, [r3, #0]
 80073c6:	e002      	b.n	80073ce <_printf_i+0xee>
 80073c8:	0641      	lsls	r1, r0, #25
 80073ca:	d5fb      	bpl.n	80073c4 <_printf_i+0xe4>
 80073cc:	881e      	ldrh	r6, [r3, #0]
 80073ce:	4853      	ldr	r0, [pc, #332]	; (800751c <_printf_i+0x23c>)
 80073d0:	2f6f      	cmp	r7, #111	; 0x6f
 80073d2:	bf0c      	ite	eq
 80073d4:	2308      	moveq	r3, #8
 80073d6:	230a      	movne	r3, #10
 80073d8:	2100      	movs	r1, #0
 80073da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073de:	6865      	ldr	r5, [r4, #4]
 80073e0:	60a5      	str	r5, [r4, #8]
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	bfa2      	ittt	ge
 80073e6:	6821      	ldrge	r1, [r4, #0]
 80073e8:	f021 0104 	bicge.w	r1, r1, #4
 80073ec:	6021      	strge	r1, [r4, #0]
 80073ee:	b90e      	cbnz	r6, 80073f4 <_printf_i+0x114>
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	d04b      	beq.n	800748c <_printf_i+0x1ac>
 80073f4:	4615      	mov	r5, r2
 80073f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073fa:	fb03 6711 	mls	r7, r3, r1, r6
 80073fe:	5dc7      	ldrb	r7, [r0, r7]
 8007400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007404:	4637      	mov	r7, r6
 8007406:	42bb      	cmp	r3, r7
 8007408:	460e      	mov	r6, r1
 800740a:	d9f4      	bls.n	80073f6 <_printf_i+0x116>
 800740c:	2b08      	cmp	r3, #8
 800740e:	d10b      	bne.n	8007428 <_printf_i+0x148>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07de      	lsls	r6, r3, #31
 8007414:	d508      	bpl.n	8007428 <_printf_i+0x148>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4299      	cmp	r1, r3
 800741c:	bfde      	ittt	le
 800741e:	2330      	movle	r3, #48	; 0x30
 8007420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007428:	1b52      	subs	r2, r2, r5
 800742a:	6122      	str	r2, [r4, #16]
 800742c:	f8cd a000 	str.w	sl, [sp]
 8007430:	464b      	mov	r3, r9
 8007432:	aa03      	add	r2, sp, #12
 8007434:	4621      	mov	r1, r4
 8007436:	4640      	mov	r0, r8
 8007438:	f7ff fee4 	bl	8007204 <_printf_common>
 800743c:	3001      	adds	r0, #1
 800743e:	d14a      	bne.n	80074d6 <_printf_i+0x1f6>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b004      	add	sp, #16
 8007446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	4833      	ldr	r0, [pc, #204]	; (8007520 <_printf_i+0x240>)
 8007454:	2778      	movs	r7, #120	; 0x78
 8007456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	6829      	ldr	r1, [r5, #0]
 800745e:	061f      	lsls	r7, r3, #24
 8007460:	f851 6b04 	ldr.w	r6, [r1], #4
 8007464:	d402      	bmi.n	800746c <_printf_i+0x18c>
 8007466:	065f      	lsls	r7, r3, #25
 8007468:	bf48      	it	mi
 800746a:	b2b6      	uxthmi	r6, r6
 800746c:	07df      	lsls	r7, r3, #31
 800746e:	bf48      	it	mi
 8007470:	f043 0320 	orrmi.w	r3, r3, #32
 8007474:	6029      	str	r1, [r5, #0]
 8007476:	bf48      	it	mi
 8007478:	6023      	strmi	r3, [r4, #0]
 800747a:	b91e      	cbnz	r6, 8007484 <_printf_i+0x1a4>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	f023 0320 	bic.w	r3, r3, #32
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	2310      	movs	r3, #16
 8007486:	e7a7      	b.n	80073d8 <_printf_i+0xf8>
 8007488:	4824      	ldr	r0, [pc, #144]	; (800751c <_printf_i+0x23c>)
 800748a:	e7e4      	b.n	8007456 <_printf_i+0x176>
 800748c:	4615      	mov	r5, r2
 800748e:	e7bd      	b.n	800740c <_printf_i+0x12c>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6826      	ldr	r6, [r4, #0]
 8007494:	6961      	ldr	r1, [r4, #20]
 8007496:	1d18      	adds	r0, r3, #4
 8007498:	6028      	str	r0, [r5, #0]
 800749a:	0635      	lsls	r5, r6, #24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0x1c4>
 80074a0:	6019      	str	r1, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0x1ca>
 80074a4:	0670      	lsls	r0, r6, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0x1c0>
 80074a8:	8019      	strh	r1, [r3, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	4615      	mov	r5, r2
 80074b0:	e7bc      	b.n	800742c <_printf_i+0x14c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	1d1a      	adds	r2, r3, #4
 80074b6:	602a      	str	r2, [r5, #0]
 80074b8:	681d      	ldr	r5, [r3, #0]
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	2100      	movs	r1, #0
 80074be:	4628      	mov	r0, r5
 80074c0:	f7f8 fea6 	bl	8000210 <memchr>
 80074c4:	b108      	cbz	r0, 80074ca <_printf_i+0x1ea>
 80074c6:	1b40      	subs	r0, r0, r5
 80074c8:	6060      	str	r0, [r4, #4]
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	2300      	movs	r3, #0
 80074d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d4:	e7aa      	b.n	800742c <_printf_i+0x14c>
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	462a      	mov	r2, r5
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d0ad      	beq.n	8007440 <_printf_i+0x160>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	d413      	bmi.n	8007512 <_printf_i+0x232>
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	4298      	cmp	r0, r3
 80074f0:	bfb8      	it	lt
 80074f2:	4618      	movlt	r0, r3
 80074f4:	e7a6      	b.n	8007444 <_printf_i+0x164>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d09d      	beq.n	8007440 <_printf_i+0x160>
 8007504:	3501      	adds	r5, #1
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	9903      	ldr	r1, [sp, #12]
 800750a:	1a5b      	subs	r3, r3, r1
 800750c:	42ab      	cmp	r3, r5
 800750e:	dcf2      	bgt.n	80074f6 <_printf_i+0x216>
 8007510:	e7eb      	b.n	80074ea <_printf_i+0x20a>
 8007512:	2500      	movs	r5, #0
 8007514:	f104 0619 	add.w	r6, r4, #25
 8007518:	e7f5      	b.n	8007506 <_printf_i+0x226>
 800751a:	bf00      	nop
 800751c:	08008312 	.word	0x08008312
 8007520:	08008323 	.word	0x08008323

08007524 <__sflush_r>:
 8007524:	898a      	ldrh	r2, [r1, #12]
 8007526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752a:	4605      	mov	r5, r0
 800752c:	0710      	lsls	r0, r2, #28
 800752e:	460c      	mov	r4, r1
 8007530:	d458      	bmi.n	80075e4 <__sflush_r+0xc0>
 8007532:	684b      	ldr	r3, [r1, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dc05      	bgt.n	8007544 <__sflush_r+0x20>
 8007538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	dc02      	bgt.n	8007544 <__sflush_r+0x20>
 800753e:	2000      	movs	r0, #0
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007546:	2e00      	cmp	r6, #0
 8007548:	d0f9      	beq.n	800753e <__sflush_r+0x1a>
 800754a:	2300      	movs	r3, #0
 800754c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007550:	682f      	ldr	r7, [r5, #0]
 8007552:	6a21      	ldr	r1, [r4, #32]
 8007554:	602b      	str	r3, [r5, #0]
 8007556:	d032      	beq.n	80075be <__sflush_r+0x9a>
 8007558:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	075a      	lsls	r2, r3, #29
 800755e:	d505      	bpl.n	800756c <__sflush_r+0x48>
 8007560:	6863      	ldr	r3, [r4, #4]
 8007562:	1ac0      	subs	r0, r0, r3
 8007564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007566:	b10b      	cbz	r3, 800756c <__sflush_r+0x48>
 8007568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800756a:	1ac0      	subs	r0, r0, r3
 800756c:	2300      	movs	r3, #0
 800756e:	4602      	mov	r2, r0
 8007570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007572:	6a21      	ldr	r1, [r4, #32]
 8007574:	4628      	mov	r0, r5
 8007576:	47b0      	blx	r6
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	d106      	bne.n	800758c <__sflush_r+0x68>
 800757e:	6829      	ldr	r1, [r5, #0]
 8007580:	291d      	cmp	r1, #29
 8007582:	d82b      	bhi.n	80075dc <__sflush_r+0xb8>
 8007584:	4a29      	ldr	r2, [pc, #164]	; (800762c <__sflush_r+0x108>)
 8007586:	410a      	asrs	r2, r1
 8007588:	07d6      	lsls	r6, r2, #31
 800758a:	d427      	bmi.n	80075dc <__sflush_r+0xb8>
 800758c:	2200      	movs	r2, #0
 800758e:	6062      	str	r2, [r4, #4]
 8007590:	04d9      	lsls	r1, r3, #19
 8007592:	6922      	ldr	r2, [r4, #16]
 8007594:	6022      	str	r2, [r4, #0]
 8007596:	d504      	bpl.n	80075a2 <__sflush_r+0x7e>
 8007598:	1c42      	adds	r2, r0, #1
 800759a:	d101      	bne.n	80075a0 <__sflush_r+0x7c>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b903      	cbnz	r3, 80075a2 <__sflush_r+0x7e>
 80075a0:	6560      	str	r0, [r4, #84]	; 0x54
 80075a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075a4:	602f      	str	r7, [r5, #0]
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d0c9      	beq.n	800753e <__sflush_r+0x1a>
 80075aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d002      	beq.n	80075b8 <__sflush_r+0x94>
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7ff fdda 	bl	800716c <_free_r>
 80075b8:	2000      	movs	r0, #0
 80075ba:	6360      	str	r0, [r4, #52]	; 0x34
 80075bc:	e7c0      	b.n	8007540 <__sflush_r+0x1c>
 80075be:	2301      	movs	r3, #1
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b0      	blx	r6
 80075c4:	1c41      	adds	r1, r0, #1
 80075c6:	d1c8      	bne.n	800755a <__sflush_r+0x36>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0c5      	beq.n	800755a <__sflush_r+0x36>
 80075ce:	2b1d      	cmp	r3, #29
 80075d0:	d001      	beq.n	80075d6 <__sflush_r+0xb2>
 80075d2:	2b16      	cmp	r3, #22
 80075d4:	d101      	bne.n	80075da <__sflush_r+0xb6>
 80075d6:	602f      	str	r7, [r5, #0]
 80075d8:	e7b1      	b.n	800753e <__sflush_r+0x1a>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	e7ad      	b.n	8007540 <__sflush_r+0x1c>
 80075e4:	690f      	ldr	r7, [r1, #16]
 80075e6:	2f00      	cmp	r7, #0
 80075e8:	d0a9      	beq.n	800753e <__sflush_r+0x1a>
 80075ea:	0793      	lsls	r3, r2, #30
 80075ec:	680e      	ldr	r6, [r1, #0]
 80075ee:	bf08      	it	eq
 80075f0:	694b      	ldreq	r3, [r1, #20]
 80075f2:	600f      	str	r7, [r1, #0]
 80075f4:	bf18      	it	ne
 80075f6:	2300      	movne	r3, #0
 80075f8:	eba6 0807 	sub.w	r8, r6, r7
 80075fc:	608b      	str	r3, [r1, #8]
 80075fe:	f1b8 0f00 	cmp.w	r8, #0
 8007602:	dd9c      	ble.n	800753e <__sflush_r+0x1a>
 8007604:	6a21      	ldr	r1, [r4, #32]
 8007606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007608:	4643      	mov	r3, r8
 800760a:	463a      	mov	r2, r7
 800760c:	4628      	mov	r0, r5
 800760e:	47b0      	blx	r6
 8007610:	2800      	cmp	r0, #0
 8007612:	dc06      	bgt.n	8007622 <__sflush_r+0xfe>
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e78e      	b.n	8007540 <__sflush_r+0x1c>
 8007622:	4407      	add	r7, r0
 8007624:	eba8 0800 	sub.w	r8, r8, r0
 8007628:	e7e9      	b.n	80075fe <__sflush_r+0xda>
 800762a:	bf00      	nop
 800762c:	dfbffffe 	.word	0xdfbffffe

08007630 <_fflush_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	690b      	ldr	r3, [r1, #16]
 8007634:	4605      	mov	r5, r0
 8007636:	460c      	mov	r4, r1
 8007638:	b913      	cbnz	r3, 8007640 <_fflush_r+0x10>
 800763a:	2500      	movs	r5, #0
 800763c:	4628      	mov	r0, r5
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	b118      	cbz	r0, 800764a <_fflush_r+0x1a>
 8007642:	6a03      	ldr	r3, [r0, #32]
 8007644:	b90b      	cbnz	r3, 800764a <_fflush_r+0x1a>
 8007646:	f7ff fbf7 	bl	8006e38 <__sinit>
 800764a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f3      	beq.n	800763a <_fflush_r+0xa>
 8007652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007654:	07d0      	lsls	r0, r2, #31
 8007656:	d404      	bmi.n	8007662 <_fflush_r+0x32>
 8007658:	0599      	lsls	r1, r3, #22
 800765a:	d402      	bmi.n	8007662 <_fflush_r+0x32>
 800765c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800765e:	f7ff fd64 	bl	800712a <__retarget_lock_acquire_recursive>
 8007662:	4628      	mov	r0, r5
 8007664:	4621      	mov	r1, r4
 8007666:	f7ff ff5d 	bl	8007524 <__sflush_r>
 800766a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800766c:	07da      	lsls	r2, r3, #31
 800766e:	4605      	mov	r5, r0
 8007670:	d4e4      	bmi.n	800763c <_fflush_r+0xc>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	059b      	lsls	r3, r3, #22
 8007676:	d4e1      	bmi.n	800763c <_fflush_r+0xc>
 8007678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800767a:	f7ff fd57 	bl	800712c <__retarget_lock_release_recursive>
 800767e:	e7dd      	b.n	800763c <_fflush_r+0xc>

08007680 <fiprintf>:
 8007680:	b40e      	push	{r1, r2, r3}
 8007682:	b503      	push	{r0, r1, lr}
 8007684:	4601      	mov	r1, r0
 8007686:	ab03      	add	r3, sp, #12
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <fiprintf+0x20>)
 800768a:	f853 2b04 	ldr.w	r2, [r3], #4
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	f000 f837 	bl	8007704 <_vfiprintf_r>
 8007696:	b002      	add	sp, #8
 8007698:	f85d eb04 	ldr.w	lr, [sp], #4
 800769c:	b003      	add	sp, #12
 800769e:	4770      	bx	lr
 80076a0:	2000007c 	.word	0x2000007c

080076a4 <abort>:
 80076a4:	b508      	push	{r3, lr}
 80076a6:	2006      	movs	r0, #6
 80076a8:	f000 fa04 	bl	8007ab4 <raise>
 80076ac:	2001      	movs	r0, #1
 80076ae:	f7fa fb89 	bl	8001dc4 <_exit>

080076b2 <__sfputc_r>:
 80076b2:	6893      	ldr	r3, [r2, #8]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	b410      	push	{r4}
 80076ba:	6093      	str	r3, [r2, #8]
 80076bc:	da08      	bge.n	80076d0 <__sfputc_r+0x1e>
 80076be:	6994      	ldr	r4, [r2, #24]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	db01      	blt.n	80076c8 <__sfputc_r+0x16>
 80076c4:	290a      	cmp	r1, #10
 80076c6:	d103      	bne.n	80076d0 <__sfputc_r+0x1e>
 80076c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076cc:	f000 b934 	b.w	8007938 <__swbuf_r>
 80076d0:	6813      	ldr	r3, [r2, #0]
 80076d2:	1c58      	adds	r0, r3, #1
 80076d4:	6010      	str	r0, [r2, #0]
 80076d6:	7019      	strb	r1, [r3, #0]
 80076d8:	4608      	mov	r0, r1
 80076da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <__sfputs_r>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	4606      	mov	r6, r0
 80076e4:	460f      	mov	r7, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	18d5      	adds	r5, r2, r3
 80076ea:	42ac      	cmp	r4, r5
 80076ec:	d101      	bne.n	80076f2 <__sfputs_r+0x12>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e007      	b.n	8007702 <__sfputs_r+0x22>
 80076f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f6:	463a      	mov	r2, r7
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff ffda 	bl	80076b2 <__sfputc_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d1f3      	bne.n	80076ea <__sfputs_r+0xa>
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007704 <_vfiprintf_r>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	460d      	mov	r5, r1
 800770a:	b09d      	sub	sp, #116	; 0x74
 800770c:	4614      	mov	r4, r2
 800770e:	4698      	mov	r8, r3
 8007710:	4606      	mov	r6, r0
 8007712:	b118      	cbz	r0, 800771c <_vfiprintf_r+0x18>
 8007714:	6a03      	ldr	r3, [r0, #32]
 8007716:	b90b      	cbnz	r3, 800771c <_vfiprintf_r+0x18>
 8007718:	f7ff fb8e 	bl	8006e38 <__sinit>
 800771c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800771e:	07d9      	lsls	r1, r3, #31
 8007720:	d405      	bmi.n	800772e <_vfiprintf_r+0x2a>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	059a      	lsls	r2, r3, #22
 8007726:	d402      	bmi.n	800772e <_vfiprintf_r+0x2a>
 8007728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772a:	f7ff fcfe 	bl	800712a <__retarget_lock_acquire_recursive>
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	071b      	lsls	r3, r3, #28
 8007732:	d501      	bpl.n	8007738 <_vfiprintf_r+0x34>
 8007734:	692b      	ldr	r3, [r5, #16]
 8007736:	b99b      	cbnz	r3, 8007760 <_vfiprintf_r+0x5c>
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f000 f93a 	bl	80079b4 <__swsetup_r>
 8007740:	b170      	cbz	r0, 8007760 <_vfiprintf_r+0x5c>
 8007742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007744:	07dc      	lsls	r4, r3, #31
 8007746:	d504      	bpl.n	8007752 <_vfiprintf_r+0x4e>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b01d      	add	sp, #116	; 0x74
 800774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	0598      	lsls	r0, r3, #22
 8007756:	d4f7      	bmi.n	8007748 <_vfiprintf_r+0x44>
 8007758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800775a:	f7ff fce7 	bl	800712c <__retarget_lock_release_recursive>
 800775e:	e7f3      	b.n	8007748 <_vfiprintf_r+0x44>
 8007760:	2300      	movs	r3, #0
 8007762:	9309      	str	r3, [sp, #36]	; 0x24
 8007764:	2320      	movs	r3, #32
 8007766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800776a:	f8cd 800c 	str.w	r8, [sp, #12]
 800776e:	2330      	movs	r3, #48	; 0x30
 8007770:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007924 <_vfiprintf_r+0x220>
 8007774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007778:	f04f 0901 	mov.w	r9, #1
 800777c:	4623      	mov	r3, r4
 800777e:	469a      	mov	sl, r3
 8007780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007784:	b10a      	cbz	r2, 800778a <_vfiprintf_r+0x86>
 8007786:	2a25      	cmp	r2, #37	; 0x25
 8007788:	d1f9      	bne.n	800777e <_vfiprintf_r+0x7a>
 800778a:	ebba 0b04 	subs.w	fp, sl, r4
 800778e:	d00b      	beq.n	80077a8 <_vfiprintf_r+0xa4>
 8007790:	465b      	mov	r3, fp
 8007792:	4622      	mov	r2, r4
 8007794:	4629      	mov	r1, r5
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff ffa2 	bl	80076e0 <__sfputs_r>
 800779c:	3001      	adds	r0, #1
 800779e:	f000 80a9 	beq.w	80078f4 <_vfiprintf_r+0x1f0>
 80077a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a4:	445a      	add	r2, fp
 80077a6:	9209      	str	r2, [sp, #36]	; 0x24
 80077a8:	f89a 3000 	ldrb.w	r3, [sl]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80a1 	beq.w	80078f4 <_vfiprintf_r+0x1f0>
 80077b2:	2300      	movs	r3, #0
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295
 80077b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077bc:	f10a 0a01 	add.w	sl, sl, #1
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	9307      	str	r3, [sp, #28]
 80077c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077c8:	931a      	str	r3, [sp, #104]	; 0x68
 80077ca:	4654      	mov	r4, sl
 80077cc:	2205      	movs	r2, #5
 80077ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d2:	4854      	ldr	r0, [pc, #336]	; (8007924 <_vfiprintf_r+0x220>)
 80077d4:	f7f8 fd1c 	bl	8000210 <memchr>
 80077d8:	9a04      	ldr	r2, [sp, #16]
 80077da:	b9d8      	cbnz	r0, 8007814 <_vfiprintf_r+0x110>
 80077dc:	06d1      	lsls	r1, r2, #27
 80077de:	bf44      	itt	mi
 80077e0:	2320      	movmi	r3, #32
 80077e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e6:	0713      	lsls	r3, r2, #28
 80077e8:	bf44      	itt	mi
 80077ea:	232b      	movmi	r3, #43	; 0x2b
 80077ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f0:	f89a 3000 	ldrb.w	r3, [sl]
 80077f4:	2b2a      	cmp	r3, #42	; 0x2a
 80077f6:	d015      	beq.n	8007824 <_vfiprintf_r+0x120>
 80077f8:	9a07      	ldr	r2, [sp, #28]
 80077fa:	4654      	mov	r4, sl
 80077fc:	2000      	movs	r0, #0
 80077fe:	f04f 0c0a 	mov.w	ip, #10
 8007802:	4621      	mov	r1, r4
 8007804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007808:	3b30      	subs	r3, #48	; 0x30
 800780a:	2b09      	cmp	r3, #9
 800780c:	d94d      	bls.n	80078aa <_vfiprintf_r+0x1a6>
 800780e:	b1b0      	cbz	r0, 800783e <_vfiprintf_r+0x13a>
 8007810:	9207      	str	r2, [sp, #28]
 8007812:	e014      	b.n	800783e <_vfiprintf_r+0x13a>
 8007814:	eba0 0308 	sub.w	r3, r0, r8
 8007818:	fa09 f303 	lsl.w	r3, r9, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	9304      	str	r3, [sp, #16]
 8007820:	46a2      	mov	sl, r4
 8007822:	e7d2      	b.n	80077ca <_vfiprintf_r+0xc6>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	1d19      	adds	r1, r3, #4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	9103      	str	r1, [sp, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	bfbb      	ittet	lt
 8007830:	425b      	neglt	r3, r3
 8007832:	f042 0202 	orrlt.w	r2, r2, #2
 8007836:	9307      	strge	r3, [sp, #28]
 8007838:	9307      	strlt	r3, [sp, #28]
 800783a:	bfb8      	it	lt
 800783c:	9204      	strlt	r2, [sp, #16]
 800783e:	7823      	ldrb	r3, [r4, #0]
 8007840:	2b2e      	cmp	r3, #46	; 0x2e
 8007842:	d10c      	bne.n	800785e <_vfiprintf_r+0x15a>
 8007844:	7863      	ldrb	r3, [r4, #1]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d134      	bne.n	80078b4 <_vfiprintf_r+0x1b0>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	1d1a      	adds	r2, r3, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	9203      	str	r2, [sp, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfb8      	it	lt
 8007856:	f04f 33ff 	movlt.w	r3, #4294967295
 800785a:	3402      	adds	r4, #2
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007934 <_vfiprintf_r+0x230>
 8007862:	7821      	ldrb	r1, [r4, #0]
 8007864:	2203      	movs	r2, #3
 8007866:	4650      	mov	r0, sl
 8007868:	f7f8 fcd2 	bl	8000210 <memchr>
 800786c:	b138      	cbz	r0, 800787e <_vfiprintf_r+0x17a>
 800786e:	9b04      	ldr	r3, [sp, #16]
 8007870:	eba0 000a 	sub.w	r0, r0, sl
 8007874:	2240      	movs	r2, #64	; 0x40
 8007876:	4082      	lsls	r2, r0
 8007878:	4313      	orrs	r3, r2
 800787a:	3401      	adds	r4, #1
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007882:	4829      	ldr	r0, [pc, #164]	; (8007928 <_vfiprintf_r+0x224>)
 8007884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007888:	2206      	movs	r2, #6
 800788a:	f7f8 fcc1 	bl	8000210 <memchr>
 800788e:	2800      	cmp	r0, #0
 8007890:	d03f      	beq.n	8007912 <_vfiprintf_r+0x20e>
 8007892:	4b26      	ldr	r3, [pc, #152]	; (800792c <_vfiprintf_r+0x228>)
 8007894:	bb1b      	cbnz	r3, 80078de <_vfiprintf_r+0x1da>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	3307      	adds	r3, #7
 800789a:	f023 0307 	bic.w	r3, r3, #7
 800789e:	3308      	adds	r3, #8
 80078a0:	9303      	str	r3, [sp, #12]
 80078a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a4:	443b      	add	r3, r7
 80078a6:	9309      	str	r3, [sp, #36]	; 0x24
 80078a8:	e768      	b.n	800777c <_vfiprintf_r+0x78>
 80078aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ae:	460c      	mov	r4, r1
 80078b0:	2001      	movs	r0, #1
 80078b2:	e7a6      	b.n	8007802 <_vfiprintf_r+0xfe>
 80078b4:	2300      	movs	r3, #0
 80078b6:	3401      	adds	r4, #1
 80078b8:	9305      	str	r3, [sp, #20]
 80078ba:	4619      	mov	r1, r3
 80078bc:	f04f 0c0a 	mov.w	ip, #10
 80078c0:	4620      	mov	r0, r4
 80078c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c6:	3a30      	subs	r2, #48	; 0x30
 80078c8:	2a09      	cmp	r2, #9
 80078ca:	d903      	bls.n	80078d4 <_vfiprintf_r+0x1d0>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0c6      	beq.n	800785e <_vfiprintf_r+0x15a>
 80078d0:	9105      	str	r1, [sp, #20]
 80078d2:	e7c4      	b.n	800785e <_vfiprintf_r+0x15a>
 80078d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078d8:	4604      	mov	r4, r0
 80078da:	2301      	movs	r3, #1
 80078dc:	e7f0      	b.n	80078c0 <_vfiprintf_r+0x1bc>
 80078de:	ab03      	add	r3, sp, #12
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	462a      	mov	r2, r5
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <_vfiprintf_r+0x22c>)
 80078e6:	a904      	add	r1, sp, #16
 80078e8:	4630      	mov	r0, r6
 80078ea:	f3af 8000 	nop.w
 80078ee:	4607      	mov	r7, r0
 80078f0:	1c78      	adds	r0, r7, #1
 80078f2:	d1d6      	bne.n	80078a2 <_vfiprintf_r+0x19e>
 80078f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f6:	07d9      	lsls	r1, r3, #31
 80078f8:	d405      	bmi.n	8007906 <_vfiprintf_r+0x202>
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	059a      	lsls	r2, r3, #22
 80078fe:	d402      	bmi.n	8007906 <_vfiprintf_r+0x202>
 8007900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007902:	f7ff fc13 	bl	800712c <__retarget_lock_release_recursive>
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	065b      	lsls	r3, r3, #25
 800790a:	f53f af1d 	bmi.w	8007748 <_vfiprintf_r+0x44>
 800790e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007910:	e71c      	b.n	800774c <_vfiprintf_r+0x48>
 8007912:	ab03      	add	r3, sp, #12
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	462a      	mov	r2, r5
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <_vfiprintf_r+0x22c>)
 800791a:	a904      	add	r1, sp, #16
 800791c:	4630      	mov	r0, r6
 800791e:	f7ff fcdf 	bl	80072e0 <_printf_i>
 8007922:	e7e4      	b.n	80078ee <_vfiprintf_r+0x1ea>
 8007924:	08008334 	.word	0x08008334
 8007928:	0800833e 	.word	0x0800833e
 800792c:	00000000 	.word	0x00000000
 8007930:	080076e1 	.word	0x080076e1
 8007934:	0800833a 	.word	0x0800833a

08007938 <__swbuf_r>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	460e      	mov	r6, r1
 800793c:	4614      	mov	r4, r2
 800793e:	4605      	mov	r5, r0
 8007940:	b118      	cbz	r0, 800794a <__swbuf_r+0x12>
 8007942:	6a03      	ldr	r3, [r0, #32]
 8007944:	b90b      	cbnz	r3, 800794a <__swbuf_r+0x12>
 8007946:	f7ff fa77 	bl	8006e38 <__sinit>
 800794a:	69a3      	ldr	r3, [r4, #24]
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	071a      	lsls	r2, r3, #28
 8007952:	d525      	bpl.n	80079a0 <__swbuf_r+0x68>
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	b31b      	cbz	r3, 80079a0 <__swbuf_r+0x68>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	6922      	ldr	r2, [r4, #16]
 800795c:	1a98      	subs	r0, r3, r2
 800795e:	6963      	ldr	r3, [r4, #20]
 8007960:	b2f6      	uxtb	r6, r6
 8007962:	4283      	cmp	r3, r0
 8007964:	4637      	mov	r7, r6
 8007966:	dc04      	bgt.n	8007972 <__swbuf_r+0x3a>
 8007968:	4621      	mov	r1, r4
 800796a:	4628      	mov	r0, r5
 800796c:	f7ff fe60 	bl	8007630 <_fflush_r>
 8007970:	b9e0      	cbnz	r0, 80079ac <__swbuf_r+0x74>
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	3b01      	subs	r3, #1
 8007976:	60a3      	str	r3, [r4, #8]
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	701e      	strb	r6, [r3, #0]
 8007980:	6962      	ldr	r2, [r4, #20]
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	429a      	cmp	r2, r3
 8007986:	d004      	beq.n	8007992 <__swbuf_r+0x5a>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	07db      	lsls	r3, r3, #31
 800798c:	d506      	bpl.n	800799c <__swbuf_r+0x64>
 800798e:	2e0a      	cmp	r6, #10
 8007990:	d104      	bne.n	800799c <__swbuf_r+0x64>
 8007992:	4621      	mov	r1, r4
 8007994:	4628      	mov	r0, r5
 8007996:	f7ff fe4b 	bl	8007630 <_fflush_r>
 800799a:	b938      	cbnz	r0, 80079ac <__swbuf_r+0x74>
 800799c:	4638      	mov	r0, r7
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f806 	bl	80079b4 <__swsetup_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d0d5      	beq.n	8007958 <__swbuf_r+0x20>
 80079ac:	f04f 37ff 	mov.w	r7, #4294967295
 80079b0:	e7f4      	b.n	800799c <__swbuf_r+0x64>
	...

080079b4 <__swsetup_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <__swsetup_r+0xac>)
 80079b8:	4605      	mov	r5, r0
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	460c      	mov	r4, r1
 80079be:	b118      	cbz	r0, 80079c8 <__swsetup_r+0x14>
 80079c0:	6a03      	ldr	r3, [r0, #32]
 80079c2:	b90b      	cbnz	r3, 80079c8 <__swsetup_r+0x14>
 80079c4:	f7ff fa38 	bl	8006e38 <__sinit>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ce:	0718      	lsls	r0, r3, #28
 80079d0:	d422      	bmi.n	8007a18 <__swsetup_r+0x64>
 80079d2:	06d9      	lsls	r1, r3, #27
 80079d4:	d407      	bmi.n	80079e6 <__swsetup_r+0x32>
 80079d6:	2309      	movs	r3, #9
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295
 80079e4:	e034      	b.n	8007a50 <__swsetup_r+0x9c>
 80079e6:	0758      	lsls	r0, r3, #29
 80079e8:	d512      	bpl.n	8007a10 <__swsetup_r+0x5c>
 80079ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ec:	b141      	cbz	r1, 8007a00 <__swsetup_r+0x4c>
 80079ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f2:	4299      	cmp	r1, r3
 80079f4:	d002      	beq.n	80079fc <__swsetup_r+0x48>
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7ff fbb8 	bl	800716c <_free_r>
 80079fc:	2300      	movs	r3, #0
 80079fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	6063      	str	r3, [r4, #4]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f043 0308 	orr.w	r3, r3, #8
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	b94b      	cbnz	r3, 8007a30 <__swsetup_r+0x7c>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a26:	d003      	beq.n	8007a30 <__swsetup_r+0x7c>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 f884 	bl	8007b38 <__smakebuf_r>
 8007a30:	89a0      	ldrh	r0, [r4, #12]
 8007a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a36:	f010 0301 	ands.w	r3, r0, #1
 8007a3a:	d00a      	beq.n	8007a52 <__swsetup_r+0x9e>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60a3      	str	r3, [r4, #8]
 8007a40:	6963      	ldr	r3, [r4, #20]
 8007a42:	425b      	negs	r3, r3
 8007a44:	61a3      	str	r3, [r4, #24]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b943      	cbnz	r3, 8007a5c <__swsetup_r+0xa8>
 8007a4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a4e:	d1c4      	bne.n	80079da <__swsetup_r+0x26>
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	0781      	lsls	r1, r0, #30
 8007a54:	bf58      	it	pl
 8007a56:	6963      	ldrpl	r3, [r4, #20]
 8007a58:	60a3      	str	r3, [r4, #8]
 8007a5a:	e7f4      	b.n	8007a46 <__swsetup_r+0x92>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e7f7      	b.n	8007a50 <__swsetup_r+0x9c>
 8007a60:	2000007c 	.word	0x2000007c

08007a64 <_raise_r>:
 8007a64:	291f      	cmp	r1, #31
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	d904      	bls.n	8007a78 <_raise_r+0x14>
 8007a6e:	2316      	movs	r3, #22
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a7a:	b112      	cbz	r2, 8007a82 <_raise_r+0x1e>
 8007a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a80:	b94b      	cbnz	r3, 8007a96 <_raise_r+0x32>
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f830 	bl	8007ae8 <_getpid_r>
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_kill_r>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d00a      	beq.n	8007ab0 <_raise_r+0x4c>
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	d103      	bne.n	8007aa6 <_raise_r+0x42>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7e7      	b.n	8007a76 <_raise_r+0x12>
 8007aa6:	2400      	movs	r4, #0
 8007aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aac:	4628      	mov	r0, r5
 8007aae:	4798      	blx	r3
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e0      	b.n	8007a76 <_raise_r+0x12>

08007ab4 <raise>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <raise+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff bfd3 	b.w	8007a64 <_raise_r>
 8007abe:	bf00      	nop
 8007ac0:	2000007c 	.word	0x2000007c

08007ac4 <_kill_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	; (8007ae4 <_kill_r+0x20>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	f7fa f967 	bl	8001da4 <_kill>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d102      	bne.n	8007ae0 <_kill_r+0x1c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	b103      	cbz	r3, 8007ae0 <_kill_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20002574 	.word	0x20002574

08007ae8 <_getpid_r>:
 8007ae8:	f7fa b954 	b.w	8001d94 <_getpid>

08007aec <__swhatbuf_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2900      	cmp	r1, #0
 8007af6:	b096      	sub	sp, #88	; 0x58
 8007af8:	4615      	mov	r5, r2
 8007afa:	461e      	mov	r6, r3
 8007afc:	da0d      	bge.n	8007b1a <__swhatbuf_r+0x2e>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b04:	f04f 0100 	mov.w	r1, #0
 8007b08:	bf0c      	ite	eq
 8007b0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b0e:	2340      	movne	r3, #64	; 0x40
 8007b10:	2000      	movs	r0, #0
 8007b12:	6031      	str	r1, [r6, #0]
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	b016      	add	sp, #88	; 0x58
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	466a      	mov	r2, sp
 8007b1c:	f000 f848 	bl	8007bb0 <_fstat_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dbec      	blt.n	8007afe <__swhatbuf_r+0x12>
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b2e:	4259      	negs	r1, r3
 8007b30:	4159      	adcs	r1, r3
 8007b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b36:	e7eb      	b.n	8007b10 <__swhatbuf_r+0x24>

08007b38 <__smakebuf_r>:
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b3c:	079d      	lsls	r5, r3, #30
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	d507      	bpl.n	8007b54 <__smakebuf_r+0x1c>
 8007b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	6163      	str	r3, [r4, #20]
 8007b50:	b002      	add	sp, #8
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	ab01      	add	r3, sp, #4
 8007b56:	466a      	mov	r2, sp
 8007b58:	f7ff ffc8 	bl	8007aec <__swhatbuf_r>
 8007b5c:	9900      	ldr	r1, [sp, #0]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4630      	mov	r0, r6
 8007b62:	f7ff f851 	bl	8006c08 <_malloc_r>
 8007b66:	b948      	cbnz	r0, 8007b7c <__smakebuf_r+0x44>
 8007b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d4ef      	bmi.n	8007b50 <__smakebuf_r+0x18>
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	e7e3      	b.n	8007b44 <__smakebuf_r+0xc>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	6020      	str	r0, [r4, #0]
 8007b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	9b00      	ldr	r3, [sp, #0]
 8007b88:	6163      	str	r3, [r4, #20]
 8007b8a:	9b01      	ldr	r3, [sp, #4]
 8007b8c:	6120      	str	r0, [r4, #16]
 8007b8e:	b15b      	cbz	r3, 8007ba8 <__smakebuf_r+0x70>
 8007b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b94:	4630      	mov	r0, r6
 8007b96:	f000 f81d 	bl	8007bd4 <_isatty_r>
 8007b9a:	b128      	cbz	r0, 8007ba8 <__smakebuf_r+0x70>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	431d      	orrs	r5, r3
 8007bac:	81a5      	strh	r5, [r4, #12]
 8007bae:	e7cf      	b.n	8007b50 <__smakebuf_r+0x18>

08007bb0 <_fstat_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	; (8007bd0 <_fstat_r+0x20>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7fa f934 	bl	8001e2a <_fstat>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_fstat_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_fstat_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	20002574 	.word	0x20002574

08007bd4 <_isatty_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d06      	ldr	r5, [pc, #24]	; (8007bf0 <_isatty_r+0x1c>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f7fa f933 	bl	8001e4a <_isatty>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_isatty_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_isatty_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20002574 	.word	0x20002574

08007bf4 <_init>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr

08007c00 <_fini>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr
